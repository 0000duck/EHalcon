func_begin(x_union_cotangential_contours_xld);
__tuple t2;if(v_empty(2))t2=0.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=30.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.78539816;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=25.0;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=10.0;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=2.0;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8="attr_forget";else filltuple(a+8, t8);
err=union_cotangential_contours_xld(a_obj(0),varp_obj(1),t2,t3,t4,t5,t6,t7,t8);
func_end_seterr;

func_begin(x_polar_trans_contour_xld_inv);
__tuple t2;if(v_empty(2))t2=256;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=256;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=6.2831853;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=0;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=100;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=512;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=512;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=512;else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11=512;else filltuple(a+11, t11);
err=polar_trans_contour_xld_inv(a_obj(0),varp_obj(1),t2,t3,t4,t5,t6,t7,t8,t9,t10,t11);
func_end_seterr;

func_begin(x_polar_trans_contour_xld);
__tuple t2;if(v_empty(2))t2=256;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=256;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=6.2831853;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=0;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=100;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=512;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=512;else filltuple(a+9, t9);
err=polar_trans_contour_xld(a_obj(0),varp_obj(1),t2,t3,t4,t5,t6,t7,t8,t9);
func_end_seterr;

func_begin(x_gen_nurbs_interp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=3;else filltuple(a+3, t3);
__tuple t4;
__tuple t5;
__tuple t6;
err=gen_nurbs_interp(t0,t1,t2,t3,&t4,&t5,&t6);
fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_gen_contour_nurbs_xld);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="auto";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="auto";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=3;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=1.0;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=5.0;else filltuple(a+7, t7);
err=gen_contour_nurbs_xld(varp_obj(0),t1,t2,t3,t4,t5,t6,t7);
func_end_seterr;

func_begin(x_union2_closed_polygons_xld);
err=union2_closed_polygons_xld(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_union2_closed_contours_xld);
err=union2_closed_contours_xld(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_symm_difference_closed_polygons_xld);
err=symm_difference_closed_polygons_xld(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_symm_difference_closed_contours_xld);
err=symm_difference_closed_contours_xld(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_difference_closed_polygons_xld);
err=difference_closed_polygons_xld(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_difference_closed_contours_xld);
err=difference_closed_contours_xld(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_intersection_closed_polygons_xld);
err=intersection_closed_polygons_xld(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_intersection_closed_contours_xld);
err=intersection_closed_contours_xld(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_union_cocircular_contours_xld);
__tuple t2;if(v_empty(2))t2=0.5;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.1;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.2;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=30;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=10;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=10;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8="true";else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=1;else filltuple(a+9, t9);
err=union_cocircular_contours_xld(a_obj(0),varp_obj(1),t2,t3,t4,t5,t6,t7,t8,t9);
func_end_seterr;

func_begin(x_crop_contours_xld);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=512;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=512;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="true";else filltuple(a+6, t6);
err=crop_contours_xld(a_obj(0),varp_obj(1),t2,t3,t4,t5,t6);
func_end_seterr;

func_begin(x_gen_cross_contour_xld);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=6.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.785398;else filltuple(a+4, t4);
err=gen_cross_contour_xld(varp_obj(0),t1,t2,t3,t4);
func_end_seterr;

func_begin(x_sort_contours_xld);
__tuple t2;if(v_empty(2))t2="upper_left";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="true";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="row";else filltuple(a+4, t4);
err=sort_contours_xld(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_merge_cont_line_scan_xld);
__tuple t4;if(v_empty(4))t4=512;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=0.0;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="top";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=3;else filltuple(a+7, t7);
err=merge_cont_line_scan_xld(a_obj(0),a_obj(1),varp_obj(2),varp_obj(3),t4,t5,t6,t7);
func_end_seterr;

func_begin(x_read_polygon_xld_arc_info);
__tuple t1;filltuple(a+1, t1);
err=read_polygon_xld_arc_info(varp_obj(0),t1);
func_end_seterr;

func_begin(x_write_polygon_xld_arc_info);
__tuple t1;filltuple(a+1, t1);
err=write_polygon_xld_arc_info(a_obj(0),t1);
func_end_seterr;

func_begin(x_read_contour_xld_arc_info);
__tuple t1;filltuple(a+1, t1);
err=read_contour_xld_arc_info(varp_obj(0),t1);
func_end_seterr;

func_begin(x_write_contour_xld_arc_info);
__tuple t1;filltuple(a+1, t1);
err=write_contour_xld_arc_info(a_obj(0),t1);
func_end_seterr;

func_begin(x_read_world_file);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=read_world_file(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_gen_parallel_contour_xld);
__tuple t2;if(v_empty(2))t2="regression_normal";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1;else filltuple(a+3, t3);
err=gen_parallel_contour_xld(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_gen_rectangle2_contour_xld);
__tuple t1;if(v_empty(1))t1=300.0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=200.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=100.5;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=20.5;else filltuple(a+5, t5);
err=gen_rectangle2_contour_xld(varp_obj(0),t1,t2,t3,t4,t5);
func_end_seterr;

func_begin(x_dist_rectangle2_contour_points_xld);
__tuple t1;if(v_empty(1))t1=0;else filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;filltuple(a+6, t6);
__tuple t7;
err=dist_rectangle2_contour_points_xld(a_obj(0),t1,t2,t3,t4,t5,t6,&t7);
fillvar(t7, a+7);
func_end_seterr;

func_begin(x_fit_rectangle2_contour_xld);
__tuple t1;if(v_empty(1))t1="regression";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=-1;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=3;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=2.0;else filltuple(a+6, t6);
__tuple t7;
__tuple t8;
__tuple t9;
__tuple t10;
__tuple t11;
__tuple t12;
err=fit_rectangle2_contour_xld(a_obj(0),t1,t2,t3,t4,t5,t6,&t7,&t8,&t9,&t10,&t11,&t12);
fillvar(t7, a+7);fillvar(t8, a+8);fillvar(t9, a+9);fillvar(t10, a+10);fillvar(t11, a+11);fillvar(t12, a+12);
func_end_seterr;

func_begin(x_segment_contour_attrib_xld);
__tuple t2;if(v_empty(2))t2="distance";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="and";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=150.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=99999.0;else filltuple(a+5, t5);
err=segment_contour_attrib_xld(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_segment_contours_xld);
__tuple t2;if(v_empty(2))t2="lines_circles";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=5;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=4.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=2.0;else filltuple(a+5, t5);
err=segment_contours_xld(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_fit_circle_contour_xld);
__tuple t1;if(v_empty(1))t1="algebraic";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=-1;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=3;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=2.0;else filltuple(a+6, t6);
__tuple t7;
__tuple t8;
__tuple t9;
__tuple t10;
__tuple t11;
__tuple t12;
err=fit_circle_contour_xld(a_obj(0),t1,t2,t3,t4,t5,t6,&t7,&t8,&t9,&t10,&t11,&t12);
fillvar(t7, a+7);fillvar(t8, a+8);fillvar(t9, a+9);fillvar(t10, a+10);fillvar(t11, a+11);fillvar(t12, a+12);
func_end_seterr;

func_begin(x_fit_line_contour_xld);
__tuple t1;if(v_empty(1))t1="tukey";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=-1;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=5;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=2.0;else filltuple(a+5, t5);
__tuple t6;
__tuple t7;
__tuple t8;
__tuple t9;
__tuple t10;
__tuple t11;
__tuple t12;
err=fit_line_contour_xld(a_obj(0),t1,t2,t3,t4,t5,&t6,&t7,&t8,&t9,&t10,&t11,&t12);
fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);fillvar(t9, a+9);fillvar(t10, a+10);fillvar(t11, a+11);fillvar(t12, a+12);
func_end_seterr;

func_begin(x_dist_ellipse_contour_points_xld);
__tuple t1;if(v_empty(1))t1="unsigned";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;filltuple(a+6, t6);
__tuple t7;filltuple(a+7, t7);
__tuple t8;
err=dist_ellipse_contour_points_xld(a_obj(0),t1,t2,t3,t4,t5,t6,t7,&t8);
fillvar(t8, a+8);
func_end_seterr;

func_begin(x_dist_ellipse_contour_xld);
__tuple t1;if(v_empty(1))t1="geometric";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=-1;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;filltuple(a+6, t6);
__tuple t7;filltuple(a+7, t7);
__tuple t8;filltuple(a+8, t8);
__tuple t9;
__tuple t10;
__tuple t11;
__tuple t12;
err=dist_ellipse_contour_xld(a_obj(0),t1,t2,t3,t4,t5,t6,t7,t8,&t9,&t10,&t11,&t12);
fillvar(t9, a+9);fillvar(t10, a+10);fillvar(t11, a+11);fillvar(t12, a+12);
func_end_seterr;

func_begin(x_fit_ellipse_contour_xld);
__tuple t1;if(v_empty(1))t1="fitzgibbon";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=-1;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=200;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=3;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=2.0;else filltuple(a+7, t7);
__tuple t8;
__tuple t9;
__tuple t10;
__tuple t11;
__tuple t12;
__tuple t13;
__tuple t14;
__tuple t15;
err=fit_ellipse_contour_xld(a_obj(0),t1,t2,t3,t4,t5,t6,t7,&t8,&t9,&t10,&t11,&t12,&t13,&t14,&t15);
fillvar(t8, a+8);fillvar(t9, a+9);fillvar(t10, a+10);fillvar(t11, a+11);fillvar(t12, a+12);fillvar(t13, a+13);fillvar(t14, a+14);fillvar(t15, a+15);
func_end_seterr;

func_begin(x_gen_circle_contour_xld);
__tuple t1;if(v_empty(1))t1=200.0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=200.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=100.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=6.28318;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="positive";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=1.0;else filltuple(a+7, t7);
err=gen_circle_contour_xld(varp_obj(0),t1,t2,t3,t4,t5,t6,t7);
func_end_seterr;

func_begin(x_gen_ellipse_contour_xld);
__tuple t1;if(v_empty(1))t1=200.0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=200.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=100.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=50.0;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=0.0;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=6.28318;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8="positive";else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=1.5;else filltuple(a+9, t9);
err=gen_ellipse_contour_xld(varp_obj(0),t1,t2,t3,t4,t5,t6,t7,t8,t9);
func_end_seterr;

func_begin(x_add_noise_white_contour_xld);
__tuple t2;if(v_empty(2))t2=5;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1.0;else filltuple(a+3, t3);
err=add_noise_white_contour_xld(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_combine_roads_xld);
__tuple t5;if(v_empty(5))t5=0.523598775598;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=0.261799387799;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=40;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=40;else filltuple(a+8, t8);
err=combine_roads_xld(a_obj(0),a_obj(1),a_obj(2),a_obj(3),varp_obj(4),t5,t6,t7,t8);
func_end_seterr;

func_begin(x_max_parallels_xld);
err=max_parallels_xld(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_mod_parallels_xld);
__tuple t4;if(v_empty(4))t4=0.4;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=160;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=220;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=10.0;else filltuple(a+7, t7);
err=mod_parallels_xld(a_obj(0),a_obj(1),varp_obj(2),varp_obj(3),t4,t5,t6,t7);
func_end_seterr;

func_begin(x_info_parallels_xld);
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
__tuple t6;
__tuple t7;
err=info_parallels_xld(a_obj(0),a_obj(1),&t2,&t3,&t4,&t5,&t6,&t7);
fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);
func_end_seterr;

func_begin(x_get_parallels_xld);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
__tuple t6;
__tuple t7;
__tuple t8;
err=get_parallels_xld(a_obj(0),&t1,&t2,&t3,&t4,&t5,&t6,&t7,&t8);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);
func_end_seterr;

func_begin(x_gen_parallels_xld);
__tuple t2;if(v_empty(2))t2=10.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=30.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.15;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="true";else filltuple(a+5, t5);
err=gen_parallels_xld(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_get_lines_xld);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
__tuple t6;
err=get_lines_xld(a_obj(0),&t1,&t2,&t3,&t4,&t5,&t6);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_get_polygon_xld);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
err=get_polygon_xld(a_obj(0),&t1,&t2,&t3,&t4);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_gen_polygons_xld);
__tuple t2;if(v_empty(2))t2="ramer";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=2.0;else filltuple(a+3, t3);
err=gen_polygons_xld(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_split_contours_xld);
__tuple t2;if(v_empty(2))t2="polygon";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=5;else filltuple(a+4, t4);
err=split_contours_xld(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_projective_trans_contour_xld);
__tuple t2;filltuple(a+2, t2);
err=projective_trans_contour_xld(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_affine_trans_polygon_xld);
__tuple t2;filltuple(a+2, t2);
err=affine_trans_polygon_xld(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_affine_trans_contour_xld);
__tuple t2;filltuple(a+2, t2);
err=affine_trans_contour_xld(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_close_contours_xld);
err=close_contours_xld(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_clip_end_points_contours_xld);
__tuple t2;if(v_empty(2))t2="num_points";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=3;else filltuple(a+3, t3);
err=clip_end_points_contours_xld(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_clip_contours_xld);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=512;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=512;else filltuple(a+5, t5);
err=clip_contours_xld(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_local_max_contours_xld);
__tuple t3;if(v_empty(3))t3=70;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=15;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=4;else filltuple(a+5, t5);
err=local_max_contours_xld(a_obj(0),a_obj(1),varp_obj(2),t3,t4,t5);
func_end_seterr;

func_begin(x_union_straight_contours_histo_xld);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=0;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=0;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=1;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=1;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=1;else filltuple(a+9, t9);
__tuple t10;
err=union_straight_contours_histo_xld(a_obj(0),varp_obj(1),varp_obj(2),t3,t4,t5,t6,t7,t8,t9,&t10);
fillvar(t10, a+10);
func_end_seterr;

func_begin(x_union_straight_contours_xld);
__tuple t2;if(v_empty(2))t2=5.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.5;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=50.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="noparallel";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="maximum";else filltuple(a+6, t6);
err=union_straight_contours_xld(a_obj(0),varp_obj(1),t2,t3,t4,t5,t6);
func_end_seterr;

func_begin(x_union_collinear_contours_ext_xld);
__tuple t2;if(v_empty(2))t2=10.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=2.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=0.1;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=0.0;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=-1.0;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=1.0;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=1.0;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=1.0;else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11=1.0;else filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12=1.0;else filltuple(a+12, t12);
__tuple t13;if(v_empty(13))t13=0.0;else filltuple(a+13, t13);
__tuple t14;if(v_empty(14))t14="attr_keep";else filltuple(a+14, t14);
err=union_collinear_contours_ext_xld(a_obj(0),varp_obj(1),t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14);
func_end_seterr;

func_begin(x_union_collinear_contours_xld);
__tuple t2;if(v_empty(2))t2=10.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=2.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=0.1;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="attr_keep";else filltuple(a+6, t6);
err=union_collinear_contours_xld(a_obj(0),varp_obj(1),t2,t3,t4,t5,t6);
func_end_seterr;

func_begin(x_union_adjacent_contours_xld);
__tuple t2;if(v_empty(2))t2=10.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="attr_keep";else filltuple(a+4, t4);
err=union_adjacent_contours_xld(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_select_contours_xld);
__tuple t2;if(v_empty(2))t2="contour_length";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.5;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=200.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=-0.5;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=0.5;else filltuple(a+6, t6);
err=select_contours_xld(a_obj(0),varp_obj(1),t2,t3,t4,t5,t6);
func_end_seterr;

func_begin(x_get_regress_params_xld);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
__tuple t6;
__tuple t7;
__tuple t8;
__tuple t9;
__tuple t10;
err=get_regress_params_xld(a_obj(0),&t1,&t2,&t3,&t4,&t5,&t6,&t7,&t8,&t9,&t10);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);fillvar(t9, a+9);fillvar(t10, a+10);
func_end_seterr;

func_begin(x_regress_contours_xld);
__tuple t2;if(v_empty(2))t2="no";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1;else filltuple(a+3, t3);
err=regress_contours_xld(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_get_contour_angle_xld);
__tuple t1;if(v_empty(1))t1="abs";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="range";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=3;else filltuple(a+3, t3);
__tuple t4;
err=get_contour_angle_xld(a_obj(0),t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_smooth_contours_xld);
__tuple t2;if(v_empty(2))t2=5;else filltuple(a+2, t2);
err=smooth_contours_xld(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_contour_point_num_xld);
__tuple t1;
err=contour_point_num_xld(a_obj(0),&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_query_contour_global_attribs_xld);
__tuple t1;
err=query_contour_global_attribs_xld(a_obj(0),&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_get_contour_global_attrib_xld);
__tuple t1;if(v_empty(1))t1="regr_norm_row";else filltuple(a+1, t1);
__tuple t2;
err=get_contour_global_attrib_xld(a_obj(0),t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_query_contour_attribs_xld);
__tuple t1;
err=query_contour_attribs_xld(a_obj(0),&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_get_contour_attrib_xld);
__tuple t1;if(v_empty(1))t1="angle";else filltuple(a+1, t1);
__tuple t2;
err=get_contour_attrib_xld(a_obj(0),t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_get_contour_xld);
__tuple t1;
__tuple t2;
err=get_contour_xld(a_obj(0),&t1,&t2);
fillvar(t1, a+1);fillvar(t2, a+2);
func_end_seterr;

func_begin(x_gen_contour_region_xld);
__tuple t2;if(v_empty(2))t2="border";else filltuple(a+2, t2);
err=gen_contour_region_xld(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_gen_contour_polygon_rounded_xld);
__tuple t1;if(v_empty(1)){const char* vs1[]={"20","80","80","20","20"};arr2tupleS(vs1, 5, t1);}else filltuple(a+1, t1);
__tuple t2;if(v_empty(2)){const char* vs2[]={"20","20","80","80","20"};arr2tupleS(vs2, 5, t2);}else filltuple(a+2, t2);
__tuple t3;if(v_empty(3)){const char* vs3[]={"20","20","20","20","20"};arr2tupleS(vs3, 5, t3);}else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=1.0;else filltuple(a+4, t4);
err=gen_contour_polygon_rounded_xld(varp_obj(0),t1,t2,t3,t4);
func_end_seterr;

func_begin(x_gen_contour_polygon_xld);
__tuple t1;if(v_empty(1)){const char* vs1[]={"0","1","2","2","2"};arr2tupleS(vs1, 5, t1);}else filltuple(a+1, t1);
__tuple t2;if(v_empty(2)){const char* vs2[]={"0","0","0","1","2"};arr2tupleS(vs2, 5, t2);}else filltuple(a+2, t2);
err=gen_contour_polygon_xld(varp_obj(0),t1,t2);
func_end_seterr;

func_begin(x_gen_contours_skeleton_xld);
__tuple t2;if(v_empty(2))t2=1;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="filter";else filltuple(a+3, t3);
err=gen_contours_skeleton_xld(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_disp_xld);
__tuple t1;filltuple(a+1, t1);
err=disp_xld(a_obj(0),t1);
func_end_seterr;

func_begin(x_wiener_filter_ni);
__tuple t4;if(v_empty(4))t4=3;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=3;else filltuple(a+5, t5);
err=wiener_filter_ni(a_obj(0),a_obj(1),a_obj(2),varp_obj(3),t4,t5);
func_end_seterr;

func_begin(x_wiener_filter);
err=wiener_filter(a_obj(0),a_obj(1),a_obj(2),varp_obj(3));
func_end_seterr;

func_begin(x_gen_psf_motion);
__tuple t1;if(v_empty(1))t1=256;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=256;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=20.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=3;else filltuple(a+5, t5);
err=gen_psf_motion(varp_obj(0),t1,t2,t3,t4,t5);
func_end_seterr;

func_begin(x_simulate_motion);
__tuple t2;if(v_empty(2))t2=20.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=3;else filltuple(a+4, t4);
err=simulate_motion(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_gen_psf_defocus);
__tuple t1;if(v_empty(1))t1=256;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=256;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=5.0;else filltuple(a+3, t3);
err=gen_psf_defocus(varp_obj(0),t1,t2,t3);
func_end_seterr;

func_begin(x_simulate_defocus);
__tuple t2;if(v_empty(2))t2=5.0;else filltuple(a+2, t2);
err=simulate_defocus(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_deserialize_variation_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_variation_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_serialize_variation_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_variation_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_read_variation_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=read_variation_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_variation_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=write_variation_model(t0,t1);
func_end_seterr;

func_begin(x_get_thresh_images_variation_model);
__tuple t2;filltuple(a+2, t2);
err=get_thresh_images_variation_model(varp_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_get_variation_model);
__tuple t2;filltuple(a+2, t2);
err=get_variation_model(varp_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_compare_ext_variation_model);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="absolute";else filltuple(a+3, t3);
err=compare_ext_variation_model(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_compare_variation_model);
__tuple t2;filltuple(a+2, t2);
err=compare_variation_model(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_prepare_direct_variation_model);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=10;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=2;else filltuple(a+4, t4);
err=prepare_direct_variation_model(a_obj(0),a_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_prepare_variation_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=10;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=2;else filltuple(a+2, t2);
err=prepare_variation_model(t0,t1,t2);
func_end_seterr;

func_begin(x_train_variation_model);
__tuple t1;filltuple(a+1, t1);
err=train_variation_model(a_obj(0),t1);
func_end_seterr;

func_begin(x_clear_all_variation_models);
err=clear_all_variation_models();
func_end_seterr;

func_begin(x_clear_variation_model);
__tuple t0;filltuple(a+0, t0);
err=clear_variation_model(t0);
func_end_seterr;

func_begin(x_clear_train_data_variation_model);
__tuple t0;filltuple(a+0, t0);
err=clear_train_data_variation_model(t0);
func_end_seterr;

func_begin(x_create_variation_model);
__tuple t0;if(v_empty(0))t0=640;else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=480;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="byte";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="standard";else filltuple(a+3, t3);
__tuple t4;
err=create_variation_model(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_tuple_union);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_union(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_intersection);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_intersection(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_difference);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_difference(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_symmdiff);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_symmdiff(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_is_string_elem);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_is_string_elem(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_is_real_elem);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_is_real_elem(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_is_int_elem);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_is_int_elem(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_type_elem);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_type_elem(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_is_mixed);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_is_mixed(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_is_string);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_is_string(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_is_real);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_is_real(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_is_int);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_is_int(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_type);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_type(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_histo_range);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;
__tuple t5;
err=tuple_histo_range(t0,t1,t2,t3,&t4,&t5);
fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_tuple_regexp_select);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=".*";else filltuple(a+1, t1);
__tuple t2;
err=tuple_regexp_select(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_regexp_test);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=".*";else filltuple(a+1, t1);
__tuple t2;
err=tuple_regexp_test(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_regexp_replace);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=".*";else filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;
err=tuple_regexp_replace(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_tuple_regexp_match);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=".*";else filltuple(a+1, t1);
__tuple t2;
err=tuple_regexp_match(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_rand);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_rand(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_length);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_length(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_sgn);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_sgn(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_max2);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_max2(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_min2);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_min2(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_max);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_max(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_min);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_min(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_cumul);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_cumul(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_select_rank);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_select_rank(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_median);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_median(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_sum);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_sum(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_mean);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_mean(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_deviation);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_deviation(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_uniq);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_uniq(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_find_last);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_find_last(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_find_first);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_find_first(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_find);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_find(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_sort_index);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_sort_index(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_sort);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_sort(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_inverse);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_inverse(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_concat);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_concat(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_select_range);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;
err=tuple_select_range(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_tuple_last_n);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_last_n(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_first_n);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_first_n(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_insert);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;
err=tuple_insert(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_tuple_replace);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;
err=tuple_replace(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_tuple_remove);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_remove(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_select_mask);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_select_mask(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_select);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_select(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_str_bit_select);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_str_bit_select(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_gen_sequence);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;
err=tuple_gen_sequence(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_tuple_gen_const);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_gen_const(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_environment);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_environment(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_split);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_split(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_substr);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;
err=tuple_substr(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_tuple_str_last_n);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_str_last_n(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_str_first_n);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_str_first_n(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_strrchr);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_strrchr(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_strchr);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_strchr(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_strrstr);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_strrstr(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_strstr);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_strstr(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_strlen);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_strlen(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_less_equal_elem);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_less_equal_elem(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_less_elem);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_less_elem(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_greater_equal_elem);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_greater_equal_elem(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_greater_elem);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_greater_elem(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_not_equal_elem);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_not_equal_elem(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_equal_elem);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_equal_elem(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_less_equal);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_less_equal(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_less);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_less(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_greater_equal);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_greater_equal(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_greater);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_greater(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_not_equal);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_not_equal(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_equal);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_equal(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_not);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_not(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_xor);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_xor(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_or);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_or(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_and);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_and(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_bnot);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_bnot(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_bxor);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_bxor(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_bor);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_bor(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_band);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_band(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_rsh);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_rsh(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_lsh);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_lsh(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_chrt);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_chrt(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_ords);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_ords(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_chr);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_chr(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_ord);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_ord(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_string);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_string(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_is_number);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_is_number(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_number);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_number(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_round);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_round(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_int);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_int(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_real);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_real(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_ldexp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_ldexp(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_fmod);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_fmod(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_mod);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_mod(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_ceil);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_ceil(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_floor);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_floor(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_pow);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_pow(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_log10);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_log10(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_log);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_log(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_exp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_exp(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_tanh);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_tanh(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_cosh);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_cosh(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_sinh);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_sinh(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_rad);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_rad(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_deg);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_deg(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_atan2);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_atan2(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_atan);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_atan(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_acos);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_acos(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_asin);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_asin(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_tan);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_tan(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_cos);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_cos(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_sin);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_sin(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_fabs);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_fabs(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_sqrt);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_sqrt(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_abs);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_abs(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_neg);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=tuple_neg(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_tuple_div);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_div(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_mult);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_mult(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_sub);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_sub(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_tuple_add);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=tuple_add(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_deserialize_tuple);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_tuple(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_serialize_tuple);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_tuple(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_tuple);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=write_tuple(t0,t1);
func_end_seterr;

func_begin(x_read_tuple);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=read_tuple(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_pose_average);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(!v_empty(1)) filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="iterative";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="auto";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="auto";else filltuple(a+4, t4);
__tuple t5;
__tuple t6;
err=pose_average(t0,t1,t2,t3,t4,&t5,&t6);
fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_quat_rotate_point_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;
__tuple t5;
__tuple t6;
err=quat_rotate_point_3d(t0,t1,t2,t3,&t4,&t5,&t6);
fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_quat_conjugate);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=quat_conjugate(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_quat_normalize);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=quat_normalize(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_axis_angle_to_quat);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;
err=axis_angle_to_quat(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_quat_to_pose);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=quat_to_pose(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_pose_invert);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=pose_invert(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_pose_compose);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=pose_compose(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_quat_to_hom_mat3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=quat_to_hom_mat3d(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_pose_to_quat);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=pose_to_quat(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_quat_interpolate);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0.5;else filltuple(a+2, t2);
__tuple t3;
err=quat_interpolate(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_quat_compose);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=quat_compose(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_deserialize_hom_mat3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_hom_mat3d(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_serialize_hom_mat3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_hom_mat3d(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_deserialize_hom_mat2d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_hom_mat2d(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_serialize_hom_mat2d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_hom_mat2d(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_deserialize_quat);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_quat(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_serialize_quat);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_quat(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_projective_trans_hom_point_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;
__tuple t6;
__tuple t7;
__tuple t8;
err=projective_trans_hom_point_3d(t0,t1,t2,t3,t4,&t5,&t6,&t7,&t8);
fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);
func_end_seterr;

func_begin(x_projective_trans_point_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;
__tuple t5;
__tuple t6;
err=projective_trans_point_3d(t0,t1,t2,t3,&t4,&t5,&t6);
fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_affine_trans_point_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=64;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=64;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=64;else filltuple(a+3, t3);
__tuple t4;
__tuple t5;
__tuple t6;
err=affine_trans_point_3d(t0,t1,t2,t3,&t4,&t5,&t6);
fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_vector_to_hom_mat3d);
__tuple t0;if(v_empty(0))t0="rigid";else filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;filltuple(a+6, t6);
__tuple t7;
err=vector_to_hom_mat3d(t0,t1,t2,t3,t4,t5,t6,&t7);
fillvar(t7, a+7);
func_end_seterr;

func_begin(x_hom_mat3d_determinant);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=hom_mat3d_determinant(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_hom_mat3d_transpose);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=hom_mat3d_transpose(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_hom_mat3d_invert);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=hom_mat3d_invert(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_hom_mat3d_compose);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=hom_mat3d_compose(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_hom_mat3d_rotate_local);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0.78;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="x";else filltuple(a+2, t2);
__tuple t3;
err=hom_mat3d_rotate_local(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_hom_mat3d_rotate);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0.78;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="x";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=0;else filltuple(a+5, t5);
__tuple t6;
err=hom_mat3d_rotate(t0,t1,t2,t3,t4,t5,&t6);
fillvar(t6, a+6);
func_end_seterr;

func_begin(x_hom_mat3d_scale_local);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=2;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=2;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=2;else filltuple(a+3, t3);
__tuple t4;
err=hom_mat3d_scale_local(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_hom_mat3d_scale);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=2;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=2;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=2;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=0;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=0;else filltuple(a+6, t6);
__tuple t7;
err=hom_mat3d_scale(t0,t1,t2,t3,t4,t5,t6,&t7);
fillvar(t7, a+7);
func_end_seterr;

func_begin(x_hom_mat3d_translate_local);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=64;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=64;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=64;else filltuple(a+3, t3);
__tuple t4;
err=hom_mat3d_translate_local(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_hom_mat3d_translate);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=64;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=64;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=64;else filltuple(a+3, t3);
__tuple t4;
err=hom_mat3d_translate(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_hom_mat3d_identity);
__tuple t0;
err=hom_mat3d_identity(&t0);
fillvar(t0, a+0);
func_end_seterr;

func_begin(x_hom_mat3d_project);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=256;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=256;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=256;else filltuple(a+3, t3);
__tuple t4;
err=hom_mat3d_project(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_bundle_adjust_mosaic);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;filltuple(a+6, t6);
__tuple t7;filltuple(a+7, t7);
__tuple t8;filltuple(a+8, t8);
__tuple t9;filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10="projective";else filltuple(a+10, t10);
__tuple t11;
__tuple t12;
__tuple t13;
__tuple t14;
err=bundle_adjust_mosaic(t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,&t11,&t12,&t13,&t14);
fillvar(t11, a+11);fillvar(t12, a+12);fillvar(t13, a+13);fillvar(t14, a+14);
func_end_seterr;

func_begin(x_proj_match_points_distortion_ransac_guided);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="ncc";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=10;else filltuple(a+7, t7);
__tuple t8;filltuple(a+8, t8);
__tuple t9;filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=20.0;else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11=0.7;else filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12="gold_standard";else filltuple(a+12, t12);
__tuple t13;if(v_empty(13))t13=1;else filltuple(a+13, t13);
__tuple t14;if(v_empty(14))t14=0;else filltuple(a+14, t14);
__tuple t15;
__tuple t16;
__tuple t17;
__tuple t18;
__tuple t19;
err=proj_match_points_distortion_ransac_guided(a_obj(0),a_obj(1),t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,&t15,&t16,&t17,&t18,&t19);
fillvar(t15, a+15);fillvar(t16, a+16);fillvar(t17, a+17);fillvar(t18, a+18);fillvar(t19, a+19);
func_end_seterr;

func_begin(x_proj_match_points_distortion_ransac);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="ncc";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=10;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=0;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=0;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=200;else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11=200;else filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12=0.0;else filltuple(a+12, t12);
__tuple t13;if(v_empty(13))t13=0.7;else filltuple(a+13, t13);
__tuple t14;if(v_empty(14))t14="gold_standard";else filltuple(a+14, t14);
__tuple t15;if(v_empty(15))t15=1;else filltuple(a+15, t15);
__tuple t16;if(v_empty(16))t16=0;else filltuple(a+16, t16);
__tuple t17;
__tuple t18;
__tuple t19;
__tuple t20;
__tuple t21;
err=proj_match_points_distortion_ransac(a_obj(0),a_obj(1),t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,&t17,&t18,&t19,&t20,&t21);
fillvar(t17, a+17);fillvar(t18, a+18);fillvar(t19, a+19);fillvar(t20, a+20);fillvar(t21, a+21);
func_end_seterr;

func_begin(x_proj_match_points_ransac_guided);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="ssd";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=10;else filltuple(a+7, t7);
__tuple t8;filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=20.0;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=10;else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11="normalized_dlt";else filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12=0.2;else filltuple(a+12, t12);
__tuple t13;if(v_empty(13))t13=0;else filltuple(a+13, t13);
__tuple t14;
__tuple t15;
__tuple t16;
err=proj_match_points_ransac_guided(a_obj(0),a_obj(1),t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,&t14,&t15,&t16);
fillvar(t14, a+14);fillvar(t15, a+15);fillvar(t16, a+16);
func_end_seterr;

func_begin(x_proj_match_points_ransac);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="ssd";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=10;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=0;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=0;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=256;else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11=256;else filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12=0.0;else filltuple(a+12, t12);
__tuple t13;if(v_empty(13))t13=10;else filltuple(a+13, t13);
__tuple t14;if(v_empty(14))t14="normalized_dlt";else filltuple(a+14, t14);
__tuple t15;if(v_empty(15))t15=0.2;else filltuple(a+15, t15);
__tuple t16;if(v_empty(16))t16=0;else filltuple(a+16, t16);
__tuple t17;
__tuple t18;
__tuple t19;
err=proj_match_points_ransac(a_obj(0),a_obj(1),t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,&t17,&t18,&t19);
fillvar(t17, a+17);fillvar(t18, a+18);fillvar(t19, a+19);
func_end_seterr;

func_begin(x_vector_to_proj_hom_mat2d_distortion);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(!v_empty(4)) filltuple(a+4, t4);
__tuple t5;if(!v_empty(5)) filltuple(a+5, t5);
__tuple t6;if(!v_empty(6)) filltuple(a+6, t6);
__tuple t7;if(!v_empty(7)) filltuple(a+7, t7);
__tuple t8;if(!v_empty(8)) filltuple(a+8, t8);
__tuple t9;if(!v_empty(9)) filltuple(a+9, t9);
__tuple t10;filltuple(a+10, t10);
__tuple t11;filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12="gold_standard";else filltuple(a+12, t12);
__tuple t13;
__tuple t14;
__tuple t15;
err=vector_to_proj_hom_mat2d_distortion(t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,&t13,&t14,&t15);
fillvar(t13, a+13);fillvar(t14, a+14);fillvar(t15, a+15);
func_end_seterr;

func_begin(x_hom_vector_to_proj_hom_mat2d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="normalized_dlt";else filltuple(a+6, t6);
__tuple t7;
err=hom_vector_to_proj_hom_mat2d(t0,t1,t2,t3,t4,t5,t6,&t7);
fillvar(t7, a+7);
func_end_seterr;

func_begin(x_vector_to_proj_hom_mat2d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="normalized_dlt";else filltuple(a+4, t4);
__tuple t5;if(!v_empty(5)) filltuple(a+5, t5);
__tuple t6;if(!v_empty(6)) filltuple(a+6, t6);
__tuple t7;if(!v_empty(7)) filltuple(a+7, t7);
__tuple t8;if(!v_empty(8)) filltuple(a+8, t8);
__tuple t9;if(!v_empty(9)) filltuple(a+9, t9);
__tuple t10;if(!v_empty(10)) filltuple(a+10, t10);
__tuple t11;
__tuple t12;
err=vector_to_proj_hom_mat2d(t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,&t11,&t12);
fillvar(t11, a+11);fillvar(t12, a+12);
func_end_seterr;

func_begin(x_hom_mat2d_to_affine_par);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
__tuple t6;
err=hom_mat2d_to_affine_par(t0,&t1,&t2,&t3,&t4,&t5,&t6);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_vector_angle_to_rigid);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;
err=vector_angle_to_rigid(t0,t1,t2,t3,t4,t5,&t6);
fillvar(t6, a+6);
func_end_seterr;

func_begin(x_point_line_to_hom_mat2d);
__tuple t0;if(v_empty(0))t0="rigid";else filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;filltuple(a+6, t6);
__tuple t7;
err=point_line_to_hom_mat2d(t0,t1,t2,t3,t4,t5,t6,&t7);
fillvar(t7, a+7);
func_end_seterr;

func_begin(x_vector_to_rigid);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;
err=vector_to_rigid(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_vector_to_similarity);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;
err=vector_to_similarity(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_vector_to_aniso);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;
err=vector_to_aniso(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_vector_to_hom_mat2d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;
err=vector_to_hom_mat2d(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_projective_trans_pixel);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=64;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=64;else filltuple(a+2, t2);
__tuple t3;
__tuple t4;
err=projective_trans_pixel(t0,t1,t2,&t3,&t4);
fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_projective_trans_point_2d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;
__tuple t5;
__tuple t6;
err=projective_trans_point_2d(t0,t1,t2,t3,&t4,&t5,&t6);
fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_affine_trans_pixel);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=64;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=64;else filltuple(a+2, t2);
__tuple t3;
__tuple t4;
err=affine_trans_pixel(t0,t1,t2,&t3,&t4);
fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_affine_trans_point_2d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=64;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=64;else filltuple(a+2, t2);
__tuple t3;
__tuple t4;
err=affine_trans_point_2d(t0,t1,t2,&t3,&t4);
fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_hom_mat2d_determinant);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=hom_mat2d_determinant(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_hom_mat2d_transpose);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=hom_mat2d_transpose(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_hom_mat2d_invert);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=hom_mat2d_invert(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_hom_mat2d_compose);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=hom_mat2d_compose(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_hom_mat2d_reflect_local);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=16;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=32;else filltuple(a+2, t2);
__tuple t3;
err=hom_mat2d_reflect_local(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_hom_mat2d_reflect);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=16;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=32;else filltuple(a+4, t4);
__tuple t5;
err=hom_mat2d_reflect(t0,t1,t2,t3,t4,&t5);
fillvar(t5, a+5);
func_end_seterr;

func_begin(x_hom_mat2d_slant_local);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0.78;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="x";else filltuple(a+2, t2);
__tuple t3;
err=hom_mat2d_slant_local(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_hom_mat2d_slant);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0.78;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="x";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0;else filltuple(a+4, t4);
__tuple t5;
err=hom_mat2d_slant(t0,t1,t2,t3,t4,&t5);
fillvar(t5, a+5);
func_end_seterr;

func_begin(x_hom_mat2d_rotate_local);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0.78;else filltuple(a+1, t1);
__tuple t2;
err=hom_mat2d_rotate_local(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_hom_mat2d_rotate);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0.78;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
__tuple t4;
err=hom_mat2d_rotate(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_hom_mat2d_scale_local);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=2;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=2;else filltuple(a+2, t2);
__tuple t3;
err=hom_mat2d_scale_local(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_hom_mat2d_scale);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=2;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=2;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0;else filltuple(a+4, t4);
__tuple t5;
err=hom_mat2d_scale(t0,t1,t2,t3,t4,&t5);
fillvar(t5, a+5);
func_end_seterr;

func_begin(x_hom_mat2d_translate_local);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=64;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=64;else filltuple(a+2, t2);
__tuple t3;
err=hom_mat2d_translate_local(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_hom_mat2d_translate);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=64;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=64;else filltuple(a+2, t2);
__tuple t3;
err=hom_mat2d_translate(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_hom_mat2d_identity);
__tuple t0;
err=hom_mat2d_identity(&t0);
fillvar(t0, a+0);
func_end_seterr;

func_begin(x_clear_all_scattered_data_interpolators);
err=clear_all_scattered_data_interpolators();
func_end_seterr;

func_begin(x_clear_scattered_data_interpolator);
__tuple t0;filltuple(a+0, t0);
err=clear_scattered_data_interpolator(t0);
func_end_seterr;

func_begin(x_interpolate_scattered_data);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;
err=interpolate_scattered_data(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_create_scattered_data_interpolator);
__tuple t0;if(v_empty(0))t0="thin_plate_splines";else filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(!v_empty(4)) filltuple(a+4, t4);
__tuple t5;if(!v_empty(5)) filltuple(a+5, t5);
__tuple t6;
err=create_scattered_data_interpolator(t0,t1,t2,t3,t4,t5,&t6);
fillvar(t6, a+6);
func_end_seterr;

func_begin(x_interpolate_scattered_data_points_to_image);
__tuple t1;if(v_empty(1))t1="thin_plate_splines";else filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=640;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=480;else filltuple(a+6, t6);
__tuple t7;if(!v_empty(7)) filltuple(a+7, t7);
__tuple t8;if(!v_empty(8)) filltuple(a+8, t8);
err=interpolate_scattered_data_points_to_image(varp_obj(0),t1,t2,t3,t4,t5,t6,t7,t8);
func_end_seterr;

func_begin(x_interpolate_scattered_data_image);
__tuple t3;if(v_empty(3))t3="thin_plate_splines";else filltuple(a+3, t3);
__tuple t4;if(!v_empty(4)) filltuple(a+4, t4);
__tuple t5;if(!v_empty(5)) filltuple(a+5, t5);
err=interpolate_scattered_data_image(a_obj(0),a_obj(1),varp_obj(2),t3,t4,t5);
func_end_seterr;

func_begin(x_get_system_time);
__tuple t0;
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
__tuple t6;
__tuple t7;
err=get_system_time(&t0,&t1,&t2,&t3,&t4,&t5,&t6,&t7);
fillvar(t0, a+0);fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);
func_end_seterr;

func_begin(x_get_compute_device_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="buffer_cache_capacity";else filltuple(a+1, t1);
__tuple t2;
err=get_compute_device_param(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_set_compute_device_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="buffer_cache_capacity";else filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
err=set_compute_device_param(t0,t1,t2);
func_end_seterr;

func_begin(x_release_all_compute_devices);
err=release_all_compute_devices();
func_end_seterr;

func_begin(x_release_compute_device);
__tuple t0;filltuple(a+0, t0);
err=release_compute_device(t0);
func_end_seterr;

func_begin(x_deactivate_all_compute_devices);
err=deactivate_all_compute_devices();
func_end_seterr;

func_begin(x_deactivate_compute_device);
__tuple t0;filltuple(a+0, t0);
err=deactivate_compute_device(t0);
func_end_seterr;

func_begin(x_activate_compute_device);
__tuple t0;filltuple(a+0, t0);
err=activate_compute_device(t0);
func_end_seterr;

func_begin(x_init_compute_device);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="all";else filltuple(a+1, t1);
err=init_compute_device(t0,t1);
func_end_seterr;

func_begin(x_open_compute_device);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=open_compute_device(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_get_compute_device_info);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="name";else filltuple(a+1, t1);
__tuple t2;
err=get_compute_device_info(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_query_available_compute_devices);
__tuple t0;
err=query_available_compute_devices(&t0);
fillvar(t0, a+0);
func_end_seterr;

func_begin(x_clear_serial);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="input";else filltuple(a+1, t1);
err=clear_serial(t0,t1);
func_end_seterr;

func_begin(x_write_serial);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=write_serial(t0,t1);
func_end_seterr;

func_begin(x_read_serial);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=1;else filltuple(a+1, t1);
__tuple t2;
err=read_serial(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_get_serial_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
__tuple t6;
__tuple t7;
err=get_serial_param(t0,&t1,&t2,&t3,&t4,&t5,&t6,&t7);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);
func_end_seterr;

func_begin(x_set_serial_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="unchanged";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="unchanged";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="unchanged";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="unchanged";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="unchanged";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="unchanged";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="unchanged";else filltuple(a+7, t7);
err=set_serial_param(t0,t1,t2,t3,t4,t5,t6,t7);
func_end_seterr;

func_begin(x_close_all_serials);
err=close_all_serials();
func_end_seterr;

func_begin(x_close_serial);
__tuple t0;filltuple(a+0, t0);
err=close_serial(t0);
func_end_seterr;

func_begin(x_open_serial);
__tuple t0;if(v_empty(0))t0="COM1";else filltuple(a+0, t0);
__tuple t1;
err=open_serial(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_wait_seconds);
__tuple t0;if(v_empty(0))t0=10;else filltuple(a+0, t0);
err=wait_seconds(t0);
func_end_seterr;

func_begin(x_system_call);
__tuple t0;if(v_empty(0))t0="ls";else filltuple(a+0, t0);
err=system_call(t0);
func_end_seterr;

func_begin(x_set_system);
__tuple t0;if(v_empty(0))t0="init_new_image";else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="true";else filltuple(a+1, t1);
err=set_system(t0,t1);
func_end_seterr;

func_begin(x_set_check);
__tuple t0;if(v_empty(0))t0="default";else filltuple(a+0, t0);
err=set_check(t0);
func_end_seterr;

func_begin(x_reset_obj_db);
__tuple t0;if(v_empty(0))t0=128;else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=128;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
err=reset_obj_db(t0,t1,t2);
func_end_seterr;

func_begin(x_get_system);
__tuple t0;if(v_empty(0))t0="init_new_image";else filltuple(a+0, t0);
__tuple t1;
err=get_system(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_get_check);
__tuple t0;
err=get_check(&t0);
fillvar(t0, a+0);
func_end_seterr;

func_begin(x_get_error_text);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=get_error_text(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_count_seconds);
__tuple t0;
err=count_seconds(&t0);
fillvar(t0, a+0);
func_end_seterr;

func_begin(x_count_relation);
__tuple t0;if(v_empty(0))t0="object";else filltuple(a+0, t0);
__tuple t1;
err=count_relation(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_receive_image);
__tuple t1;filltuple(a+1, t1);
err=receive_image(varp_obj(0),t1);
func_end_seterr;

func_begin(x_send_image);
__tuple t1;filltuple(a+1, t1);
err=send_image(a_obj(0),t1);
func_end_seterr;

func_begin(x_receive_region);
__tuple t1;filltuple(a+1, t1);
err=receive_region(varp_obj(0),t1);
func_end_seterr;

func_begin(x_send_region);
__tuple t1;filltuple(a+1, t1);
err=send_region(a_obj(0),t1);
func_end_seterr;

func_begin(x_receive_xld);
__tuple t1;filltuple(a+1, t1);
err=receive_xld(varp_obj(0),t1);
func_end_seterr;

func_begin(x_send_xld);
__tuple t1;filltuple(a+1, t1);
err=send_xld(a_obj(0),t1);
func_end_seterr;

func_begin(x_receive_tuple);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=receive_tuple(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_send_tuple);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=send_tuple(t0,t1);
func_end_seterr;

func_begin(x_receive_data);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="z";else filltuple(a+1, t1);
__tuple t2;
__tuple t3;
err=receive_data(t0,t1,&t2,&t3);
fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_send_data);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="z";else filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
err=send_data(t0,t1,t2,t3);
func_end_seterr;

func_begin(x_get_socket_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=get_socket_param(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_set_socket_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="on";else filltuple(a+2, t2);
err=set_socket_param(t0,t1,t2);
func_end_seterr;

func_begin(x_get_next_socket_data_type);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=get_next_socket_data_type(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_get_socket_descriptor);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=get_socket_descriptor(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_get_socket_timeout);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=get_socket_timeout(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_set_socket_timeout);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="infinite";else filltuple(a+1, t1);
err=set_socket_timeout(t0,t1);
func_end_seterr;

func_begin(x_close_all_sockets);
err=close_all_sockets();
func_end_seterr;

func_begin(x_close_socket);
__tuple t0;filltuple(a+0, t0);
err=close_socket(t0);
func_end_seterr;

func_begin(x_socket_accept_connect);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="auto";else filltuple(a+1, t1);
__tuple t2;
err=socket_accept_connect(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_open_socket_connect);
__tuple t0;if(v_empty(0))t0="localhost";else filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;
err=open_socket_connect(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_open_socket_accept);
__tuple t0;if(v_empty(0))t0=3000;else filltuple(a+0, t0);
__tuple t1;if(!v_empty(1)) filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;
err=open_socket_accept(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_get_extended_error_info);
__tuple t0;
__tuple t1;
__tuple t2;
err=get_extended_error_info(&t0,&t1,&t2);
fillvar(t0, a+0);fillvar(t1, a+1);fillvar(t2, a+2);
func_end_seterr;

func_begin(x_get_modules);
__tuple t0;
__tuple t1;
err=get_modules(&t0,&t1);
fillvar(t0, a+0);fillvar(t1, a+1);
func_end_seterr;

func_begin(x_binocular_distance_ms);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=-30;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=30;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=50;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=50;else filltuple(a+10, t10);
__tuple t11;if(!v_empty(11)) filltuple(a+11, t11);
__tuple t12;if(!v_empty(12)) filltuple(a+12, t12);
err=binocular_distance_ms(a_obj(0),a_obj(1),varp_obj(2),varp_obj(3),t4,t5,t6,t7,t8,t9,t10,t11,t12);
func_end_seterr;

func_begin(x_binocular_disparity_ms);
__tuple t4;if(v_empty(4))t4=-30;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=30;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=50;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=50;else filltuple(a+7, t7);
__tuple t8;if(!v_empty(8)) filltuple(a+8, t8);
__tuple t9;if(!v_empty(9)) filltuple(a+9, t9);
err=binocular_disparity_ms(a_obj(0),a_obj(1),varp_obj(2),varp_obj(3),t4,t5,t6,t7,t8,t9);
func_end_seterr;

func_begin(x_binocular_distance_mg);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=1.0;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=30.0;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=5.0;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=0.0;else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11="false";else filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12="default_parameters";else filltuple(a+12, t12);
__tuple t13;if(v_empty(13))t13="fast_accurate";else filltuple(a+13, t13);
err=binocular_distance_mg(a_obj(0),a_obj(1),varp_obj(2),varp_obj(3),t4,t5,t6,t7,t8,t9,t10,t11,t12,t13);
func_end_seterr;

func_begin(x_binocular_disparity_mg);
__tuple t4;if(v_empty(4))t4=1.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=30.0;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=5.0;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=0.0;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8="false";else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9="default_parameters";else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10="fast_accurate";else filltuple(a+10, t10);
err=binocular_disparity_mg(a_obj(0),a_obj(1),varp_obj(2),varp_obj(3),t4,t5,t6,t7,t8,t9,t10);
func_end_seterr;

func_begin(x_reconst3d_from_fundamental_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(!v_empty(4)) filltuple(a+4, t4);
__tuple t5;if(!v_empty(5)) filltuple(a+5, t5);
__tuple t6;if(!v_empty(6)) filltuple(a+6, t6);
__tuple t7;if(!v_empty(7)) filltuple(a+7, t7);
__tuple t8;if(!v_empty(8)) filltuple(a+8, t8);
__tuple t9;if(!v_empty(9)) filltuple(a+9, t9);
__tuple t10;filltuple(a+10, t10);
__tuple t11;if(!v_empty(11)) filltuple(a+11, t11);
__tuple t12;
__tuple t13;
__tuple t14;
__tuple t15;
__tuple t16;
err=reconst3d_from_fundamental_matrix(t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,&t12,&t13,&t14,&t15,&t16);
fillvar(t12, a+12);fillvar(t13, a+13);fillvar(t14, a+14);fillvar(t15, a+15);fillvar(t16, a+16);
func_end_seterr;

func_begin(x_gen_binocular_proj_rectification);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=512;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=512;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=512;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=512;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=1;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9="no_map";else filltuple(a+9, t9);
__tuple t10;
__tuple t11;
__tuple t12;
err=gen_binocular_proj_rectification(varp_obj(0),varp_obj(1),t2,t3,t4,t5,t6,t7,t8,t9,&t10,&t11,&t12);
fillvar(t10, a+10);fillvar(t11, a+11);fillvar(t12, a+12);
func_end_seterr;

func_begin(x_vector_to_fundamental_matrix_distortion);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(!v_empty(4)) filltuple(a+4, t4);
__tuple t5;if(!v_empty(5)) filltuple(a+5, t5);
__tuple t6;if(!v_empty(6)) filltuple(a+6, t6);
__tuple t7;if(!v_empty(7)) filltuple(a+7, t7);
__tuple t8;if(!v_empty(8)) filltuple(a+8, t8);
__tuple t9;if(!v_empty(9)) filltuple(a+9, t9);
__tuple t10;filltuple(a+10, t10);
__tuple t11;filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12="gold_standard";else filltuple(a+12, t12);
__tuple t13;
__tuple t14;
__tuple t15;
__tuple t16;
__tuple t17;
__tuple t18;
__tuple t19;
err=vector_to_fundamental_matrix_distortion(t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,&t13,&t14,&t15,&t16,&t17,&t18,&t19);
fillvar(t13, a+13);fillvar(t14, a+14);fillvar(t15, a+15);fillvar(t16, a+16);fillvar(t17, a+17);fillvar(t18, a+18);fillvar(t19, a+19);
func_end_seterr;

func_begin(x_rel_pose_to_fundamental_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(!v_empty(1)) filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;
__tuple t5;
err=rel_pose_to_fundamental_matrix(t0,t1,t2,t3,&t4,&t5);
fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_essential_to_fundamental_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(!v_empty(1)) filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;
__tuple t5;
err=essential_to_fundamental_matrix(t0,t1,t2,t3,&t4,&t5);
fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_vector_to_rel_pose);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(!v_empty(4)) filltuple(a+4, t4);
__tuple t5;if(!v_empty(5)) filltuple(a+5, t5);
__tuple t6;if(!v_empty(6)) filltuple(a+6, t6);
__tuple t7;if(!v_empty(7)) filltuple(a+7, t7);
__tuple t8;if(!v_empty(8)) filltuple(a+8, t8);
__tuple t9;if(!v_empty(9)) filltuple(a+9, t9);
__tuple t10;filltuple(a+10, t10);
__tuple t11;filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12="normalized_dlt";else filltuple(a+12, t12);
__tuple t13;
__tuple t14;
__tuple t15;
__tuple t16;
__tuple t17;
__tuple t18;
__tuple t19;
err=vector_to_rel_pose(t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,&t13,&t14,&t15,&t16,&t17,&t18,&t19);
fillvar(t13, a+13);fillvar(t14, a+14);fillvar(t15, a+15);fillvar(t16, a+16);fillvar(t17, a+17);fillvar(t18, a+18);fillvar(t19, a+19);
func_end_seterr;

func_begin(x_vector_to_essential_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(!v_empty(4)) filltuple(a+4, t4);
__tuple t5;if(!v_empty(5)) filltuple(a+5, t5);
__tuple t6;if(!v_empty(6)) filltuple(a+6, t6);
__tuple t7;if(!v_empty(7)) filltuple(a+7, t7);
__tuple t8;if(!v_empty(8)) filltuple(a+8, t8);
__tuple t9;if(!v_empty(9)) filltuple(a+9, t9);
__tuple t10;filltuple(a+10, t10);
__tuple t11;filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12="normalized_dlt";else filltuple(a+12, t12);
__tuple t13;
__tuple t14;
__tuple t15;
__tuple t16;
__tuple t17;
__tuple t18;
__tuple t19;
err=vector_to_essential_matrix(t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,&t13,&t14,&t15,&t16,&t17,&t18,&t19);
fillvar(t13, a+13);fillvar(t14, a+14);fillvar(t15, a+15);fillvar(t16, a+16);fillvar(t17, a+17);fillvar(t18, a+18);fillvar(t19, a+19);
func_end_seterr;

func_begin(x_vector_to_fundamental_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(!v_empty(4)) filltuple(a+4, t4);
__tuple t5;if(!v_empty(5)) filltuple(a+5, t5);
__tuple t6;if(!v_empty(6)) filltuple(a+6, t6);
__tuple t7;if(!v_empty(7)) filltuple(a+7, t7);
__tuple t8;if(!v_empty(8)) filltuple(a+8, t8);
__tuple t9;if(!v_empty(9)) filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10="normalized_dlt";else filltuple(a+10, t10);
__tuple t11;
__tuple t12;
__tuple t13;
__tuple t14;
__tuple t15;
__tuple t16;
__tuple t17;
__tuple t18;
err=vector_to_fundamental_matrix(t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,&t11,&t12,&t13,&t14,&t15,&t16,&t17,&t18);
fillvar(t11, a+11);fillvar(t12, a+12);fillvar(t13, a+13);fillvar(t14, a+14);fillvar(t15, a+15);fillvar(t16, a+16);fillvar(t17, a+17);fillvar(t18, a+18);
func_end_seterr;

func_begin(x_match_fundamental_matrix_distortion_ransac);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="ncc";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=10;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=0;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=0;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=200;else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11=200;else filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12=0.0;else filltuple(a+12, t12);
__tuple t13;if(v_empty(13))t13=0.7;else filltuple(a+13, t13);
__tuple t14;if(v_empty(14))t14="gold_standard";else filltuple(a+14, t14);
__tuple t15;if(v_empty(15))t15=1;else filltuple(a+15, t15);
__tuple t16;if(v_empty(16))t16=0;else filltuple(a+16, t16);
__tuple t17;
__tuple t18;
__tuple t19;
__tuple t20;
__tuple t21;
err=match_fundamental_matrix_distortion_ransac(a_obj(0),a_obj(1),t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,&t17,&t18,&t19,&t20,&t21);
fillvar(t17, a+17);fillvar(t18, a+18);fillvar(t19, a+19);fillvar(t20, a+20);fillvar(t21, a+21);
func_end_seterr;

func_begin(x_match_rel_pose_ransac);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;filltuple(a+6, t6);
__tuple t7;filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8="ssd";else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=10;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=0;else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11=0;else filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12=200;else filltuple(a+12, t12);
__tuple t13;if(v_empty(13))t13=200;else filltuple(a+13, t13);
__tuple t14;if(v_empty(14))t14=0.0;else filltuple(a+14, t14);
__tuple t15;if(v_empty(15))t15=10;else filltuple(a+15, t15);
__tuple t16;if(v_empty(16))t16="normalized_dlt";else filltuple(a+16, t16);
__tuple t17;if(v_empty(17))t17=1;else filltuple(a+17, t17);
__tuple t18;if(v_empty(18))t18=0;else filltuple(a+18, t18);
__tuple t19;
__tuple t20;
__tuple t21;
__tuple t22;
__tuple t23;
err=match_rel_pose_ransac(a_obj(0),a_obj(1),t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,&t19,&t20,&t21,&t22,&t23);
fillvar(t19, a+19);fillvar(t20, a+20);fillvar(t21, a+21);fillvar(t22, a+22);fillvar(t23, a+23);
func_end_seterr;

func_begin(x_match_essential_matrix_ransac);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;filltuple(a+6, t6);
__tuple t7;filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8="ssd";else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=10;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=0;else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11=0;else filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12=200;else filltuple(a+12, t12);
__tuple t13;if(v_empty(13))t13=200;else filltuple(a+13, t13);
__tuple t14;if(v_empty(14))t14=0.0;else filltuple(a+14, t14);
__tuple t15;if(v_empty(15))t15=10;else filltuple(a+15, t15);
__tuple t16;if(v_empty(16))t16="normalized_dlt";else filltuple(a+16, t16);
__tuple t17;if(v_empty(17))t17=1;else filltuple(a+17, t17);
__tuple t18;if(v_empty(18))t18=0;else filltuple(a+18, t18);
__tuple t19;
__tuple t20;
__tuple t21;
__tuple t22;
__tuple t23;
err=match_essential_matrix_ransac(a_obj(0),a_obj(1),t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,&t19,&t20,&t21,&t22,&t23);
fillvar(t19, a+19);fillvar(t20, a+20);fillvar(t21, a+21);fillvar(t22, a+22);fillvar(t23, a+23);
func_end_seterr;

func_begin(x_match_fundamental_matrix_ransac);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="ssd";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=10;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=0;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=0;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=200;else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11=200;else filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12=0.0;else filltuple(a+12, t12);
__tuple t13;if(v_empty(13))t13=10;else filltuple(a+13, t13);
__tuple t14;if(v_empty(14))t14="normalized_dlt";else filltuple(a+14, t14);
__tuple t15;if(v_empty(15))t15=1;else filltuple(a+15, t15);
__tuple t16;if(v_empty(16))t16=0;else filltuple(a+16, t16);
__tuple t17;
__tuple t18;
__tuple t19;
__tuple t20;
__tuple t21;
err=match_fundamental_matrix_ransac(a_obj(0),a_obj(1),t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,&t17,&t18,&t19,&t20,&t21);
fillvar(t17, a+17);fillvar(t18, a+18);fillvar(t19, a+19);fillvar(t20, a+20);fillvar(t21, a+21);
func_end_seterr;

func_begin(x_binocular_distance);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="ncc";else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=11;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=11;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=0.0;else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11=0;else filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12=30;else filltuple(a+12, t12);
__tuple t13;if(v_empty(13))t13=1;else filltuple(a+13, t13);
__tuple t14;if(v_empty(14))t14=0.0;else filltuple(a+14, t14);
__tuple t15;if(v_empty(15))t15="none";else filltuple(a+15, t15);
__tuple t16;if(v_empty(16))t16="none";else filltuple(a+16, t16);
err=binocular_distance(a_obj(0),a_obj(1),varp_obj(2),varp_obj(3),t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16);
func_end_seterr;

func_begin(x_binocular_disparity);
__tuple t4;if(v_empty(4))t4="ncc";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=11;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=11;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=0.0;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=-30;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=30;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=1;else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11=0.5;else filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12="none";else filltuple(a+12, t12);
__tuple t13;if(v_empty(13))t13="none";else filltuple(a+13, t13);
err=binocular_disparity(a_obj(0),a_obj(1),varp_obj(2),varp_obj(3),t4,t5,t6,t7,t8,t9,t10,t11,t12,t13);
func_end_seterr;

func_begin(x_intersect_lines_of_sight);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;filltuple(a+6, t6);
__tuple t7;
__tuple t8;
__tuple t9;
__tuple t10;
err=intersect_lines_of_sight(t0,t1,t2,t3,t4,t5,t6,&t7,&t8,&t9,&t10);
fillvar(t7, a+7);fillvar(t8, a+8);fillvar(t9, a+9);fillvar(t10, a+10);
func_end_seterr;

func_begin(x_disparity_image_to_xyz);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;filltuple(a+6, t6);
err=disparity_image_to_xyz(a_obj(0),varp_obj(1),varp_obj(2),varp_obj(3),t4,t5,t6);
func_end_seterr;

func_begin(x_disparity_to_point_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;
__tuple t7;
__tuple t8;
err=disparity_to_point_3d(t0,t1,t2,t3,t4,t5,&t6,&t7,&t8);
fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);
func_end_seterr;

func_begin(x_disparity_to_distance);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;
err=disparity_to_distance(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_distance_to_disparity);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;
err=distance_to_disparity(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_gen_binocular_rectification_map);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=1.0;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="geometric";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="bilinear";else filltuple(a+7, t7);
__tuple t8;
__tuple t9;
__tuple t10;
__tuple t11;
__tuple t12;
err=gen_binocular_rectification_map(varp_obj(0),varp_obj(1),t2,t3,t4,t5,t6,t7,&t8,&t9,&t10,&t11,&t12);
fillvar(t8, a+8);fillvar(t9, a+9);fillvar(t10, a+10);fillvar(t11, a+11);fillvar(t12, a+12);
func_end_seterr;

func_begin(x_binocular_calibration);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;filltuple(a+6, t6);
__tuple t7;filltuple(a+7, t7);
__tuple t8;filltuple(a+8, t8);
__tuple t9;filltuple(a+9, t9);
__tuple t10;filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11="all";else filltuple(a+11, t11);
__tuple t12;
__tuple t13;
__tuple t14;
__tuple t15;
__tuple t16;
__tuple t17;
err=binocular_calibration(t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,&t12,&t13,&t14,&t15,&t16,&t17);
fillvar(t12, a+12);fillvar(t13, a+13);fillvar(t14, a+14);fillvar(t15, a+15);fillvar(t16, a+16);fillvar(t17, a+17);
func_end_seterr;

func_begin(x_query_spy);
__tuple t0;
__tuple t1;
err=query_spy(&t0,&t1);
fillvar(t0, a+0);fillvar(t1, a+1);
func_end_seterr;

func_begin(x_set_spy);
__tuple t0;if(v_empty(0))t0="mode";else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="on";else filltuple(a+1, t1);
err=set_spy(t0,t1);
func_end_seterr;

func_begin(x_get_spy);
__tuple t0;if(v_empty(0))t0="mode";else filltuple(a+0, t0);
__tuple t1;
err=get_spy(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_read_sheet_of_light_model);
__tuple t0;if(v_empty(0))t0="sheet_of_light_model.solm";else filltuple(a+0, t0);
__tuple t1;
err=read_sheet_of_light_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_sheet_of_light_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="sheet_of_light_model.solm";else filltuple(a+1, t1);
err=write_sheet_of_light_model(t0,t1);
func_end_seterr;

func_begin(x_deserialize_sheet_of_light_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_sheet_of_light_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_serialize_sheet_of_light_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_sheet_of_light_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_create_sheet_of_light_calib_object);
__tuple t0;if(v_empty(0))t0=0.1;else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0.15;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0.005;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.04;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="calib_object.dxf";else filltuple(a+4, t4);
err=create_sheet_of_light_calib_object(t0,t1,t2,t3,t4);
func_end_seterr;

func_begin(x_calibrate_sheet_of_light);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=calibrate_sheet_of_light(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_get_sheet_of_light_result_object_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=get_sheet_of_light_result_object_model_3d(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_get_sheet_of_light_result);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="disparity";else filltuple(a+2, t2);
err=get_sheet_of_light_result(varp_obj(0),t1,t2);
func_end_seterr;

func_begin(x_apply_sheet_of_light_calibration);
__tuple t1;filltuple(a+1, t1);
err=apply_sheet_of_light_calibration(a_obj(0),t1);
func_end_seterr;

func_begin(x_set_profile_sheet_of_light);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
err=set_profile_sheet_of_light(a_obj(0),t1,t2);
func_end_seterr;

func_begin(x_measure_profile_sheet_of_light);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
err=measure_profile_sheet_of_light(a_obj(0),t1,t2);
func_end_seterr;

func_begin(x_set_sheet_of_light_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="method";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="center_of_gravity";else filltuple(a+2, t2);
err=set_sheet_of_light_param(t0,t1,t2);
func_end_seterr;

func_begin(x_get_sheet_of_light_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="method";else filltuple(a+1, t1);
__tuple t2;
err=get_sheet_of_light_param(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_query_sheet_of_light_params);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="create_model_params";else filltuple(a+1, t1);
__tuple t2;
err=query_sheet_of_light_params(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_reset_sheet_of_light_model);
__tuple t0;filltuple(a+0, t0);
err=reset_sheet_of_light_model(t0);
func_end_seterr;

func_begin(x_clear_all_sheet_of_light_models);
err=clear_all_sheet_of_light_models();
func_end_seterr;

func_begin(x_clear_sheet_of_light_model);
__tuple t0;filltuple(a+0, t0);
err=clear_sheet_of_light_model(t0);
func_end_seterr;

func_begin(x_create_sheet_of_light_model);
__tuple t1;if(v_empty(1))t1="min_gray";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=50;else filltuple(a+2, t2);
__tuple t3;
err=create_sheet_of_light_model(a_obj(0),t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_shade_height_field);
__tuple t2;if(v_empty(2))t2=0.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=1.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=0.0;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="false";else filltuple(a+6, t6);
err=shade_height_field(a_obj(0),varp_obj(1),t2,t3,t4,t5,t6);
func_end_seterr;

func_begin(x_estimate_al_am);
__tuple t1;
__tuple t2;
err=estimate_al_am(a_obj(0),&t1,&t2);
fillvar(t1, a+1);fillvar(t2, a+2);
func_end_seterr;

func_begin(x_estimate_sl_al_zc);
__tuple t1;
__tuple t2;
err=estimate_sl_al_zc(a_obj(0),&t1,&t2);
fillvar(t1, a+1);fillvar(t2, a+2);
func_end_seterr;

func_begin(x_estimate_sl_al_lr);
__tuple t1;
__tuple t2;
err=estimate_sl_al_lr(a_obj(0),&t1,&t2);
fillvar(t1, a+1);fillvar(t2, a+2);
func_end_seterr;

func_begin(x_estimate_tilt_zc);
__tuple t1;
err=estimate_tilt_zc(a_obj(0),&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_estimate_tilt_lr);
__tuple t1;
err=estimate_tilt_lr(a_obj(0),&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_phot_stereo);
__tuple t2;if(v_empty(2))t2=45.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=45.0;else filltuple(a+3, t3);
err=phot_stereo(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_reconstruct_height_field_from_gradient);
__tuple t2;if(v_empty(2))t2="poisson";else filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;if(!v_empty(4)) filltuple(a+4, t4);
err=reconstruct_height_field_from_gradient(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_photometric_stereo);
__tuple t4;if(v_empty(4))t4=45.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=45.0;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="all";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="poisson";else filltuple(a+7, t7);
__tuple t8;if(!v_empty(8)) filltuple(a+8, t8);
__tuple t9;if(!v_empty(9)) filltuple(a+9, t9);
err=photometric_stereo(a_obj(0),varp_obj(1),varp_obj(2),varp_obj(3),t4,t5,t6,t7,t8,t9);
func_end_seterr;

func_begin(x_sfs_pentland);
__tuple t2;if(v_empty(2))t2=45.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=45.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=1.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=0.0;else filltuple(a+5, t5);
err=sfs_pentland(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_sfs_orig_lr);
__tuple t2;if(v_empty(2))t2=45.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=45.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=1.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=0.0;else filltuple(a+5, t5);
err=sfs_orig_lr(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_sfs_mod_lr);
__tuple t2;if(v_empty(2))t2=45.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=45.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=1.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=0.0;else filltuple(a+5, t5);
err=sfs_mod_lr(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_receive_serialized_item);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=receive_serialized_item(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_send_serialized_item);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=send_serialized_item(t0,t1);
func_end_seterr;

func_begin(x_fwrite_serialized_item);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=fwrite_serialized_item(t0,t1);
func_end_seterr;

func_begin(x_fread_serialized_item);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=fread_serialized_item(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_clear_all_serialized_items);
err=clear_all_serialized_items();
func_end_seterr;

func_begin(x_clear_serialized_item);
__tuple t0;filltuple(a+0, t0);
err=clear_serialized_item(t0);
func_end_seterr;

func_begin(x_get_serialized_item_ptr);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
err=get_serialized_item_ptr(t0,&t1,&t2);
fillvar(t1, a+1);fillvar(t2, a+2);
func_end_seterr;

func_begin(x_create_serialized_item_ptr);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="true";else filltuple(a+2, t2);
__tuple t3;
err=create_serialized_item_ptr(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_fit_primitives_object_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;
err=fit_primitives_object_model_3d(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_segment_object_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;
err=segment_object_model_3d(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_clear_all_text_results);
err=clear_all_text_results();
func_end_seterr;

func_begin(x_clear_text_result);
__tuple t0;filltuple(a+0, t0);
err=clear_text_result(t0);
func_end_seterr;

func_begin(x_get_text_object);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="all_lines";else filltuple(a+2, t2);
err=get_text_object(varp_obj(0),t1,t2);
func_end_seterr;

func_begin(x_get_text_result);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="class";else filltuple(a+1, t1);
__tuple t2;
err=get_text_result(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_find_text);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=find_text(a_obj(0),t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_get_text_model_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="min_contrast";else filltuple(a+1, t1);
__tuple t2;
err=get_text_model_param(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_set_text_model_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="min_contrast";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=10;else filltuple(a+2, t2);
err=set_text_model_param(t0,t1,t2);
func_end_seterr;

func_begin(x_clear_all_text_models);
err=clear_all_text_models();
func_end_seterr;

func_begin(x_clear_text_model);
__tuple t0;filltuple(a+0, t0);
err=clear_text_model(t0);
func_end_seterr;

func_begin(x_create_text_model_reader);
__tuple t0;if(v_empty(0))t0="auto";else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="Industrial_Rej.omc";else filltuple(a+1, t1);
__tuple t2;
err=create_text_model_reader(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_create_text_model);
__tuple t0;
err=create_text_model(&t0);
fillvar(t0, a+0);
func_end_seterr;

func_begin(x_select_characters);
__tuple t2;if(v_empty(2))t2="false";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="medium";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=25;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=25;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="false";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="false";else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8="none";else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9="false";else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10="medium";else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11="false";else filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12=0;else filltuple(a+12, t12);
__tuple t13;if(v_empty(13))t13="completion";else filltuple(a+13, t13);
err=select_characters(a_obj(0),varp_obj(1),t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13);
func_end_seterr;

func_begin(x_segment_characters);
__tuple t4;if(v_empty(4))t4="local_auto_shape";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="false";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="false";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="medium";else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=25;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=25;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=0;else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11=10;else filltuple(a+11, t11);
__tuple t12;
err=segment_characters(a_obj(0),a_obj(1),varp_obj(2),varp_obj(3),t4,t5,t6,t7,t8,t9,t10,t11,&t12);
fillvar(t12, a+12);
func_end_seterr;

func_begin(x_text_line_slant);
__tuple t2;if(v_empty(2))t2=25;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=-0.523599;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.523599;else filltuple(a+4, t4);
__tuple t5;
err=text_line_slant(a_obj(0),a_obj(1),t2,t3,t4,&t5);
fillvar(t5, a+5);
func_end_seterr;

func_begin(x_text_line_orientation);
__tuple t2;if(v_empty(2))t2=25;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=-0.523599;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.523599;else filltuple(a+4, t4);
__tuple t5;
err=text_line_orientation(a_obj(0),a_obj(1),t2,t3,t4,&t5);
fillvar(t5, a+5);
func_end_seterr;

func_begin(x_classify_image_class_lut);
__tuple t2;filltuple(a+2, t2);
err=classify_image_class_lut(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_classify_image_class_knn);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.5;else filltuple(a+4, t4);
err=classify_image_class_knn(a_obj(0),varp_obj(1),varp_obj(2),t3,t4);
func_end_seterr;

func_begin(x_add_samples_image_class_knn);
__tuple t2;filltuple(a+2, t2);
err=add_samples_image_class_knn(a_obj(0),a_obj(1),t2);
func_end_seterr;

func_begin(x_classify_image_class_gmm);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.5;else filltuple(a+3, t3);
err=classify_image_class_gmm(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_add_samples_image_class_gmm);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.0;else filltuple(a+3, t3);
err=add_samples_image_class_gmm(a_obj(0),a_obj(1),t2,t3);
func_end_seterr;

func_begin(x_classify_image_class_svm);
__tuple t2;filltuple(a+2, t2);
err=classify_image_class_svm(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_add_samples_image_class_svm);
__tuple t2;filltuple(a+2, t2);
err=add_samples_image_class_svm(a_obj(0),a_obj(1),t2);
func_end_seterr;

func_begin(x_classify_image_class_mlp);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.5;else filltuple(a+3, t3);
err=classify_image_class_mlp(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_add_samples_image_class_mlp);
__tuple t2;filltuple(a+2, t2);
err=add_samples_image_class_mlp(a_obj(0),a_obj(1),t2);
func_end_seterr;

func_begin(x_learn_ndim_norm);
__tuple t3;if(v_empty(3))t3="euclid";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=10.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=0.01;else filltuple(a+5, t5);
__tuple t6;
__tuple t7;
__tuple t8;
err=learn_ndim_norm(a_obj(0),a_obj(1),a_obj(2),t3,t4,t5,&t6,&t7,&t8);
fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);
func_end_seterr;

func_begin(x_learn_ndim_box);
__tuple t3;filltuple(a+3, t3);
err=learn_ndim_box(a_obj(0),a_obj(1),a_obj(2),t3);
func_end_seterr;

func_begin(x_class_ndim_box);
__tuple t2;filltuple(a+2, t2);
err=class_ndim_box(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_class_ndim_norm);
__tuple t2;if(v_empty(2))t2="euclid";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="single";else filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
err=class_ndim_norm(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_class_2dim_sup);
err=class_2dim_sup(a_obj(0),a_obj(1),a_obj(2),varp_obj(3));
func_end_seterr;

func_begin(x_class_2dim_unsup);
__tuple t3;if(v_empty(3))t3=15;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=5;else filltuple(a+4, t4);
err=class_2dim_unsup(a_obj(0),a_obj(1),varp_obj(2),t3,t4);
func_end_seterr;

func_begin(x_check_difference);
__tuple t3;if(v_empty(3))t3="diff_outside";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=-5;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=5;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=0;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=0;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=0;else filltuple(a+8, t8);
err=check_difference(a_obj(0),a_obj(1),varp_obj(2),t3,t4,t5,t6,t7,t8);
func_end_seterr;

func_begin(x_char_threshold);
__tuple t3;if(v_empty(3))t3=2.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=95;else filltuple(a+4, t4);
__tuple t5;
err=char_threshold(a_obj(0),a_obj(1),varp_obj(2),t3,t4,&t5);
fillvar(t5, a+5);
func_end_seterr;

func_begin(x_label_to_region);
err=label_to_region(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_nonmax_suppression_amp);
__tuple t2;if(v_empty(2))t2="hvnms";else filltuple(a+2, t2);
err=nonmax_suppression_amp(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_nonmax_suppression_dir);
__tuple t3;if(v_empty(3))t3="nms";else filltuple(a+3, t3);
err=nonmax_suppression_dir(a_obj(0),a_obj(1),varp_obj(2),t3);
func_end_seterr;

func_begin(x_hysteresis_threshold);
__tuple t2;if(v_empty(2))t2=30;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=60;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=10;else filltuple(a+4, t4);
err=hysteresis_threshold(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_binary_threshold);
__tuple t2;if(v_empty(2))t2="max_separability";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="dark";else filltuple(a+3, t3);
__tuple t4;
err=binary_threshold(a_obj(0),varp_obj(1),t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_local_threshold);
__tuple t2;if(v_empty(2))t2="adapted_std_deviation";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="dark";else filltuple(a+3, t3);
__tuple t4;if(!v_empty(4)) filltuple(a+4, t4);
__tuple t5;if(!v_empty(5)) filltuple(a+5, t5);
err=local_threshold(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_var_threshold);
__tuple t2;if(v_empty(2))t2=15;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=15;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.2;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=2;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="dark";else filltuple(a+6, t6);
err=var_threshold(a_obj(0),varp_obj(1),t2,t3,t4,t5,t6);
func_end_seterr;

func_begin(x_dyn_threshold);
__tuple t3;if(v_empty(3))t3=5.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="light";else filltuple(a+4, t4);
err=dyn_threshold(a_obj(0),a_obj(1),varp_obj(2),t3,t4);
func_end_seterr;

func_begin(x_threshold);
__tuple t2;if(v_empty(2))t2=128.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=255.0;else filltuple(a+3, t3);
err=threshold(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_threshold_sub_pix);
__tuple t2;if(v_empty(2))t2=128;else filltuple(a+2, t2);
err=threshold_sub_pix(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_regiongrowing_n);
__tuple t2;if(v_empty(2))t2="2-norm";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=20.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=30;else filltuple(a+5, t5);
err=regiongrowing_n(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_regiongrowing);
__tuple t2;if(v_empty(2))t2=3;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=3;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=6.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=100;else filltuple(a+5, t5);
err=regiongrowing(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_regiongrowing_mean);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=5.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=100;else filltuple(a+5, t5);
err=regiongrowing_mean(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_pouring);
__tuple t2;if(v_empty(2))t2="all";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=255;else filltuple(a+4, t4);
err=pouring(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_watersheds_threshold);
__tuple t2;if(v_empty(2))t2=10;else filltuple(a+2, t2);
err=watersheds_threshold(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_watersheds);
err=watersheds(a_obj(0),varp_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_zero_crossing);
err=zero_crossing(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_zero_crossing_sub_pix);
err=zero_crossing_sub_pix(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_dual_threshold);
__tuple t2;if(v_empty(2))t2=20;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=5.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=2.0;else filltuple(a+4, t4);
err=dual_threshold(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_expand_line);
__tuple t2;if(v_empty(2))t2=256;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="gradient";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="row";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=3.0;else filltuple(a+5, t5);
err=expand_line(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_local_min);
err=local_min(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_lowlands);
err=lowlands(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_lowlands_center);
err=lowlands_center(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_local_max);
err=local_max(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_plateaus);
err=plateaus(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_plateaus_center);
err=plateaus_center(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_histo_to_thresh);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=2.0;else filltuple(a+1, t1);
__tuple t2;
__tuple t3;
err=histo_to_thresh(t0,t1,&t2,&t3);
fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_auto_threshold);
__tuple t2;if(v_empty(2))t2=2.0;else filltuple(a+2, t2);
err=auto_threshold(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_bin_threshold);
err=bin_threshold(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_fast_threshold);
__tuple t2;if(v_empty(2))t2=128;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=255.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=20;else filltuple(a+4, t4);
err=fast_threshold(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_polar_trans_region_inv);
__tuple t2;if(v_empty(2))t2=256;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=256;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=6.2831853;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=0;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=100;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=512;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=512;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=512;else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11=512;else filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12="nearest_neighbor";else filltuple(a+12, t12);
err=polar_trans_region_inv(a_obj(0),varp_obj(1),t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12);
func_end_seterr;

func_begin(x_polar_trans_region);
__tuple t2;if(v_empty(2))t2=256;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=256;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=6.2831853;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=0;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=100;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=512;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=512;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10="nearest_neighbor";else filltuple(a+10, t10);
err=polar_trans_region(a_obj(0),varp_obj(1),t2,t3,t4,t5,t6,t7,t8,t9,t10);
func_end_seterr;

func_begin(x_merge_regions_line_scan);
__tuple t4;if(v_empty(4))t4=512;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="top";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=3;else filltuple(a+6, t6);
err=merge_regions_line_scan(a_obj(0),a_obj(1),varp_obj(2),varp_obj(3),t4,t5,t6);
func_end_seterr;

func_begin(x_partition_rectangle);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
err=partition_rectangle(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_partition_dynamic);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=20;else filltuple(a+3, t3);
err=partition_dynamic(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_region_to_label);
__tuple t2;if(v_empty(2))t2="int2";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=512;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=512;else filltuple(a+4, t4);
err=region_to_label(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_region_to_bin);
__tuple t2;if(v_empty(2))t2=255;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=512;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=512;else filltuple(a+5, t5);
err=region_to_bin(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_union2);
err=union2(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_union1);
err=union1(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_closest_point_transform);
__tuple t3;if(v_empty(3))t3="city-block";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="true";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="absolute";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=640;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=480;else filltuple(a+7, t7);
err=closest_point_transform(a_obj(0),varp_obj(1),varp_obj(2),t3,t4,t5,t6,t7);
func_end_seterr;

func_begin(x_distance_transform);
__tuple t2;if(v_empty(2))t2="city-block";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="true";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=640;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=480;else filltuple(a+5, t5);
err=distance_transform(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_skeleton);
err=skeleton(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_projective_trans_region);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="bilinear";else filltuple(a+3, t3);
err=projective_trans_region(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_affine_trans_region);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="nearest_neighbor";else filltuple(a+3, t3);
err=affine_trans_region(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_mirror_region);
__tuple t2;if(v_empty(2))t2="row";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=512;else filltuple(a+3, t3);
err=mirror_region(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_zoom_region);
__tuple t2;if(v_empty(2))t2=2.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=2.0;else filltuple(a+3, t3);
err=zoom_region(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_move_region);
__tuple t2;if(v_empty(2))t2=30;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=30;else filltuple(a+3, t3);
err=move_region(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_junctions_skeleton);
err=junctions_skeleton(a_obj(0),varp_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_intersection);
err=intersection(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_interjacent);
__tuple t2;if(v_empty(2))t2="mixed";else filltuple(a+2, t2);
err=interjacent(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_fill_up);
err=fill_up(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_fill_up_shape);
__tuple t2;if(v_empty(2))t2="area";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=100.0;else filltuple(a+4, t4);
err=fill_up_shape(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_expand_region);
__tuple t3;if(v_empty(3))t3="maximal";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="image";else filltuple(a+4, t4);
err=expand_region(a_obj(0),a_obj(1),varp_obj(2),t3,t4);
func_end_seterr;

func_begin(x_clip_region_rel);
__tuple t2;if(v_empty(2))t2=1;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=1;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=1;else filltuple(a+5, t5);
err=clip_region_rel(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_clip_region);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=256;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=256;else filltuple(a+5, t5);
err=clip_region(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_rank_region);
__tuple t2;if(v_empty(2))t2=15;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=15;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=70;else filltuple(a+4, t4);
err=rank_region(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_connection);
err=connection(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_symm_difference);
err=symm_difference(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_difference);
err=difference(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_complement);
err=complement(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_background_seg);
err=background_seg(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_hamming_change_region);
__tuple t2;if(v_empty(2))t2=100;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=100;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=1000;else filltuple(a+4, t4);
err=hamming_change_region(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_remove_noise_region);
__tuple t2;if(v_empty(2))t2="n_4";else filltuple(a+2, t2);
err=remove_noise_region(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_shape_trans);
__tuple t2;if(v_empty(2))t2="convex";else filltuple(a+2, t2);
err=shape_trans(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_expand_gray);
__tuple t4;if(v_empty(4))t4="maximal";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="image";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=32;else filltuple(a+6, t6);
err=expand_gray(a_obj(0),a_obj(1),a_obj(2),varp_obj(3),t4,t5,t6);
func_end_seterr;

func_begin(x_expand_gray_ref);
__tuple t4;if(v_empty(4))t4="maximal";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="image";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=128;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=32;else filltuple(a+7, t7);
err=expand_gray_ref(a_obj(0),a_obj(1),a_obj(2),varp_obj(3),t4,t5,t6,t7);
func_end_seterr;

func_begin(x_split_skeleton_lines);
__tuple t1;if(v_empty(1))t1=3;else filltuple(a+1, t1);
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
err=split_skeleton_lines(a_obj(0),t1,&t2,&t3,&t4,&t5);
fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_split_skeleton_region);
__tuple t2;if(v_empty(2))t2=3;else filltuple(a+2, t2);
err=split_skeleton_region(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_gen_region_histo);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=255;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=255;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=1;else filltuple(a+4, t4);
err=gen_region_histo(varp_obj(0),t1,t2,t3,t4);
func_end_seterr;

func_begin(x_eliminate_runs);
__tuple t2;if(v_empty(2))t2=3;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1000;else filltuple(a+3, t3);
err=eliminate_runs(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_surface_normals_object_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="mls";else filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;
err=surface_normals_object_model_3d(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_smooth_object_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="mls";else filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;
err=smooth_object_model_3d(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_triangulate_object_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="greedy";else filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;
__tuple t5;
err=triangulate_object_model_3d(t0,t1,t2,t3,&t4,&t5);
fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_clear_all_stereo_models);
err=clear_all_stereo_models();
func_end_seterr;

func_begin(x_clear_stereo_model);
__tuple t0;filltuple(a+0, t0);
err=clear_stereo_model(t0);
func_end_seterr;

func_begin(x_reconstruct_points_stereo);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;
__tuple t7;
__tuple t8;
__tuple t9;
__tuple t10;
err=reconstruct_points_stereo(t0,t1,t2,t3,t4,t5,&t6,&t7,&t8,&t9,&t10);
fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);fillvar(t9, a+9);fillvar(t10, a+10);
func_end_seterr;

func_begin(x_reconstruct_surface_stereo);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=reconstruct_surface_stereo(a_obj(0),t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_get_stereo_model_object);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
err=get_stereo_model_object(varp_obj(0),t1,t2,t3);
func_end_seterr;

func_begin(x_get_stereo_model_image_pairs);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
err=get_stereo_model_image_pairs(t0,&t1,&t2);
fillvar(t1, a+1);fillvar(t2, a+2);
func_end_seterr;

func_begin(x_set_stereo_model_image_pairs);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
err=set_stereo_model_image_pairs(t0,t1,t2);
func_end_seterr;

func_begin(x_get_stereo_model_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=get_stereo_model_param(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_set_stereo_model_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
err=set_stereo_model_param(t0,t1,t2);
func_end_seterr;

func_begin(x_create_stereo_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="surface_pairwise";else filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;
err=create_stereo_model(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_get_message_queue_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="max_message_num";else filltuple(a+1, t1);
__tuple t2;
err=get_message_queue_param(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_set_message_queue_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="max_message_num";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="1";else filltuple(a+2, t2);
err=set_message_queue_param(t0,t1,t2);
func_end_seterr;

func_begin(x_dequeue_message);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="timeout";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="infinite";else filltuple(a+2, t2);
__tuple t3;
err=dequeue_message(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_enqueue_message);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
err=enqueue_message(t0,t1,t2,t3);
func_end_seterr;

func_begin(x_clear_message_queue);
__tuple t0;filltuple(a+0, t0);
err=clear_message_queue(t0);
func_end_seterr;

func_begin(x_create_message_queue);
__tuple t0;
err=create_message_queue(&t0);
fillvar(t0, a+0);
func_end_seterr;

func_begin(x_get_message_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="message_keys";else filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;
err=get_message_param(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_set_message_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="remove_key";else filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
err=set_message_param(t0,t1,t2,t3);
func_end_seterr;

func_begin(x_get_message_obj);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
err=get_message_obj(varp_obj(0),t1,t2);
func_end_seterr;

func_begin(x_set_message_obj);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
err=set_message_obj(a_obj(0),t1,t2);
func_end_seterr;

func_begin(x_get_message_tuple);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=get_message_tuple(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_set_message_tuple);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
err=set_message_tuple(t0,t1,t2);
func_end_seterr;

func_begin(x_clear_message);
__tuple t0;filltuple(a+0, t0);
err=clear_message(t0);
func_end_seterr;

func_begin(x_create_message);
__tuple t0;
err=create_message(&t0);
fillvar(t0, a+0);
func_end_seterr;

func_begin(x_clear_all_conditions);
err=clear_all_conditions();
func_end_seterr;

func_begin(x_clear_condition);
__tuple t0;filltuple(a+0, t0);
err=clear_condition(t0);
func_end_seterr;

func_begin(x_broadcast_condition);
__tuple t0;filltuple(a+0, t0);
err=broadcast_condition(t0);
func_end_seterr;

func_begin(x_signal_condition);
__tuple t0;filltuple(a+0, t0);
err=signal_condition(t0);
func_end_seterr;

func_begin(x_timed_wait_condition);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
err=timed_wait_condition(t0,t1,t2);
func_end_seterr;

func_begin(x_wait_condition);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=wait_condition(t0,t1);
func_end_seterr;

func_begin(x_create_condition);
__tuple t0;if(v_empty(0))t0="";else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="";else filltuple(a+1, t1);
__tuple t2;
err=create_condition(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_clear_all_barriers);
err=clear_all_barriers();
func_end_seterr;

func_begin(x_clear_barrier);
__tuple t0;filltuple(a+0, t0);
err=clear_barrier(t0);
func_end_seterr;

func_begin(x_wait_barrier);
__tuple t0;filltuple(a+0, t0);
err=wait_barrier(t0);
func_end_seterr;

func_begin(x_create_barrier);
__tuple t0;if(v_empty(0))t0="";else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=1;else filltuple(a+2, t2);
__tuple t3;
err=create_barrier(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_clear_all_events);
err=clear_all_events();
func_end_seterr;

func_begin(x_clear_event);
__tuple t0;filltuple(a+0, t0);
err=clear_event(t0);
func_end_seterr;

func_begin(x_signal_event);
__tuple t0;filltuple(a+0, t0);
err=signal_event(t0);
func_end_seterr;

func_begin(x_try_wait_event);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=try_wait_event(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_wait_event);
__tuple t0;filltuple(a+0, t0);
err=wait_event(t0);
func_end_seterr;

func_begin(x_create_event);
__tuple t0;if(v_empty(0))t0="";else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="";else filltuple(a+1, t1);
__tuple t2;
err=create_event(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_clear_all_mutexes);
err=clear_all_mutexes();
func_end_seterr;

func_begin(x_clear_mutex);
__tuple t0;filltuple(a+0, t0);
err=clear_mutex(t0);
func_end_seterr;

func_begin(x_unlock_mutex);
__tuple t0;filltuple(a+0, t0);
err=unlock_mutex(t0);
func_end_seterr;

func_begin(x_try_lock_mutex);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=try_lock_mutex(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_lock_mutex);
__tuple t0;filltuple(a+0, t0);
err=lock_mutex(t0);
func_end_seterr;

func_begin(x_create_mutex);
__tuple t0;if(v_empty(0))t0="";else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="";else filltuple(a+1, t1);
__tuple t2;
err=create_mutex(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_get_threading_attrib);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
err=get_threading_attrib(t0,&t1,&t2,&t3);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_load_par_knowledge);
__tuple t0;if(v_empty(0))t0="";else filltuple(a+0, t0);
err=load_par_knowledge(t0);
func_end_seterr;

func_begin(x_store_par_knowledge);
__tuple t0;if(v_empty(0))t0="";else filltuple(a+0, t0);
err=store_par_knowledge(t0);
func_end_seterr;

func_begin(x_check_par_hw_potential);
__tuple t0;if(v_empty(0))t0=0;else filltuple(a+0, t0);
err=check_par_hw_potential(t0);
func_end_seterr;

func_begin(x_set_aop_info);
__tuple t0;if(v_empty(0))t0="";else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="max_threads";else filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
err=set_aop_info(t0,t1,t2,t3,t4);
func_end_seterr;

func_begin(x_get_aop_info);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1)){const char* vs1[]={"iconic_type","parameter:0"};arr2tupleS(vs1, 2, t1);}else filltuple(a+1, t1);
__tuple t2;if(v_empty(2)){const char* vs2[]={"byte",""};arr2tupleS(vs2, 2, t2);}else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="max_threads";else filltuple(a+3, t3);
__tuple t4;
err=get_aop_info(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_query_aop_info);
__tuple t0;if(v_empty(0))t0="";else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="";else filltuple(a+2, t2);
__tuple t3;
__tuple t4;
err=query_aop_info(t0,t1,t2,&t3,&t4);
fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_optimize_aop);
__tuple t0;if(v_empty(0))t0="";else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="none";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="none";else filltuple(a+4, t4);
err=optimize_aop(t0,t1,t2,t3,t4);
func_end_seterr;

func_begin(x_write_aop_knowledge);
__tuple t0;if(v_empty(0))t0="";else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="none";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="none";else filltuple(a+2, t2);
err=write_aop_knowledge(t0,t1,t2);
func_end_seterr;

func_begin(x_read_aop_knowledge);
__tuple t0;if(v_empty(0))t0="";else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="none";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="none";else filltuple(a+2, t2);
__tuple t3;
__tuple t4;
err=read_aop_knowledge(t0,t1,t2,&t3,&t4);
fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_sensor_kalman);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=sensor_kalman(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_test_obj_def);
__tuple t1;
err=test_obj_def(a_obj(0),&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_test_access);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
err=test_access(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_obj_diff);
err=obj_diff(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_set_grayval);
__tuple t1;if(v_empty(1))t1=0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=255.0;else filltuple(a+3, t3);
err=set_grayval(a_obj(0),t1,t2,t3);
func_end_seterr;

func_begin(x_paint_xld);
__tuple t3;if(v_empty(3))t3=255.0;else filltuple(a+3, t3);
err=paint_xld(a_obj(0),a_obj(1),varp_obj(2),t3);
func_end_seterr;

func_begin(x_paint_region);
__tuple t3;if(v_empty(3))t3=255.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="fill";else filltuple(a+4, t4);
err=paint_region(a_obj(0),a_obj(1),varp_obj(2),t3,t4);
func_end_seterr;

func_begin(x_overpaint_region);
__tuple t2;if(v_empty(2))t2=255.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="fill";else filltuple(a+3, t3);
err=overpaint_region(a_obj(0),a_obj(1),t2,t3);
func_end_seterr;

func_begin(x_gen_image_proto);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
err=gen_image_proto(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_paint_gray);
err=paint_gray(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_overpaint_gray);
err=overpaint_gray(a_obj(0),a_obj(1));
func_end_seterr;

func_begin(x_integer_to_obj);
__tuple t1;filltuple(a+1, t1);
err=integer_to_obj(varp_obj(0),t1);
func_end_seterr;

func_begin(x_obj_to_integer);
__tuple t1;if(v_empty(1))t1=1;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=-1;else filltuple(a+2, t2);
__tuple t3;
err=obj_to_integer(a_obj(0),t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_copy_obj);
__tuple t2;if(v_empty(2))t2=1;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1;else filltuple(a+3, t3);
err=copy_obj(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_concat_obj);
err=concat_obj(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_clear_obj);
err=clear_obj(a_obj(0));
func_end_seterr;

func_begin(x_copy_image);
err=copy_image(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_select_obj);
__tuple t2;if(v_empty(2))t2=1;else filltuple(a+2, t2);
err=select_obj(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_compare_obj);
__tuple t2;if(v_empty(2))t2=0.0;else filltuple(a+2, t2);
__tuple t3;
err=compare_obj(a_obj(0),a_obj(1),t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_test_subset_region);
__tuple t2;
err=test_subset_region(a_obj(0),a_obj(1),&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_test_equal_region);
__tuple t2;
err=test_equal_region(a_obj(0),a_obj(1),&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_test_equal_obj);
__tuple t2;
err=test_equal_obj(a_obj(0),a_obj(1),&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_count_obj);
__tuple t1;
err=count_obj(a_obj(0),&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_get_channel_info);
__tuple t1;if(v_empty(1))t1="creator";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;
err=get_channel_info(a_obj(0),t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_get_obj_class);
__tuple t1;
err=get_obj_class(a_obj(0),&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_gen_image_interleaved);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="rgb";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=512;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=512;else filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="byte";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=0;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=0;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=0;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=0;else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11=-1;else filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12=0;else filltuple(a+12, t12);
err=gen_image_interleaved(varp_obj(0),t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12);
func_end_seterr;

func_begin(x_gen_region_polygon_xld);
__tuple t2;if(v_empty(2))t2="filled";else filltuple(a+2, t2);
err=gen_region_polygon_xld(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_gen_region_contour_xld);
__tuple t2;if(v_empty(2))t2="filled";else filltuple(a+2, t2);
err=gen_region_contour_xld(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_gen_region_polygon_filled);
__tuple t1;if(v_empty(1))t1=100;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=100;else filltuple(a+2, t2);
err=gen_region_polygon_filled(varp_obj(0),t1,t2);
func_end_seterr;

func_begin(x_gen_region_polygon);
__tuple t1;if(v_empty(1))t1=100;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=100;else filltuple(a+2, t2);
err=gen_region_polygon(varp_obj(0),t1,t2);
func_end_seterr;

func_begin(x_gen_region_points);
__tuple t1;if(v_empty(1))t1=100;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=100;else filltuple(a+2, t2);
err=gen_region_points(varp_obj(0),t1,t2);
func_end_seterr;

func_begin(x_gen_region_runs);
__tuple t1;if(v_empty(1))t1=100;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=50;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=200;else filltuple(a+3, t3);
err=gen_region_runs(varp_obj(0),t1,t2,t3);
func_end_seterr;

func_begin(x_gen_rectangle2);
__tuple t1;if(v_empty(1))t1=300.0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=200.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=100.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=20.0;else filltuple(a+5, t5);
err=gen_rectangle2(varp_obj(0),t1,t2,t3,t4,t5);
func_end_seterr;

func_begin(x_gen_rectangle1);
__tuple t1;if(v_empty(1))t1=30.0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=20.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=100.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=200.0;else filltuple(a+4, t4);
err=gen_rectangle1(varp_obj(0),t1,t2,t3,t4);
func_end_seterr;

func_begin(x_gen_random_region);
__tuple t1;if(v_empty(1))t1=128;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=128;else filltuple(a+2, t2);
err=gen_random_region(varp_obj(0),t1,t2);
func_end_seterr;

func_begin(x_gen_image3);
__tuple t1;if(v_empty(1))t1="byte";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=512;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=512;else filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;filltuple(a+6, t6);
err=gen_image3(varp_obj(0),t1,t2,t3,t4,t5,t6);
func_end_seterr;

func_begin(x_gen_image1);
__tuple t1;if(v_empty(1))t1="byte";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=512;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=512;else filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
err=gen_image1(varp_obj(0),t1,t2,t3,t4);
func_end_seterr;

func_begin(x_gen_image_const);
__tuple t1;if(v_empty(1))t1="byte";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=512;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=512;else filltuple(a+3, t3);
err=gen_image_const(varp_obj(0),t1,t2,t3);
func_end_seterr;

func_begin(x_gen_ellipse_sector);
__tuple t1;if(v_empty(1))t1=200.0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=200.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=100.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=60.0;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=0.0;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=3.14159;else filltuple(a+7, t7);
err=gen_ellipse_sector(varp_obj(0),t1,t2,t3,t4,t5,t6,t7);
func_end_seterr;

func_begin(x_gen_ellipse);
__tuple t1;if(v_empty(1))t1=200.0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=200.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=100.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=60.0;else filltuple(a+5, t5);
err=gen_ellipse(varp_obj(0),t1,t2,t3,t4,t5);
func_end_seterr;

func_begin(x_gen_circle_sector);
__tuple t1;if(v_empty(1))t1=200.0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=200.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=100.5;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=3.14159;else filltuple(a+5, t5);
err=gen_circle_sector(varp_obj(0),t1,t2,t3,t4,t5);
func_end_seterr;

func_begin(x_gen_circle);
__tuple t1;if(v_empty(1))t1=200.0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=200.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=100.5;else filltuple(a+3, t3);
err=gen_circle(varp_obj(0),t1,t2,t3);
func_end_seterr;

func_begin(x_gen_checker_region);
__tuple t1;if(v_empty(1))t1=511;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=511;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=64;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=64;else filltuple(a+4, t4);
err=gen_checker_region(varp_obj(0),t1,t2,t3,t4);
func_end_seterr;

func_begin(x_gen_grid_region);
__tuple t1;if(v_empty(1))t1=10;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=10;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="lines";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=512;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=512;else filltuple(a+5, t5);
err=gen_grid_region(varp_obj(0),t1,t2,t3,t4,t5);
func_end_seterr;

func_begin(x_gen_random_regions);
__tuple t1;if(v_empty(1))t1="circle";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=10.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=20.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=10.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=30.0;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=-0.7854;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=0.7854;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=100;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=512;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=512;else filltuple(a+10, t10);
err=gen_random_regions(varp_obj(0),t1,t2,t3,t4,t5,t6,t7,t8,t9,t10);
func_end_seterr;

func_begin(x_gen_region_hline);
__tuple t1;if(v_empty(1))t1=0.0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=200;else filltuple(a+2, t2);
err=gen_region_hline(varp_obj(0),t1,t2);
func_end_seterr;

func_begin(x_gen_region_line);
__tuple t1;if(v_empty(1))t1=100;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=50;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=150;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=250;else filltuple(a+4, t4);
err=gen_region_line(varp_obj(0),t1,t2,t3,t4);
func_end_seterr;

func_begin(x_gen_empty_obj);
err=gen_empty_obj(varp_obj(0));
func_end_seterr;

func_begin(x_gen_empty_region);
err=gen_empty_region(varp_obj(0));
func_end_seterr;

func_begin(x_gen_image_gray_ramp);
__tuple t1;if(v_empty(1))t1=1.0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=1.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=128;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=256;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=256;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=512;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=512;else filltuple(a+7, t7);
err=gen_image_gray_ramp(varp_obj(0),t1,t2,t3,t4,t5,t6,t7);
func_end_seterr;

func_begin(x_gen_image3_extern);
__tuple t1;if(v_empty(1))t1="byte";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=512;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=512;else filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=0;else filltuple(a+7, t7);
err=gen_image3_extern(varp_obj(0),t1,t2,t3,t4,t5,t6,t7);
func_end_seterr;

func_begin(x_gen_image1_extern);
__tuple t1;if(v_empty(1))t1="byte";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=512;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=512;else filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=0;else filltuple(a+5, t5);
err=gen_image1_extern(varp_obj(0),t1,t2,t3,t4,t5);
func_end_seterr;

func_begin(x_gen_image1_rect);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=512;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=512;else filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=8;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=8;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="false";else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=0;else filltuple(a+8, t8);
err=gen_image1_rect(varp_obj(0),t1,t2,t3,t4,t5,t6,t7,t8);
func_end_seterr;

func_begin(x_get_image_pointer1_rect);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
__tuple t6;
err=get_image_pointer1_rect(a_obj(0),&t1,&t2,&t3,&t4,&t5,&t6);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_get_image_pointer3);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
__tuple t6;
err=get_image_pointer3(a_obj(0),&t1,&t2,&t3,&t4,&t5,&t6);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_get_image_pointer1);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
err=get_image_pointer1(a_obj(0),&t1,&t2,&t3,&t4);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_get_image_type);
__tuple t1;
err=get_image_type(a_obj(0),&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_get_image_size);
__tuple t1;
__tuple t2;
err=get_image_size(a_obj(0),&t1,&t2);
fillvar(t1, a+1);fillvar(t2, a+2);
func_end_seterr;

func_begin(x_get_image_time);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
__tuple t6;
__tuple t7;
__tuple t8;
err=get_image_time(a_obj(0),&t1,&t2,&t3,&t4,&t5,&t6,&t7,&t8);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);
func_end_seterr;

func_begin(x_get_grayval_interpolated);
__tuple t1;if(v_empty(1))t1=0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="bilinear";else filltuple(a+3, t3);
__tuple t4;
err=get_grayval_interpolated(a_obj(0),t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_get_grayval);
__tuple t1;if(v_empty(1))t1=0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;
err=get_grayval(a_obj(0),t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_get_region_thickness);
__tuple t1;
__tuple t2;
err=get_region_thickness(a_obj(0),&t1,&t2);
fillvar(t1, a+1);fillvar(t2, a+2);
func_end_seterr;

func_begin(x_get_region_polygon);
__tuple t1;if(v_empty(1))t1=5.0;else filltuple(a+1, t1);
__tuple t2;
__tuple t3;
err=get_region_polygon(a_obj(0),t1,&t2,&t3);
fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_get_region_points);
__tuple t1;
__tuple t2;
err=get_region_points(a_obj(0),&t1,&t2);
fillvar(t1, a+1);fillvar(t2, a+2);
func_end_seterr;

func_begin(x_get_region_contour);
__tuple t1;
__tuple t2;
err=get_region_contour(a_obj(0),&t1,&t2);
fillvar(t1, a+1);fillvar(t2, a+2);
func_end_seterr;

func_begin(x_get_region_runs);
__tuple t1;
__tuple t2;
__tuple t3;
err=get_region_runs(a_obj(0),&t1,&t2,&t3);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_get_region_chain);
__tuple t1;
__tuple t2;
__tuple t3;
err=get_region_chain(a_obj(0),&t1,&t2,&t3);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_get_region_convex);
__tuple t1;
__tuple t2;
err=get_region_convex(a_obj(0),&t1,&t2);
fillvar(t1, a+1);fillvar(t2, a+2);
func_end_seterr;

func_begin(x_do_ocv_simple);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="a";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="true";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="true";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="false";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="true";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=10;else filltuple(a+7, t7);
__tuple t8;
err=do_ocv_simple(a_obj(0),t1,t2,t3,t4,t5,t6,t7,&t8);
fillvar(t8, a+8);
func_end_seterr;

func_begin(x_traind_ocv_proj);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="a";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="single";else filltuple(a+3, t3);
err=traind_ocv_proj(a_obj(0),t1,t2,t3);
func_end_seterr;

func_begin(x_deserialize_ocv);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_ocv(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_serialize_ocv);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_ocv(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_read_ocv);
__tuple t0;if(v_empty(0))t0="test_ocv";else filltuple(a+0, t0);
__tuple t1;
err=read_ocv(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_ocv);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="test_ocv";else filltuple(a+1, t1);
err=write_ocv(t0,t1);
func_end_seterr;

func_begin(x_close_all_ocvs);
err=close_all_ocvs();
func_end_seterr;

func_begin(x_close_ocv);
__tuple t0;filltuple(a+0, t0);
err=close_ocv(t0);
func_end_seterr;

func_begin(x_create_ocv_proj);
__tuple t0;if(v_empty(0))t0="a";else filltuple(a+0, t0);
__tuple t1;
err=create_ocv_proj(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_do_ocr_word_knn);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=3;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=2;else filltuple(a+5, t5);
__tuple t6;
__tuple t7;
__tuple t8;
__tuple t9;
err=do_ocr_word_knn(a_obj(0),a_obj(1),t2,t3,t4,t5,&t6,&t7,&t8,&t9);
fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);fillvar(t9, a+9);
func_end_seterr;

func_begin(x_deserialize_ocr_class_knn);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_ocr_class_knn(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_serialize_ocr_class_knn);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_ocr_class_knn(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_read_ocr_class_knn);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=read_ocr_class_knn(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_ocr_class_knn);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=write_ocr_class_knn(t0,t1);
func_end_seterr;

func_begin(x_clear_all_ocr_class_knn);
err=clear_all_ocr_class_knn();
func_end_seterr;

func_begin(x_clear_ocr_class_knn);
__tuple t0;filltuple(a+0, t0);
err=clear_ocr_class_knn(t0);
func_end_seterr;

func_begin(x_create_ocr_class_knn);
__tuple t0;if(v_empty(0))t0=8;else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=10;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="constant";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="default";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4)){const char* vs4[]={"0","1","2","3","4","5","6","7","8","9"};arr2tupleS(vs4, 10, t4);}else filltuple(a+4, t4);
__tuple t5;if(!v_empty(5)) filltuple(a+5, t5);
__tuple t6;if(!v_empty(6)) filltuple(a+6, t6);
__tuple t7;
err=create_ocr_class_knn(t0,t1,t2,t3,t4,t5,t6,&t7);
fillvar(t7, a+7);
func_end_seterr;

func_begin(x_trainf_ocr_class_knn);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="ocr.trf";else filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
err=trainf_ocr_class_knn(t0,t1,t2,t3);
func_end_seterr;

func_begin(x_get_features_ocr_class_knn);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="true";else filltuple(a+2, t2);
__tuple t3;
err=get_features_ocr_class_knn(a_obj(0),t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_get_params_ocr_class_knn);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
__tuple t6;
__tuple t7;
err=get_params_ocr_class_knn(t0,&t1,&t2,&t3,&t4,&t5,&t6,&t7);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);
func_end_seterr;

func_begin(x_do_ocr_multi_class_knn);
__tuple t2;filltuple(a+2, t2);
__tuple t3;
__tuple t4;
err=do_ocr_multi_class_knn(a_obj(0),a_obj(1),t2,&t3,&t4);
fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_do_ocr_single_class_knn);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=1;else filltuple(a+4, t4);
__tuple t5;
__tuple t6;
err=do_ocr_single_class_knn(a_obj(0),a_obj(1),t2,t3,t4,&t5,&t6);
fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_select_feature_set_trainf_knn);
__tuple t0;if(v_empty(0))t0="";else filltuple(a+0, t0);
__tuple t1;if(v_empty(1)){const char* vs1[]={"zoom_factor","ratio","width","height","foreground","foreground_grid_9","foreground_grid_16","anisometry","compactness","convexity","moments_region_2nd_invar","moments_region_2nd_rel_invar","moments_region_3rd_invar","moments_central","phi","num_connect","num_holes","projection_horizontal","projection_vertical","projection_horizontal_invar","projection_vertical_invar","chord_histo","num_runs","pixel","pixel_invar","pixel_binary","gradient_8dir","cooc","moments_gray_plane"};arr2tupleS(vs1, 29, t1);}else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="greedy";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=15;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=16;else filltuple(a+4, t4);
__tuple t5;if(!v_empty(5)) filltuple(a+5, t5);
__tuple t6;if(!v_empty(6)) filltuple(a+6, t6);
__tuple t7;
__tuple t8;
__tuple t9;
err=select_feature_set_trainf_knn(t0,t1,t2,t3,t4,t5,t6,&t7,&t8,&t9);
fillvar(t7, a+7);fillvar(t8, a+8);fillvar(t9, a+9);
func_end_seterr;

func_begin(x_select_feature_set_trainf_mlp_protected);
__tuple t0;if(v_empty(0))t0="";else filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2)){const char* vs2[]={"zoom_factor","ratio","width","height","foreground","foreground_grid_9","foreground_grid_16","anisometry","compactness","convexity","moments_region_2nd_invar","moments_region_2nd_rel_invar","moments_region_3rd_invar","moments_central","phi","num_connect","num_holes","projection_horizontal","projection_vertical","projection_horizontal_invar","projection_vertical_invar","chord_histo","num_runs","pixel","pixel_invar","pixel_binary","gradient_8dir","cooc","moments_gray_plane"};arr2tupleS(vs2, 29, t2);}else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="greedy";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=15;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=16;else filltuple(a+5, t5);
__tuple t6;if(!v_empty(6)) filltuple(a+6, t6);
__tuple t7;if(!v_empty(7)) filltuple(a+7, t7);
__tuple t8;
__tuple t9;
__tuple t10;
err=select_feature_set_trainf_mlp_protected(t0,t1,t2,t3,t4,t5,t6,t7,&t8,&t9,&t10);
fillvar(t8, a+8);fillvar(t9, a+9);fillvar(t10, a+10);
func_end_seterr;

func_begin(x_select_feature_set_trainf_mlp);
__tuple t0;if(v_empty(0))t0="";else filltuple(a+0, t0);
__tuple t1;if(v_empty(1)){const char* vs1[]={"zoom_factor","ratio","width","height","foreground","foreground_grid_9","foreground_grid_16","anisometry","compactness","convexity","moments_region_2nd_invar","moments_region_2nd_rel_invar","moments_region_3rd_invar","moments_central","phi","num_connect","num_holes","projection_horizontal","projection_vertical","projection_horizontal_invar","projection_vertical_invar","chord_histo","num_runs","pixel","pixel_invar","pixel_binary","gradient_8dir","cooc","moments_gray_plane"};arr2tupleS(vs1, 29, t1);}else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="greedy";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=15;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=16;else filltuple(a+4, t4);
__tuple t5;if(!v_empty(5)) filltuple(a+5, t5);
__tuple t6;if(!v_empty(6)) filltuple(a+6, t6);
__tuple t7;
__tuple t8;
__tuple t9;
err=select_feature_set_trainf_mlp(t0,t1,t2,t3,t4,t5,t6,&t7,&t8,&t9);
fillvar(t7, a+7);fillvar(t8, a+8);fillvar(t9, a+9);
func_end_seterr;

func_begin(x_select_feature_set_trainf_svm_protected);
__tuple t0;if(v_empty(0))t0="";else filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2)){const char* vs2[]={"zoom_factor","ratio","width","height","foreground","foreground_grid_9","foreground_grid_16","anisometry","compactness","convexity","moments_region_2nd_invar","moments_region_2nd_rel_invar","moments_region_3rd_invar","moments_central","phi","num_connect","num_holes","projection_horizontal","projection_vertical","projection_horizontal_invar","projection_vertical_invar","chord_histo","num_runs","pixel","pixel_invar","pixel_binary","gradient_8dir","cooc","moments_gray_plane"};arr2tupleS(vs2, 29, t2);}else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="greedy";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=15;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=16;else filltuple(a+5, t5);
__tuple t6;if(!v_empty(6)) filltuple(a+6, t6);
__tuple t7;if(!v_empty(7)) filltuple(a+7, t7);
__tuple t8;
__tuple t9;
__tuple t10;
err=select_feature_set_trainf_svm_protected(t0,t1,t2,t3,t4,t5,t6,t7,&t8,&t9,&t10);
fillvar(t8, a+8);fillvar(t9, a+9);fillvar(t10, a+10);
func_end_seterr;

func_begin(x_select_feature_set_trainf_svm);
__tuple t0;if(v_empty(0))t0="";else filltuple(a+0, t0);
__tuple t1;if(v_empty(1)){const char* vs1[]={"zoom_factor","ratio","width","height","foreground","foreground_grid_9","foreground_grid_16","anisometry","compactness","convexity","moments_region_2nd_invar","moments_region_2nd_rel_invar","moments_region_3rd_invar","moments_central","phi","num_connect","num_holes","projection_horizontal","projection_vertical","projection_horizontal_invar","projection_vertical_invar","chord_histo","num_runs","pixel","pixel_invar","pixel_binary","gradient_8dir","cooc","moments_gray_plane"};arr2tupleS(vs1, 29, t1);}else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="greedy";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=15;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=16;else filltuple(a+4, t4);
__tuple t5;if(!v_empty(5)) filltuple(a+5, t5);
__tuple t6;if(!v_empty(6)) filltuple(a+6, t6);
__tuple t7;
__tuple t8;
__tuple t9;
err=select_feature_set_trainf_svm(t0,t1,t2,t3,t4,t5,t6,&t7,&t8,&t9);
fillvar(t7, a+7);fillvar(t8, a+8);fillvar(t9, a+9);
func_end_seterr;

func_begin(x_clear_all_lexica);
err=clear_all_lexica();
func_end_seterr;

func_begin(x_clear_lexicon);
__tuple t0;filltuple(a+0, t0);
err=clear_lexicon(t0);
func_end_seterr;

func_begin(x_suggest_lexicon);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="word";else filltuple(a+1, t1);
__tuple t2;
__tuple t3;
err=suggest_lexicon(t0,t1,&t2,&t3);
fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_lookup_lexicon);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="word";else filltuple(a+1, t1);
__tuple t2;
err=lookup_lexicon(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_inspect_lexicon);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=inspect_lexicon(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_import_lexicon);
__tuple t0;if(v_empty(0))t0="lex1";else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="words.txt";else filltuple(a+1, t1);
__tuple t2;
err=import_lexicon(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_create_lexicon);
__tuple t0;if(v_empty(0))t0="lex1";else filltuple(a+0, t0);
__tuple t1;if(v_empty(1)){const char* vs1[]={"word1","word2","word3"};arr2tupleS(vs1, 3, t1);}else filltuple(a+1, t1);
__tuple t2;
err=create_lexicon(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_clear_all_ocr_class_svm);
err=clear_all_ocr_class_svm();
func_end_seterr;

func_begin(x_clear_ocr_class_svm);
__tuple t0;filltuple(a+0, t0);
err=clear_ocr_class_svm(t0);
func_end_seterr;

func_begin(x_deserialize_ocr_class_svm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_ocr_class_svm(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_serialize_ocr_class_svm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_ocr_class_svm(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_read_ocr_class_svm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=read_ocr_class_svm(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_ocr_class_svm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=write_ocr_class_svm(t0,t1);
func_end_seterr;

func_begin(x_get_features_ocr_class_svm);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="true";else filltuple(a+2, t2);
__tuple t3;
err=get_features_ocr_class_svm(a_obj(0),t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_do_ocr_word_svm);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=3;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=2;else filltuple(a+5, t5);
__tuple t6;
__tuple t7;
__tuple t8;
err=do_ocr_word_svm(a_obj(0),a_obj(1),t2,t3,t4,t5,&t6,&t7,&t8);
fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);
func_end_seterr;

func_begin(x_do_ocr_multi_class_svm);
__tuple t2;filltuple(a+2, t2);
__tuple t3;
err=do_ocr_multi_class_svm(a_obj(0),a_obj(1),t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_do_ocr_single_class_svm);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1;else filltuple(a+3, t3);
__tuple t4;
err=do_ocr_single_class_svm(a_obj(0),a_obj(1),t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_reduce_ocr_class_svm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="bottom_up";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=2;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.001;else filltuple(a+3, t3);
__tuple t4;
err=reduce_ocr_class_svm(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_trainf_ocr_class_svm_protected);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="ocr.trf";else filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.001;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="default";else filltuple(a+4, t4);
err=trainf_ocr_class_svm_protected(t0,t1,t2,t3,t4);
func_end_seterr;

func_begin(x_trainf_ocr_class_svm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="ocr.trf";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0.001;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="default";else filltuple(a+3, t3);
err=trainf_ocr_class_svm(t0,t1,t2,t3);
func_end_seterr;

func_begin(x_get_prep_info_ocr_class_svm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="ocr.trf";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="principal_components";else filltuple(a+2, t2);
__tuple t3;
__tuple t4;
err=get_prep_info_ocr_class_svm(t0,t1,t2,&t3,&t4);
fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_get_support_vector_num_ocr_class_svm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
err=get_support_vector_num_ocr_class_svm(t0,&t1,&t2);
fillvar(t1, a+1);fillvar(t2, a+2);
func_end_seterr;

func_begin(x_get_support_vector_ocr_class_svm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=get_support_vector_ocr_class_svm(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_get_params_ocr_class_svm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
__tuple t6;
__tuple t7;
__tuple t8;
__tuple t9;
__tuple t10;
__tuple t11;
err=get_params_ocr_class_svm(t0,&t1,&t2,&t3,&t4,&t5,&t6,&t7,&t8,&t9,&t10,&t11);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);fillvar(t9, a+9);fillvar(t10, a+10);fillvar(t11, a+11);
func_end_seterr;

func_begin(x_create_ocr_class_svm);
__tuple t0;if(v_empty(0))t0=8;else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=10;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="constant";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="default";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4)){const char* vs4[]={"0","1","2","3","4","5","6","7","8","9"};arr2tupleS(vs4, 10, t4);}else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="rbf";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=0.02;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=0.05;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8="one-versus-one";else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9="normalization";else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=10;else filltuple(a+10, t10);
__tuple t11;
err=create_ocr_class_svm(t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,&t11);
fillvar(t11, a+11);
func_end_seterr;

func_begin(x_clear_all_ocr_class_mlp);
err=clear_all_ocr_class_mlp();
func_end_seterr;

func_begin(x_clear_ocr_class_mlp);
__tuple t0;filltuple(a+0, t0);
err=clear_ocr_class_mlp(t0);
func_end_seterr;

func_begin(x_deserialize_ocr_class_mlp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_ocr_class_mlp(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_serialize_ocr_class_mlp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_ocr_class_mlp(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_read_ocr_class_mlp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=read_ocr_class_mlp(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_ocr_class_mlp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=write_ocr_class_mlp(t0,t1);
func_end_seterr;

func_begin(x_get_features_ocr_class_mlp);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="true";else filltuple(a+2, t2);
__tuple t3;
err=get_features_ocr_class_mlp(a_obj(0),t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_do_ocr_word_mlp);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=3;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=2;else filltuple(a+5, t5);
__tuple t6;
__tuple t7;
__tuple t8;
__tuple t9;
err=do_ocr_word_mlp(a_obj(0),a_obj(1),t2,t3,t4,t5,&t6,&t7,&t8,&t9);
fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);fillvar(t9, a+9);
func_end_seterr;

func_begin(x_do_ocr_multi_class_mlp);
__tuple t2;filltuple(a+2, t2);
__tuple t3;
__tuple t4;
err=do_ocr_multi_class_mlp(a_obj(0),a_obj(1),t2,&t3,&t4);
fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_do_ocr_single_class_mlp);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1;else filltuple(a+3, t3);
__tuple t4;
__tuple t5;
err=do_ocr_single_class_mlp(a_obj(0),a_obj(1),t2,t3,&t4,&t5);
fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_trainf_ocr_class_mlp_protected);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="ocr.trf";else filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=200;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=1.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=0.01;else filltuple(a+5, t5);
__tuple t6;
__tuple t7;
err=trainf_ocr_class_mlp_protected(t0,t1,t2,t3,t4,t5,&t6,&t7);
fillvar(t6, a+6);fillvar(t7, a+7);
func_end_seterr;

func_begin(x_trainf_ocr_class_mlp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="ocr.trf";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=200;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.01;else filltuple(a+4, t4);
__tuple t5;
__tuple t6;
err=trainf_ocr_class_mlp(t0,t1,t2,t3,t4,&t5,&t6);
fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_get_prep_info_ocr_class_mlp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="ocr.trf";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="principal_components";else filltuple(a+2, t2);
__tuple t3;
__tuple t4;
err=get_prep_info_ocr_class_mlp(t0,t1,t2,&t3,&t4);
fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_get_rejection_params_ocr_class_mlp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="sampling_strategy";else filltuple(a+1, t1);
__tuple t2;
err=get_rejection_params_ocr_class_mlp(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_set_rejection_params_ocr_class_mlp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="sampling_strategy";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="hyperbox_around_all_classes";else filltuple(a+2, t2);
err=set_rejection_params_ocr_class_mlp(t0,t1,t2);
func_end_seterr;

func_begin(x_get_regularization_params_ocr_class_mlp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="weight_prior";else filltuple(a+1, t1);
__tuple t2;
err=get_regularization_params_ocr_class_mlp(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_set_regularization_params_ocr_class_mlp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="weight_prior";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=1.0;else filltuple(a+2, t2);
err=set_regularization_params_ocr_class_mlp(t0,t1,t2);
func_end_seterr;

func_begin(x_get_params_ocr_class_mlp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
__tuple t6;
__tuple t7;
__tuple t8;
err=get_params_ocr_class_mlp(t0,&t1,&t2,&t3,&t4,&t5,&t6,&t7,&t8);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);
func_end_seterr;

func_begin(x_create_ocr_class_mlp);
__tuple t0;if(v_empty(0))t0=8;else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=10;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="constant";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="default";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4)){const char* vs4[]={"0","1","2","3","4","5","6","7","8","9"};arr2tupleS(vs4, 10, t4);}else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=80;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="none";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=10;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=42;else filltuple(a+8, t8);
__tuple t9;
err=create_ocr_class_mlp(t0,t1,t2,t3,t4,t5,t6,t7,t8,&t9);
fillvar(t9, a+9);
func_end_seterr;

func_begin(x_serialize_ocr);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_ocr(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_deserialize_ocr);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_ocr(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_ocr);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="my_ocr";else filltuple(a+1, t1);
err=write_ocr(t0,t1);
func_end_seterr;

func_begin(x_read_ocr);
__tuple t0;if(v_empty(0))t0="testnet";else filltuple(a+0, t0);
__tuple t1;
err=read_ocr(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_do_ocr_single);
__tuple t2;filltuple(a+2, t2);
__tuple t3;
__tuple t4;
err=do_ocr_single(a_obj(0),a_obj(1),t2,&t3,&t4);
fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_do_ocr_multi);
__tuple t2;filltuple(a+2, t2);
__tuple t3;
__tuple t4;
err=do_ocr_multi(a_obj(0),a_obj(1),t2,&t3,&t4);
fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_info_ocr_class_box);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
__tuple t6;
__tuple t7;
err=info_ocr_class_box(t0,&t1,&t2,&t3,&t4,&t5,&t6,&t7);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);
func_end_seterr;

func_begin(x_create_ocr_class_box);
__tuple t0;if(v_empty(0))t0=8;else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=10;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=1;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="default";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4)){const char* vs4[]={"a","b","c"};arr2tupleS(vs4, 3, t4);}else filltuple(a+4, t4);
__tuple t5;
err=create_ocr_class_box(t0,t1,t2,t3,t4,&t5);
fillvar(t5, a+5);
func_end_seterr;

func_begin(x_traind_ocr_class_box);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="a";else filltuple(a+3, t3);
__tuple t4;
err=traind_ocr_class_box(a_obj(0),a_obj(1),t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_trainf_ocr_class_box);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="train_ocr";else filltuple(a+1, t1);
__tuple t2;
err=trainf_ocr_class_box(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_protect_ocr_trainf);
__tuple t0;if(v_empty(0))t0="";else filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
err=protect_ocr_trainf(t0,t1,t2);
func_end_seterr;

func_begin(x_write_ocr_trainf);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="train_ocr";else filltuple(a+3, t3);
err=write_ocr_trainf(a_obj(0),a_obj(1),t2,t3);
func_end_seterr;

func_begin(x_ocr_change_char);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1)){const char* vs1[]={"a","b","c"};arr2tupleS(vs1, 3, t1);}else filltuple(a+1, t1);
err=ocr_change_char(t0,t1);
func_end_seterr;

func_begin(x_close_ocr);
__tuple t0;filltuple(a+0, t0);
err=close_ocr(t0);
func_end_seterr;

func_begin(x_sort_region);
__tuple t2;if(v_empty(2))t2="first_point";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="true";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="row";else filltuple(a+4, t4);
err=sort_region(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_close_all_ocrs);
err=close_all_ocrs();
func_end_seterr;

func_begin(x_testd_ocr_class_box);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="a";else filltuple(a+3, t3);
__tuple t4;
err=testd_ocr_class_box(a_obj(0),a_obj(1),t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_crop_domain_rel);
__tuple t2;if(v_empty(2))t2=-1;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=-1;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=-1;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=-1;else filltuple(a+5, t5);
err=crop_domain_rel(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_ocr_get_features);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=ocr_get_features(a_obj(0),t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_concat_ocr_trainf);
__tuple t0;if(v_empty(0))t0="";else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="all_characters";else filltuple(a+1, t1);
err=concat_ocr_trainf(t0,t1);
func_end_seterr;

func_begin(x_write_ocr_trainf_image);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="train_ocr";else filltuple(a+2, t2);
err=write_ocr_trainf_image(a_obj(0),t1,t2);
func_end_seterr;

func_begin(x_append_ocr_trainf);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="train_ocr";else filltuple(a+3, t3);
err=append_ocr_trainf(a_obj(0),a_obj(1),t2,t3);
func_end_seterr;

func_begin(x_read_ocr_trainf_names_protected);
__tuple t0;if(v_empty(0))t0="";else filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
__tuple t3;
err=read_ocr_trainf_names_protected(t0,t1,&t2,&t3);
fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_read_ocr_trainf_names);
__tuple t0;if(v_empty(0))t0="";else filltuple(a+0, t0);
__tuple t1;
__tuple t2;
err=read_ocr_trainf_names(t0,&t1,&t2);
fillvar(t1, a+1);fillvar(t2, a+2);
func_end_seterr;

func_begin(x_read_ocr_trainf_select);
__tuple t1;if(v_empty(1))t1="";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="0";else filltuple(a+2, t2);
__tuple t3;
err=read_ocr_trainf_select(varp_obj(0),t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_read_ocr_trainf);
__tuple t1;if(v_empty(1))t1="";else filltuple(a+1, t1);
__tuple t2;
err=read_ocr_trainf(varp_obj(0),t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_pruning);
__tuple t2;if(v_empty(2))t2=2;else filltuple(a+2, t2);
err=pruning(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_boundary);
__tuple t2;if(v_empty(2))t2="inner";else filltuple(a+2, t2);
err=boundary(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_fitting);
err=fitting(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_gen_struct_elements);
__tuple t1;if(v_empty(1))t1="noise";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=1;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1;else filltuple(a+3, t3);
err=gen_struct_elements(varp_obj(0),t1,t2,t3);
func_end_seterr;

func_begin(x_transpose_region);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
err=transpose_region(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_thinning_seq);
__tuple t2;if(v_empty(2))t2="l";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=20;else filltuple(a+3, t3);
err=thinning_seq(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_thinning_golay);
__tuple t2;if(v_empty(2))t2="h";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
err=thinning_golay(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_thinning);
__tuple t4;if(v_empty(4))t4=0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=0;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=1;else filltuple(a+6, t6);
err=thinning(a_obj(0),a_obj(1),a_obj(2),varp_obj(3),t4,t5,t6);
func_end_seterr;

func_begin(x_thickening_seq);
__tuple t2;if(v_empty(2))t2="h";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1;else filltuple(a+3, t3);
err=thickening_seq(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_thickening_golay);
__tuple t2;if(v_empty(2))t2="h";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
err=thickening_golay(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_thickening);
__tuple t4;if(v_empty(4))t4=16;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=16;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=1;else filltuple(a+6, t6);
err=thickening(a_obj(0),a_obj(1),a_obj(2),varp_obj(3),t4,t5,t6);
func_end_seterr;

func_begin(x_hit_or_miss_seq);
__tuple t2;if(v_empty(2))t2="h";else filltuple(a+2, t2);
err=hit_or_miss_seq(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_hit_or_miss_golay);
__tuple t2;if(v_empty(2))t2="h";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
err=hit_or_miss_golay(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_hit_or_miss);
__tuple t4;if(v_empty(4))t4=16;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=16;else filltuple(a+5, t5);
err=hit_or_miss(a_obj(0),a_obj(1),a_obj(2),varp_obj(3),t4,t5);
func_end_seterr;

func_begin(x_golay_elements);
__tuple t2;if(v_empty(2))t2="l";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=16;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=16;else filltuple(a+5, t5);
err=golay_elements(varp_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_morph_skiz);
__tuple t2;if(v_empty(2))t2=100;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1;else filltuple(a+3, t3);
err=morph_skiz(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_morph_skeleton);
err=morph_skeleton(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_morph_hat);
err=morph_hat(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_bottom_hat);
err=bottom_hat(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_top_hat);
err=top_hat(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_minkowski_sub2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=1;else filltuple(a+5, t5);
err=minkowski_sub2(a_obj(0),a_obj(1),varp_obj(2),t3,t4,t5);
func_end_seterr;

func_begin(x_minkowski_sub1);
__tuple t3;if(v_empty(3))t3=1;else filltuple(a+3, t3);
err=minkowski_sub1(a_obj(0),a_obj(1),varp_obj(2),t3);
func_end_seterr;

func_begin(x_minkowski_add2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=1;else filltuple(a+5, t5);
err=minkowski_add2(a_obj(0),a_obj(1),varp_obj(2),t3,t4,t5);
func_end_seterr;

func_begin(x_minkowski_add1);
__tuple t3;if(v_empty(3))t3=1;else filltuple(a+3, t3);
err=minkowski_add1(a_obj(0),a_obj(1),varp_obj(2),t3);
func_end_seterr;

func_begin(x_closing_rectangle1);
__tuple t2;if(v_empty(2))t2=10;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=10;else filltuple(a+3, t3);
err=closing_rectangle1(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_closing_golay);
__tuple t2;if(v_empty(2))t2="h";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
err=closing_golay(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_closing_circle);
__tuple t2;if(v_empty(2))t2=3.5;else filltuple(a+2, t2);
err=closing_circle(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_closing);
err=closing(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_opening_seg);
err=opening_seg(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_opening_golay);
__tuple t2;if(v_empty(2))t2="h";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
err=opening_golay(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_opening_rectangle1);
__tuple t2;if(v_empty(2))t2=10;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=10;else filltuple(a+3, t3);
err=opening_rectangle1(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_opening_circle);
__tuple t2;if(v_empty(2))t2=3.5;else filltuple(a+2, t2);
err=opening_circle(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_opening);
err=opening(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_erosion_seq);
__tuple t2;if(v_empty(2))t2="h";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1;else filltuple(a+3, t3);
err=erosion_seq(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_erosion_golay);
__tuple t2;if(v_empty(2))t2="h";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0;else filltuple(a+4, t4);
err=erosion_golay(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_erosion_rectangle1);
__tuple t2;if(v_empty(2))t2=11;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=11;else filltuple(a+3, t3);
err=erosion_rectangle1(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_erosion_circle);
__tuple t2;if(v_empty(2))t2=3.5;else filltuple(a+2, t2);
err=erosion_circle(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_erosion2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=1;else filltuple(a+5, t5);
err=erosion2(a_obj(0),a_obj(1),varp_obj(2),t3,t4,t5);
func_end_seterr;

func_begin(x_erosion1);
__tuple t3;if(v_empty(3))t3=1;else filltuple(a+3, t3);
err=erosion1(a_obj(0),a_obj(1),varp_obj(2),t3);
func_end_seterr;

func_begin(x_dilation_seq);
__tuple t2;if(v_empty(2))t2="h";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1;else filltuple(a+3, t3);
err=dilation_seq(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_dilation_golay);
__tuple t2;if(v_empty(2))t2="h";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0;else filltuple(a+4, t4);
err=dilation_golay(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_dilation_rectangle1);
__tuple t2;if(v_empty(2))t2=11;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=11;else filltuple(a+3, t3);
err=dilation_rectangle1(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_dilation_circle);
__tuple t2;if(v_empty(2))t2=3.5;else filltuple(a+2, t2);
err=dilation_circle(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_dilation2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=1;else filltuple(a+5, t5);
err=dilation2(a_obj(0),a_obj(1),varp_obj(2),t3,t4,t5);
func_end_seterr;

func_begin(x_dilation1);
__tuple t3;if(v_empty(3))t3=1;else filltuple(a+3, t3);
err=dilation1(a_obj(0),a_obj(1),varp_obj(2),t3);
func_end_seterr;

func_begin(x_gray_bothat);
err=gray_bothat(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_gray_tophat);
err=gray_tophat(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_gray_closing);
err=gray_closing(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_gray_opening);
err=gray_opening(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_gray_dilation);
err=gray_dilation(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_gray_erosion);
err=gray_erosion(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_read_gray_se);
__tuple t1;filltuple(a+1, t1);
err=read_gray_se(varp_obj(0),t1);
func_end_seterr;

func_begin(x_gen_disc_se);
__tuple t1;if(v_empty(1))t1="byte";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=5;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=5;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0;else filltuple(a+4, t4);
err=gen_disc_se(varp_obj(0),t1,t2,t3,t4);
func_end_seterr;

func_begin(x_get_metrology_object_model_contour);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="all";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1.5;else filltuple(a+3, t3);
err=get_metrology_object_model_contour(varp_obj(0),t1,t2,t3);
func_end_seterr;

func_begin(x_get_metrology_object_result_contour);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="all";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="all";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=1.5;else filltuple(a+4, t4);
err=get_metrology_object_result_contour(varp_obj(0),t1,t2,t3,t4);
func_end_seterr;

func_begin(x_align_metrology_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
err=align_metrology_model(t0,t1,t2,t3);
func_end_seterr;

func_begin(x_add_metrology_object_generic);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="circle";else filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=20.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=5.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=1.0;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=30.0;else filltuple(a+6, t6);
__tuple t7;if(!v_empty(7)) filltuple(a+7, t7);
__tuple t8;if(!v_empty(8)) filltuple(a+8, t8);
__tuple t9;
err=add_metrology_object_generic(t0,t1,t2,t3,t4,t5,t6,t7,t8,&t9);
fillvar(t9, a+9);
func_end_seterr;

func_begin(x_get_metrology_model_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="camera_param";else filltuple(a+1, t1);
__tuple t2;
err=get_metrology_model_param(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_set_metrology_model_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="camera_param";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2)){const char* vs2[]={"0","0","0","0","0","0","0","0"};arr2tupleS(vs2, 8, t2);}else filltuple(a+2, t2);
err=set_metrology_model_param(t0,t1,t2);
func_end_seterr;

func_begin(x_deserialize_metrology_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_metrology_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_serialize_metrology_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_metrology_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_transform_metrology_object);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="all";else filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="absolute";else filltuple(a+5, t5);
err=transform_metrology_object(t0,t1,t2,t3,t4,t5);
func_end_seterr;

func_begin(x_write_metrology_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=write_metrology_model(t0,t1);
func_end_seterr;

func_begin(x_read_metrology_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=read_metrology_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_copy_metrology_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="all";else filltuple(a+1, t1);
__tuple t2;
err=copy_metrology_model(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_copy_metrology_object);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="all";else filltuple(a+1, t1);
__tuple t2;
err=copy_metrology_object(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_get_metrology_object_num_instances);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0;else filltuple(a+1, t1);
__tuple t2;
err=get_metrology_object_num_instances(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_get_metrology_object_result);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="all";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="all";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="result_type";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="all_param";else filltuple(a+4, t4);
__tuple t5;
err=get_metrology_object_result(t0,t1,t2,t3,t4,&t5);
fillvar(t5, a+5);
func_end_seterr;

func_begin(x_get_metrology_object_measures);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="all";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="all";else filltuple(a+3, t3);
__tuple t4;
__tuple t5;
err=get_metrology_object_measures(varp_obj(0),t1,t2,t3,&t4,&t5);
fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_apply_metrology_model);
__tuple t1;filltuple(a+1, t1);
err=apply_metrology_model(a_obj(0),t1);
func_end_seterr;

func_begin(x_get_metrology_object_indices);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=get_metrology_object_indices(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_reset_metrology_object_fuzzy_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="all";else filltuple(a+1, t1);
err=reset_metrology_object_fuzzy_param(t0,t1);
func_end_seterr;

func_begin(x_reset_metrology_object_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="all";else filltuple(a+1, t1);
err=reset_metrology_object_param(t0,t1);
func_end_seterr;

func_begin(x_get_metrology_object_fuzzy_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="0";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="fuzzy_thresh";else filltuple(a+2, t2);
__tuple t3;
err=get_metrology_object_fuzzy_param(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_get_metrology_object_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="all";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="num_measures";else filltuple(a+2, t2);
__tuple t3;
err=get_metrology_object_param(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_set_metrology_object_fuzzy_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="all";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="fuzzy_thresh";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.5;else filltuple(a+3, t3);
err=set_metrology_object_fuzzy_param(t0,t1,t2,t3);
func_end_seterr;

func_begin(x_set_metrology_object_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="all";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="num_instances";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="1";else filltuple(a+3, t3);
err=set_metrology_object_param(t0,t1,t2,t3);
func_end_seterr;

func_begin(x_add_metrology_object_rectangle2_measure);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=20.0;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=5.0;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=1.0;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=30.0;else filltuple(a+9, t9);
__tuple t10;if(!v_empty(10)) filltuple(a+10, t10);
__tuple t11;if(!v_empty(11)) filltuple(a+11, t11);
__tuple t12;
err=add_metrology_object_rectangle2_measure(t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,&t12);
fillvar(t12, a+12);
func_end_seterr;

func_begin(x_add_metrology_object_line_measure);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=20.0;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=5.0;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=1.0;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=30.0;else filltuple(a+8, t8);
__tuple t9;if(!v_empty(9)) filltuple(a+9, t9);
__tuple t10;if(!v_empty(10)) filltuple(a+10, t10);
__tuple t11;
err=add_metrology_object_line_measure(t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,&t11);
fillvar(t11, a+11);
func_end_seterr;

func_begin(x_add_metrology_object_ellipse_measure);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=20.0;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=5.0;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=1.0;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=30.0;else filltuple(a+9, t9);
__tuple t10;if(!v_empty(10)) filltuple(a+10, t10);
__tuple t11;if(!v_empty(11)) filltuple(a+11, t11);
__tuple t12;
err=add_metrology_object_ellipse_measure(t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,&t12);
fillvar(t12, a+12);
func_end_seterr;

func_begin(x_add_metrology_object_circle_measure);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=20.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=5.0;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=1.0;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=30.0;else filltuple(a+7, t7);
__tuple t8;if(!v_empty(8)) filltuple(a+8, t8);
__tuple t9;if(!v_empty(9)) filltuple(a+9, t9);
__tuple t10;
err=add_metrology_object_circle_measure(t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,&t10);
fillvar(t10, a+10);
func_end_seterr;

func_begin(x_clear_all_metrology_models);
err=clear_all_metrology_models();
func_end_seterr;

func_begin(x_clear_metrology_model);
__tuple t0;filltuple(a+0, t0);
err=clear_metrology_model(t0);
func_end_seterr;

func_begin(x_clear_metrology_object);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="all";else filltuple(a+1, t1);
err=clear_metrology_object(t0,t1);
func_end_seterr;

func_begin(x_set_metrology_model_image_size);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=640;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=480;else filltuple(a+2, t2);
err=set_metrology_model_image_size(t0,t1,t2);
func_end_seterr;

func_begin(x_create_metrology_model);
__tuple t0;
err=create_metrology_model(&t0);
fillvar(t0, a+0);
func_end_seterr;

func_begin(x_serialize_measure);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_measure(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_deserialize_measure);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_measure(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_measure);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=write_measure(t0,t1);
func_end_seterr;

func_begin(x_read_measure);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=read_measure(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_measure_thresh);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=1.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=128.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="all";else filltuple(a+4, t4);
__tuple t5;
__tuple t6;
__tuple t7;
err=measure_thresh(a_obj(0),t1,t2,t3,t4,&t5,&t6,&t7);
fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);
func_end_seterr;

func_begin(x_close_all_measures);
err=close_all_measures();
func_end_seterr;

func_begin(x_close_measure);
__tuple t0;filltuple(a+0, t0);
err=close_measure(t0);
func_end_seterr;

func_begin(x_measure_projection);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=measure_projection(a_obj(0),t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_reset_fuzzy_measure);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="contrast";else filltuple(a+1, t1);
err=reset_fuzzy_measure(t0,t1);
func_end_seterr;

func_begin(x_set_fuzzy_measure_norm_pair);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=10.0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="size_abs_diff";else filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
err=set_fuzzy_measure_norm_pair(t0,t1,t2,t3);
func_end_seterr;

func_begin(x_set_fuzzy_measure);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="contrast";else filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
err=set_fuzzy_measure(t0,t1,t2);
func_end_seterr;

func_begin(x_fuzzy_measure_pairing);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=1.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=30.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.5;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="all";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="no_restriction";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=10;else filltuple(a+7, t7);
__tuple t8;
__tuple t9;
__tuple t10;
__tuple t11;
__tuple t12;
__tuple t13;
__tuple t14;
__tuple t15;
__tuple t16;
__tuple t17;
err=fuzzy_measure_pairing(a_obj(0),t1,t2,t3,t4,t5,t6,t7,&t8,&t9,&t10,&t11,&t12,&t13,&t14,&t15,&t16,&t17);
fillvar(t8, a+8);fillvar(t9, a+9);fillvar(t10, a+10);fillvar(t11, a+11);fillvar(t12, a+12);fillvar(t13, a+13);fillvar(t14, a+14);fillvar(t15, a+15);fillvar(t16, a+16);fillvar(t17, a+17);
func_end_seterr;

func_begin(x_fuzzy_measure_pairs);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=1.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=30.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.5;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="all";else filltuple(a+5, t5);
__tuple t6;
__tuple t7;
__tuple t8;
__tuple t9;
__tuple t10;
__tuple t11;
__tuple t12;
__tuple t13;
__tuple t14;
__tuple t15;
__tuple t16;
err=fuzzy_measure_pairs(a_obj(0),t1,t2,t3,t4,t5,&t6,&t7,&t8,&t9,&t10,&t11,&t12,&t13,&t14,&t15,&t16);
fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);fillvar(t9, a+9);fillvar(t10, a+10);fillvar(t11, a+11);fillvar(t12, a+12);fillvar(t13, a+13);fillvar(t14, a+14);fillvar(t15, a+15);fillvar(t16, a+16);
func_end_seterr;

func_begin(x_fuzzy_measure_pos);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=1.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=30.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.5;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="all";else filltuple(a+5, t5);
__tuple t6;
__tuple t7;
__tuple t8;
__tuple t9;
__tuple t10;
err=fuzzy_measure_pos(a_obj(0),t1,t2,t3,t4,t5,&t6,&t7,&t8,&t9,&t10);
fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);fillvar(t9, a+9);fillvar(t10, a+10);
func_end_seterr;

func_begin(x_measure_pairs);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=1.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=30.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="all";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="all";else filltuple(a+5, t5);
__tuple t6;
__tuple t7;
__tuple t8;
__tuple t9;
__tuple t10;
__tuple t11;
__tuple t12;
__tuple t13;
err=measure_pairs(a_obj(0),t1,t2,t3,t4,t5,&t6,&t7,&t8,&t9,&t10,&t11,&t12,&t13);
fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);fillvar(t9, a+9);fillvar(t10, a+10);fillvar(t11, a+11);fillvar(t12, a+12);fillvar(t13, a+13);
func_end_seterr;

func_begin(x_measure_pos);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=1.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=30.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="all";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="all";else filltuple(a+5, t5);
__tuple t6;
__tuple t7;
__tuple t8;
__tuple t9;
err=measure_pos(a_obj(0),t1,t2,t3,t4,t5,&t6,&t7,&t8,&t9);
fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);fillvar(t9, a+9);
func_end_seterr;

func_begin(x_translate_measure);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=50.0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=100.0;else filltuple(a+2, t2);
err=translate_measure(t0,t1,t2);
func_end_seterr;

func_begin(x_gen_measure_arc);
__tuple t0;if(v_empty(0))t0=100.0;else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=100.0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=50.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=6.28318;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=10.0;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=512;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=512;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8="nearest_neighbor";else filltuple(a+8, t8);
__tuple t9;
err=gen_measure_arc(t0,t1,t2,t3,t4,t5,t6,t7,t8,&t9);
fillvar(t9, a+9);
func_end_seterr;

func_begin(x_gen_measure_rectangle2);
__tuple t0;if(v_empty(0))t0=300.0;else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=200.0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=100.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=20.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=512;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=512;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="nearest_neighbor";else filltuple(a+7, t7);
__tuple t8;
err=gen_measure_rectangle2(t0,t1,t2,t3,t4,t5,t6,t7,&t8);
fillvar(t8, a+8);
func_end_seterr;

func_begin(x_deserialize_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_matrix(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_serialize_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_matrix(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_read_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=read_matrix(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="binary";else filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
err=write_matrix(t0,t1,t2);
func_end_seterr;

func_begin(x_orthogonal_decompose_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="qr";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="full";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="true";else filltuple(a+3, t3);
__tuple t4;
__tuple t5;
err=orthogonal_decompose_matrix(t0,t1,t2,t3,&t4,&t5);
fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_decompose_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="general";else filltuple(a+1, t1);
__tuple t2;
__tuple t3;
err=decompose_matrix(t0,t1,&t2,&t3);
fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_svd_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="full";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="both";else filltuple(a+2, t2);
__tuple t3;
__tuple t4;
__tuple t5;
err=svd_matrix(t0,t1,t2,&t3,&t4,&t5);
fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_generalized_eigenvalues_general_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="none";else filltuple(a+2, t2);
__tuple t3;
__tuple t4;
__tuple t5;
__tuple t6;
err=generalized_eigenvalues_general_matrix(t0,t1,t2,&t3,&t4,&t5,&t6);
fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_generalized_eigenvalues_symmetric_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="false";else filltuple(a+2, t2);
__tuple t3;
__tuple t4;
err=generalized_eigenvalues_symmetric_matrix(t0,t1,t2,&t3,&t4);
fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_eigenvalues_general_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="none";else filltuple(a+1, t1);
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
err=eigenvalues_general_matrix(t0,t1,&t2,&t3,&t4,&t5);
fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_eigenvalues_symmetric_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="false";else filltuple(a+1, t1);
__tuple t2;
__tuple t3;
err=eigenvalues_symmetric_matrix(t0,t1,&t2,&t3);
fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_solve_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="general";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0.0;else filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;
err=solve_matrix(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_determinant_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="general";else filltuple(a+1, t1);
__tuple t2;
err=determinant_matrix(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_invert_matrix_mod);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="general";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0.0;else filltuple(a+2, t2);
err=invert_matrix_mod(t0,t1,t2);
func_end_seterr;

func_begin(x_invert_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="general";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0.0;else filltuple(a+2, t2);
__tuple t3;
err=invert_matrix(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_transpose_matrix_mod);
__tuple t0;filltuple(a+0, t0);
err=transpose_matrix_mod(t0);
func_end_seterr;

func_begin(x_transpose_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=transpose_matrix(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_max_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="columns";else filltuple(a+1, t1);
__tuple t2;
err=max_matrix(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_min_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="columns";else filltuple(a+1, t1);
__tuple t2;
err=min_matrix(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_pow_matrix_mod);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="general";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=2.0;else filltuple(a+2, t2);
err=pow_matrix_mod(t0,t1,t2);
func_end_seterr;

func_begin(x_pow_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="general";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=2.0;else filltuple(a+2, t2);
__tuple t3;
err=pow_matrix(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_pow_element_matrix_mod);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=pow_element_matrix_mod(t0,t1);
func_end_seterr;

func_begin(x_pow_element_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=pow_element_matrix(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_pow_scalar_element_matrix_mod);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=2.0;else filltuple(a+1, t1);
err=pow_scalar_element_matrix_mod(t0,t1);
func_end_seterr;

func_begin(x_pow_scalar_element_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=2.0;else filltuple(a+1, t1);
__tuple t2;
err=pow_scalar_element_matrix(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_sqrt_matrix_mod);
__tuple t0;filltuple(a+0, t0);
err=sqrt_matrix_mod(t0);
func_end_seterr;

func_begin(x_sqrt_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=sqrt_matrix(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_abs_matrix_mod);
__tuple t0;filltuple(a+0, t0);
err=abs_matrix_mod(t0);
func_end_seterr;

func_begin(x_abs_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=abs_matrix(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_norm_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="2-norm";else filltuple(a+1, t1);
__tuple t2;
err=norm_matrix(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_mean_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="columns";else filltuple(a+1, t1);
__tuple t2;
err=mean_matrix(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_sum_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="columns";else filltuple(a+1, t1);
__tuple t2;
err=sum_matrix(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_div_element_matrix_mod);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=div_element_matrix_mod(t0,t1);
func_end_seterr;

func_begin(x_div_element_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=div_element_matrix(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_mult_element_matrix_mod);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=mult_element_matrix_mod(t0,t1);
func_end_seterr;

func_begin(x_mult_element_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=mult_element_matrix(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_scale_matrix_mod);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=2.0;else filltuple(a+1, t1);
err=scale_matrix_mod(t0,t1);
func_end_seterr;

func_begin(x_scale_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=2.0;else filltuple(a+1, t1);
__tuple t2;
err=scale_matrix(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_sub_matrix_mod);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=sub_matrix_mod(t0,t1);
func_end_seterr;

func_begin(x_sub_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=sub_matrix(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_add_matrix_mod);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=add_matrix_mod(t0,t1);
func_end_seterr;

func_begin(x_add_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=add_matrix(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_mult_matrix_mod);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="AB";else filltuple(a+2, t2);
err=mult_matrix_mod(t0,t1,t2);
func_end_seterr;

func_begin(x_mult_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="AB";else filltuple(a+2, t2);
__tuple t3;
err=mult_matrix(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_get_size_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
err=get_size_matrix(t0,&t1,&t2);
fillvar(t1, a+1);fillvar(t2, a+2);
func_end_seterr;

func_begin(x_repeat_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=2;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=2;else filltuple(a+2, t2);
__tuple t3;
err=repeat_matrix(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_copy_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=copy_matrix(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_set_diagonal_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
err=set_diagonal_matrix(t0,t1,t2);
func_end_seterr;

func_begin(x_get_diagonal_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0;else filltuple(a+1, t1);
__tuple t2;
err=get_diagonal_matrix(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_set_sub_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
err=set_sub_matrix(t0,t1,t2,t3);
func_end_seterr;

func_begin(x_get_sub_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=1;else filltuple(a+4, t4);
__tuple t5;
err=get_sub_matrix(t0,t1,t2,t3,t4,&t5);
fillvar(t5, a+5);
func_end_seterr;

func_begin(x_set_full_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=set_full_matrix(t0,t1);
func_end_seterr;

func_begin(x_get_full_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=get_full_matrix(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_set_value_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
err=set_value_matrix(t0,t1,t2,t3);
func_end_seterr;

func_begin(x_get_value_matrix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;
err=get_value_matrix(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_clear_all_matrices);
err=clear_all_matrices();
func_end_seterr;

func_begin(x_clear_matrix);
__tuple t0;filltuple(a+0, t0);
err=clear_matrix(t0);
func_end_seterr;

func_begin(x_create_matrix);
__tuple t0;if(v_empty(0))t0=3;else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=3;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;
err=create_matrix(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_clear_all_sample_identifiers);
err=clear_all_sample_identifiers();
func_end_seterr;

func_begin(x_clear_sample_identifier);
__tuple t0;filltuple(a+0, t0);
err=clear_sample_identifier(t0);
func_end_seterr;

func_begin(x_deserialize_sample_identifier);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_sample_identifier(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_read_sample_identifier);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=read_sample_identifier(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_serialize_sample_identifier);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_sample_identifier(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_sample_identifier);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=write_sample_identifier(t0,t1);
func_end_seterr;

func_begin(x_apply_sample_identifier);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=1;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.0;else filltuple(a+3, t3);
__tuple t4;if(!v_empty(4)) filltuple(a+4, t4);
__tuple t5;if(!v_empty(5)) filltuple(a+5, t5);
__tuple t6;
__tuple t7;
err=apply_sample_identifier(a_obj(0),t1,t2,t3,t4,t5,&t6,&t7);
fillvar(t6, a+6);fillvar(t7, a+7);
func_end_seterr;

func_begin(x_get_sample_identifier_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="rating_method";else filltuple(a+1, t1);
__tuple t2;
err=get_sample_identifier_param(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_set_sample_identifier_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="rating_method";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="score_single";else filltuple(a+2, t2);
err=set_sample_identifier_param(t0,t1,t2);
func_end_seterr;

func_begin(x_get_sample_identifier_object_info);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="num_training_objects";else filltuple(a+2, t2);
__tuple t3;
err=get_sample_identifier_object_info(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_set_sample_identifier_object_info);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="training_object_name";else filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
err=set_sample_identifier_object_info(t0,t1,t2,t3);
func_end_seterr;

func_begin(x_remove_sample_identifier_training_data);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
err=remove_sample_identifier_training_data(t0,t1,t2);
func_end_seterr;

func_begin(x_remove_sample_identifier_preparation_data);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
err=remove_sample_identifier_preparation_data(t0,t1,t2);
func_end_seterr;

func_begin(x_train_sample_identifier);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(!v_empty(1)) filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
err=train_sample_identifier(t0,t1,t2);
func_end_seterr;

func_begin(x_add_sample_identifier_training_data);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;if(!v_empty(4)) filltuple(a+4, t4);
__tuple t5;
err=add_sample_identifier_training_data(a_obj(0),t1,t2,t3,t4,&t5);
fillvar(t5, a+5);
func_end_seterr;

func_begin(x_prepare_sample_identifier);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="true";else filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
err=prepare_sample_identifier(t0,t1,t2,t3);
func_end_seterr;

func_begin(x_add_sample_identifier_preparation_data);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="unknown";else filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;if(!v_empty(4)) filltuple(a+4, t4);
__tuple t5;
err=add_sample_identifier_preparation_data(a_obj(0),t1,t2,t3,t4,&t5);
fillvar(t5, a+5);
func_end_seterr;

func_begin(x_create_sample_identifier);
__tuple t0;if(!v_empty(0)) filltuple(a+0, t0);
__tuple t1;if(!v_empty(1)) filltuple(a+1, t1);
__tuple t2;
err=create_sample_identifier(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_deserialize_shape_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_shape_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_read_shape_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=read_shape_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_serialize_shape_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_shape_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_shape_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=write_shape_model(t0,t1);
func_end_seterr;

func_begin(x_clear_all_shape_models);
err=clear_all_shape_models();
func_end_seterr;

func_begin(x_clear_shape_model);
__tuple t0;filltuple(a+0, t0);
err=clear_shape_model(t0);
func_end_seterr;

func_begin(x_get_shape_model_contours);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=1;else filltuple(a+2, t2);
err=get_shape_model_contours(varp_obj(0),t1,t2);
func_end_seterr;

func_begin(x_determine_shape_model_params);
__tuple t1;if(v_empty(1))t1="auto";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=-0.39;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.79;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.9;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=1.1;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="auto";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="use_polarity";else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8="auto";else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9="auto";else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10="all";else filltuple(a+10, t10);
__tuple t11;
__tuple t12;
err=determine_shape_model_params(a_obj(0),t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,&t11,&t12);
fillvar(t11, a+11);fillvar(t12, a+12);
func_end_seterr;

func_begin(x_get_shape_model_params);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
__tuple t6;
__tuple t7;
__tuple t8;
__tuple t9;
err=get_shape_model_params(t0,&t1,&t2,&t3,&t4,&t5,&t6,&t7,&t8,&t9);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);fillvar(t9, a+9);
func_end_seterr;

func_begin(x_get_shape_model_origin);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
err=get_shape_model_origin(t0,&t1,&t2);
fillvar(t1, a+1);fillvar(t2, a+2);
func_end_seterr;

func_begin(x_set_shape_model_origin);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
err=set_shape_model_origin(t0,t1,t2);
func_end_seterr;

func_begin(x_find_aniso_shape_models);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=-0.39;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.78;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.9;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=1.1;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=0.9;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=1.1;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=0.5;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=1;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=0.5;else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11="least_squares";else filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12=0;else filltuple(a+12, t12);
__tuple t13;if(v_empty(13))t13=0.9;else filltuple(a+13, t13);
__tuple t14;
__tuple t15;
__tuple t16;
__tuple t17;
__tuple t18;
__tuple t19;
__tuple t20;
err=find_aniso_shape_models(a_obj(0),t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,&t14,&t15,&t16,&t17,&t18,&t19,&t20);
fillvar(t14, a+14);fillvar(t15, a+15);fillvar(t16, a+16);fillvar(t17, a+17);fillvar(t18, a+18);fillvar(t19, a+19);fillvar(t20, a+20);
func_end_seterr;

func_begin(x_find_scaled_shape_models);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=-0.39;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.78;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.9;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=1.1;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=0.5;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=1;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=0.5;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9="least_squares";else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=0;else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11=0.9;else filltuple(a+11, t11);
__tuple t12;
__tuple t13;
__tuple t14;
__tuple t15;
__tuple t16;
__tuple t17;
err=find_scaled_shape_models(a_obj(0),t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,&t12,&t13,&t14,&t15,&t16,&t17);
fillvar(t12, a+12);fillvar(t13, a+13);fillvar(t14, a+14);fillvar(t15, a+15);fillvar(t16, a+16);fillvar(t17, a+17);
func_end_seterr;

func_begin(x_find_shape_models);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=-0.39;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.78;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.5;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=1;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=0.5;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="least_squares";else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=0;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=0.9;else filltuple(a+9, t9);
__tuple t10;
__tuple t11;
__tuple t12;
__tuple t13;
__tuple t14;
err=find_shape_models(a_obj(0),t1,t2,t3,t4,t5,t6,t7,t8,t9,&t10,&t11,&t12,&t13,&t14);
fillvar(t10, a+10);fillvar(t11, a+11);fillvar(t12, a+12);fillvar(t13, a+13);fillvar(t14, a+14);
func_end_seterr;

func_begin(x_find_aniso_shape_model);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=-0.39;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.78;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.9;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=1.1;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=0.9;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=1.1;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=0.5;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=1;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=0.5;else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11="least_squares";else filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12=0;else filltuple(a+12, t12);
__tuple t13;if(v_empty(13))t13=0.9;else filltuple(a+13, t13);
__tuple t14;
__tuple t15;
__tuple t16;
__tuple t17;
__tuple t18;
__tuple t19;
err=find_aniso_shape_model(a_obj(0),t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,&t14,&t15,&t16,&t17,&t18,&t19);
fillvar(t14, a+14);fillvar(t15, a+15);fillvar(t16, a+16);fillvar(t17, a+17);fillvar(t18, a+18);fillvar(t19, a+19);
func_end_seterr;

func_begin(x_find_scaled_shape_model);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=-0.39;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.78;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.9;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=1.1;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=0.5;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=1;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=0.5;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9="least_squares";else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=0;else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11=0.9;else filltuple(a+11, t11);
__tuple t12;
__tuple t13;
__tuple t14;
__tuple t15;
__tuple t16;
err=find_scaled_shape_model(a_obj(0),t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,&t12,&t13,&t14,&t15,&t16);
fillvar(t12, a+12);fillvar(t13, a+13);fillvar(t14, a+14);fillvar(t15, a+15);fillvar(t16, a+16);
func_end_seterr;

func_begin(x_find_shape_model);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=-0.39;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.78;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.5;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=1;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=0.5;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="least_squares";else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=0;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=0.9;else filltuple(a+9, t9);
__tuple t10;
__tuple t11;
__tuple t12;
__tuple t13;
err=find_shape_model(a_obj(0),t1,t2,t3,t4,t5,t6,t7,t8,t9,&t10,&t11,&t12,&t13);
fillvar(t10, a+10);fillvar(t11, a+11);fillvar(t12, a+12);fillvar(t13, a+13);
func_end_seterr;

func_begin(x_set_shape_model_metric);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="use_polarity";else filltuple(a+3, t3);
err=set_shape_model_metric(a_obj(0),t1,t2,t3);
func_end_seterr;

func_begin(x_set_shape_model_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
err=set_shape_model_param(t0,t1,t2);
func_end_seterr;

func_begin(x_create_aniso_shape_model_xld);
__tuple t1;if(v_empty(1))t1="auto";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=-0.39;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.79;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="auto";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=0.9;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=1.1;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="auto";else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=0.9;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=1.1;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10="auto";else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11="auto";else filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12="ignore_local_polarity";else filltuple(a+12, t12);
__tuple t13;if(v_empty(13))t13=5;else filltuple(a+13, t13);
__tuple t14;
err=create_aniso_shape_model_xld(a_obj(0),t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,&t14);
fillvar(t14, a+14);
func_end_seterr;

func_begin(x_create_scaled_shape_model_xld);
__tuple t1;if(v_empty(1))t1="auto";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=-0.39;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.79;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="auto";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=0.9;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=1.1;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="auto";else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8="auto";else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9="ignore_local_polarity";else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=5;else filltuple(a+10, t10);
__tuple t11;
err=create_scaled_shape_model_xld(a_obj(0),t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,&t11);
fillvar(t11, a+11);
func_end_seterr;

func_begin(x_create_shape_model_xld);
__tuple t1;if(v_empty(1))t1="auto";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=-0.39;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.79;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="auto";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="auto";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="ignore_local_polarity";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=5;else filltuple(a+7, t7);
__tuple t8;
err=create_shape_model_xld(a_obj(0),t1,t2,t3,t4,t5,t6,t7,&t8);
fillvar(t8, a+8);
func_end_seterr;

func_begin(x_create_aniso_shape_model);
__tuple t1;if(v_empty(1))t1="auto";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=-0.39;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.79;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="auto";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=0.9;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=1.1;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="auto";else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=0.9;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=1.1;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10="auto";else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11="auto";else filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12="use_polarity";else filltuple(a+12, t12);
__tuple t13;if(v_empty(13))t13="auto";else filltuple(a+13, t13);
__tuple t14;if(v_empty(14))t14="auto";else filltuple(a+14, t14);
__tuple t15;
err=create_aniso_shape_model(a_obj(0),t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,&t15);
fillvar(t15, a+15);
func_end_seterr;

func_begin(x_create_scaled_shape_model);
__tuple t1;if(v_empty(1))t1="auto";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=-0.39;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.79;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="auto";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=0.9;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=1.1;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="auto";else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8="auto";else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9="use_polarity";else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10="auto";else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11="auto";else filltuple(a+11, t11);
__tuple t12;
err=create_scaled_shape_model(a_obj(0),t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,&t12);
fillvar(t12, a+12);
func_end_seterr;

func_begin(x_create_shape_model);
__tuple t1;if(v_empty(1))t1="auto";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=-0.39;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.79;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="auto";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="auto";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="use_polarity";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="auto";else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8="auto";else filltuple(a+8, t8);
__tuple t9;
err=create_shape_model(a_obj(0),t1,t2,t3,t4,t5,t6,t7,t8,&t9);
fillvar(t9, a+9);
func_end_seterr;

func_begin(x_inspect_shape_model);
__tuple t3;if(v_empty(3))t3=4;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=30;else filltuple(a+4, t4);
err=inspect_shape_model(a_obj(0),varp_obj(1),varp_obj(2),t3,t4);
func_end_seterr;

func_begin(x_clear_all_descriptor_models);
err=clear_all_descriptor_models();
func_end_seterr;

func_begin(x_clear_descriptor_model);
__tuple t0;filltuple(a+0, t0);
err=clear_descriptor_model(t0);
func_end_seterr;

func_begin(x_deserialize_descriptor_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_descriptor_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_serialize_descriptor_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_descriptor_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_read_descriptor_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=read_descriptor_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_descriptor_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=write_descriptor_model(t0,t1);
func_end_seterr;

func_begin(x_find_calib_descriptor_model);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;if(!v_empty(4)) filltuple(a+4, t4);
__tuple t5;if(!v_empty(5)) filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=0.2;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=1;else filltuple(a+7, t7);
__tuple t8;filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9="num_points";else filltuple(a+9, t9);
__tuple t10;
__tuple t11;
err=find_calib_descriptor_model(a_obj(0),t1,t2,t3,t4,t5,t6,t7,t8,t9,&t10,&t11);
fillvar(t10, a+10);fillvar(t11, a+11);
func_end_seterr;

func_begin(x_find_uncalib_descriptor_model);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;if(!v_empty(4)) filltuple(a+4, t4);
__tuple t5;if(!v_empty(5)) filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=0.2;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=1;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8="num_points";else filltuple(a+8, t8);
__tuple t9;
__tuple t10;
err=find_uncalib_descriptor_model(a_obj(0),t1,t2,t3,t4,t5,t6,t7,t8,&t9,&t10);
fillvar(t9, a+9);fillvar(t10, a+10);
func_end_seterr;

func_begin(x_get_descriptor_model_points);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="model";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="all";else filltuple(a+2, t2);
__tuple t3;
__tuple t4;
err=get_descriptor_model_points(t0,t1,t2,&t3,&t4);
fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_get_descriptor_model_params);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
err=get_descriptor_model_params(t0,&t1,&t2,&t3,&t4,&t5);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_create_calib_descriptor_model);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="lepetit";else filltuple(a+3, t3);
__tuple t4;if(!v_empty(4)) filltuple(a+4, t4);
__tuple t5;if(!v_empty(5)) filltuple(a+5, t5);
__tuple t6;if(!v_empty(6)) filltuple(a+6, t6);
__tuple t7;if(!v_empty(7)) filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=42;else filltuple(a+8, t8);
__tuple t9;
err=create_calib_descriptor_model(a_obj(0),t1,t2,t3,t4,t5,t6,t7,t8,&t9);
fillvar(t9, a+9);
func_end_seterr;

func_begin(x_create_uncalib_descriptor_model);
__tuple t1;if(v_empty(1))t1="lepetit";else filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;if(!v_empty(4)) filltuple(a+4, t4);
__tuple t5;if(!v_empty(5)) filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=42;else filltuple(a+6, t6);
__tuple t7;
err=create_uncalib_descriptor_model(a_obj(0),t1,t2,t3,t4,t5,t6,&t7);
fillvar(t7, a+7);
func_end_seterr;

func_begin(x_get_descriptor_model_results);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="all";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="num_points";else filltuple(a+2, t2);
__tuple t3;
err=get_descriptor_model_results(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_get_descriptor_model_origin);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
err=get_descriptor_model_origin(t0,&t1,&t2);
fillvar(t1, a+1);fillvar(t2, a+2);
func_end_seterr;

func_begin(x_set_descriptor_model_origin);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
err=set_descriptor_model_origin(t0,t1,t2);
func_end_seterr;

func_begin(x_get_deformable_model_origin);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
err=get_deformable_model_origin(t0,&t1,&t2);
fillvar(t1, a+1);fillvar(t2, a+2);
func_end_seterr;

func_begin(x_set_deformable_model_origin);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
err=set_deformable_model_origin(t0,t1,t2);
func_end_seterr;

func_begin(x_set_deformable_model_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
err=set_deformable_model_param(t0,t1,t2);
func_end_seterr;

func_begin(x_get_deformable_model_params);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="angle_start";else filltuple(a+1, t1);
__tuple t2;
err=get_deformable_model_params(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_get_deformable_model_contours);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=1;else filltuple(a+2, t2);
err=get_deformable_model_contours(varp_obj(0),t1,t2);
func_end_seterr;

func_begin(x_determine_deformable_model_params);
__tuple t1;if(v_empty(1))t1="auto";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=-0.39;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.79;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.9;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=1.1;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="auto";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="use_polarity";else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8="auto";else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9="auto";else filltuple(a+9, t9);
__tuple t10;if(!v_empty(10)) filltuple(a+10, t10);
__tuple t11;if(!v_empty(11)) filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12="all";else filltuple(a+12, t12);
__tuple t13;
__tuple t14;
err=determine_deformable_model_params(a_obj(0),t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,&t13,&t14);
fillvar(t13, a+13);fillvar(t14, a+14);
func_end_seterr;

func_begin(x_deserialize_deformable_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_deformable_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_serialize_deformable_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_deformable_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_read_deformable_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=read_deformable_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_deformable_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=write_deformable_model(t0,t1);
func_end_seterr;

func_begin(x_clear_all_deformable_models);
err=clear_all_deformable_models();
func_end_seterr;

func_begin(x_clear_deformable_model);
__tuple t0;filltuple(a+0, t0);
err=clear_deformable_model(t0);
func_end_seterr;

func_begin(x_find_local_deformable_model);
__tuple t4;filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=-0.39;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=0.78;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=1.0;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=1.0;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=1.0;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=1.0;else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11=0.5;else filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12=1;else filltuple(a+12, t12);
__tuple t13;if(v_empty(13))t13=1.0;else filltuple(a+13, t13);
__tuple t14;if(v_empty(14))t14=0;else filltuple(a+14, t14);
__tuple t15;if(v_empty(15))t15=0.9;else filltuple(a+15, t15);
__tuple t16;if(!v_empty(16)) filltuple(a+16, t16);
__tuple t17;if(!v_empty(17)) filltuple(a+17, t17);
__tuple t18;if(!v_empty(18)) filltuple(a+18, t18);
__tuple t19;
__tuple t20;
__tuple t21;
err=find_local_deformable_model(a_obj(0),varp_obj(1),varp_obj(2),varp_obj(3),t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,&t19,&t20,&t21);
fillvar(t19, a+19);fillvar(t20, a+20);fillvar(t21, a+21);
func_end_seterr;

func_begin(x_find_planar_calib_deformable_model);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=-0.39;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.78;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=1.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=1.0;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=1.0;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=1.0;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=0.5;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=1;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=1.0;else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11=0;else filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12=0.9;else filltuple(a+12, t12);
__tuple t13;if(!v_empty(13)) filltuple(a+13, t13);
__tuple t14;if(!v_empty(14)) filltuple(a+14, t14);
__tuple t15;
__tuple t16;
__tuple t17;
err=find_planar_calib_deformable_model(a_obj(0),t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,&t15,&t16,&t17);
fillvar(t15, a+15);fillvar(t16, a+16);fillvar(t17, a+17);
func_end_seterr;

func_begin(x_find_planar_uncalib_deformable_model);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=-0.39;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.78;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=1.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=1.0;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=1.0;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=1.0;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=0.5;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=1;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=1.0;else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11=0;else filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12=0.9;else filltuple(a+12, t12);
__tuple t13;if(!v_empty(13)) filltuple(a+13, t13);
__tuple t14;if(!v_empty(14)) filltuple(a+14, t14);
__tuple t15;
__tuple t16;
err=find_planar_uncalib_deformable_model(a_obj(0),t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,&t15,&t16);
fillvar(t15, a+15);fillvar(t16, a+16);
func_end_seterr;

func_begin(x_set_local_deformable_model_metric);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="use_polarity";else filltuple(a+3, t3);
err=set_local_deformable_model_metric(a_obj(0),a_obj(1),t2,t3);
func_end_seterr;

func_begin(x_set_planar_calib_deformable_model_metric);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="use_polarity";else filltuple(a+3, t3);
err=set_planar_calib_deformable_model_metric(a_obj(0),t1,t2,t3);
func_end_seterr;

func_begin(x_set_planar_uncalib_deformable_model_metric);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="use_polarity";else filltuple(a+3, t3);
err=set_planar_uncalib_deformable_model_metric(a_obj(0),t1,t2,t3);
func_end_seterr;

func_begin(x_create_local_deformable_model_xld);
__tuple t1;if(v_empty(1))t1="auto";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=-0.39;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.79;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="auto";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=1.0;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=1.0;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="auto";else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=1.0;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=1.0;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10="auto";else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11="auto";else filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12="ignore_local_polarity";else filltuple(a+12, t12);
__tuple t13;if(v_empty(13))t13=5;else filltuple(a+13, t13);
__tuple t14;if(!v_empty(14)) filltuple(a+14, t14);
__tuple t15;if(!v_empty(15)) filltuple(a+15, t15);
__tuple t16;
err=create_local_deformable_model_xld(a_obj(0),t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,&t16);
fillvar(t16, a+16);
func_end_seterr;

func_begin(x_create_planar_calib_deformable_model_xld);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="auto";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=-0.39;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=0.79;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="auto";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=1.0;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=1.0;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9="auto";else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=1.0;else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11=1.0;else filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12="auto";else filltuple(a+12, t12);
__tuple t13;if(v_empty(13))t13="auto";else filltuple(a+13, t13);
__tuple t14;if(v_empty(14))t14="ignore_local_polarity";else filltuple(a+14, t14);
__tuple t15;if(v_empty(15))t15=5;else filltuple(a+15, t15);
__tuple t16;if(!v_empty(16)) filltuple(a+16, t16);
__tuple t17;if(!v_empty(17)) filltuple(a+17, t17);
__tuple t18;
err=create_planar_calib_deformable_model_xld(a_obj(0),t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,&t18);
fillvar(t18, a+18);
func_end_seterr;

func_begin(x_create_planar_uncalib_deformable_model_xld);
__tuple t1;if(v_empty(1))t1="auto";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=-0.39;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.79;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="auto";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=1.0;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=1.0;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="auto";else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=1.0;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=1.0;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10="auto";else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11="auto";else filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12="ignore_local_polarity";else filltuple(a+12, t12);
__tuple t13;if(v_empty(13))t13=5;else filltuple(a+13, t13);
__tuple t14;if(!v_empty(14)) filltuple(a+14, t14);
__tuple t15;if(!v_empty(15)) filltuple(a+15, t15);
__tuple t16;
err=create_planar_uncalib_deformable_model_xld(a_obj(0),t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,&t16);
fillvar(t16, a+16);
func_end_seterr;

func_begin(x_create_local_deformable_model);
__tuple t1;if(v_empty(1))t1="auto";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=-0.39;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.79;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="auto";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=1.0;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=1.0;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="auto";else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=1.0;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=1.0;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10="auto";else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11="none";else filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12="use_polarity";else filltuple(a+12, t12);
__tuple t13;if(v_empty(13))t13="auto";else filltuple(a+13, t13);
__tuple t14;if(v_empty(14))t14="auto";else filltuple(a+14, t14);
__tuple t15;if(!v_empty(15)) filltuple(a+15, t15);
__tuple t16;if(!v_empty(16)) filltuple(a+16, t16);
__tuple t17;
err=create_local_deformable_model(a_obj(0),t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,&t17);
fillvar(t17, a+17);
func_end_seterr;

func_begin(x_create_planar_calib_deformable_model);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="auto";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=-0.39;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=0.79;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="auto";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=1.0;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=1.0;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9="auto";else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=1.0;else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11=1.0;else filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12="auto";else filltuple(a+12, t12);
__tuple t13;if(v_empty(13))t13="none";else filltuple(a+13, t13);
__tuple t14;if(v_empty(14))t14="use_polarity";else filltuple(a+14, t14);
__tuple t15;if(v_empty(15))t15="auto";else filltuple(a+15, t15);
__tuple t16;if(v_empty(16))t16="auto";else filltuple(a+16, t16);
__tuple t17;if(!v_empty(17)) filltuple(a+17, t17);
__tuple t18;if(!v_empty(18)) filltuple(a+18, t18);
__tuple t19;
err=create_planar_calib_deformable_model(a_obj(0),t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,&t19);
fillvar(t19, a+19);
func_end_seterr;

func_begin(x_create_planar_uncalib_deformable_model);
__tuple t1;if(v_empty(1))t1="auto";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=-0.39;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.79;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="auto";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=1.0;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=1.0;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="auto";else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=1.0;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=1.0;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10="auto";else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11="none";else filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12="use_polarity";else filltuple(a+12, t12);
__tuple t13;if(v_empty(13))t13="auto";else filltuple(a+13, t13);
__tuple t14;if(v_empty(14))t14="auto";else filltuple(a+14, t14);
__tuple t15;if(!v_empty(15)) filltuple(a+15, t15);
__tuple t16;if(!v_empty(16)) filltuple(a+16, t16);
__tuple t17;
err=create_planar_uncalib_deformable_model(a_obj(0),t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,&t17);
fillvar(t17, a+17);
func_end_seterr;

func_begin(x_clear_all_ncc_models);
err=clear_all_ncc_models();
func_end_seterr;

func_begin(x_clear_ncc_model);
__tuple t0;filltuple(a+0, t0);
err=clear_ncc_model(t0);
func_end_seterr;

func_begin(x_deserialize_ncc_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_ncc_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_serialize_ncc_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_ncc_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_read_ncc_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=read_ncc_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_ncc_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=write_ncc_model(t0,t1);
func_end_seterr;

func_begin(x_determine_ncc_model_params);
__tuple t1;if(v_empty(1))t1="auto";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=-0.39;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.79;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="use_polarity";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="all";else filltuple(a+5, t5);
__tuple t6;
__tuple t7;
err=determine_ncc_model_params(a_obj(0),t1,t2,t3,t4,t5,&t6,&t7);
fillvar(t6, a+6);fillvar(t7, a+7);
func_end_seterr;

func_begin(x_get_ncc_model_params);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
err=get_ncc_model_params(t0,&t1,&t2,&t3,&t4,&t5);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_get_ncc_model_origin);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
err=get_ncc_model_origin(t0,&t1,&t2);
fillvar(t1, a+1);fillvar(t2, a+2);
func_end_seterr;

func_begin(x_set_ncc_model_origin);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
err=set_ncc_model_origin(t0,t1,t2);
func_end_seterr;

func_begin(x_find_ncc_model);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=-0.39;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.78;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.8;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=1;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=0.5;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="true";else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=0;else filltuple(a+8, t8);
__tuple t9;
__tuple t10;
__tuple t11;
__tuple t12;
err=find_ncc_model(a_obj(0),t1,t2,t3,t4,t5,t6,t7,t8,&t9,&t10,&t11,&t12);
fillvar(t9, a+9);fillvar(t10, a+10);fillvar(t11, a+11);fillvar(t12, a+12);
func_end_seterr;

func_begin(x_set_ncc_model_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
err=set_ncc_model_param(t0,t1,t2);
func_end_seterr;

func_begin(x_create_ncc_model);
__tuple t1;if(v_empty(1))t1="auto";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=-0.39;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.79;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="auto";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="use_polarity";else filltuple(a+5, t5);
__tuple t6;
err=create_ncc_model(a_obj(0),t1,t2,t3,t4,t5,&t6);
fillvar(t6, a+6);
func_end_seterr;

func_begin(x_get_found_component_model);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;filltuple(a+6, t6);
__tuple t7;filltuple(a+7, t7);
__tuple t8;filltuple(a+8, t8);
__tuple t9;filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10="false";else filltuple(a+10, t10);
__tuple t11;
__tuple t12;
__tuple t13;
__tuple t14;
err=get_found_component_model(varp_obj(0),t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,&t11,&t12,&t13,&t14);
fillvar(t11, a+11);fillvar(t12, a+12);fillvar(t13, a+13);fillvar(t14, a+14);
func_end_seterr;

func_begin(x_find_component_model);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=-0.39;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.78;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=0.5;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=1;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=0.5;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8="stop_search";else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9="prune_branch";else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10="none";else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11=0.5;else filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12="least_squares";else filltuple(a+12, t12);
__tuple t13;if(v_empty(13))t13=0;else filltuple(a+13, t13);
__tuple t14;if(v_empty(14))t14=0.9;else filltuple(a+14, t14);
__tuple t15;
__tuple t16;
__tuple t17;
__tuple t18;
__tuple t19;
__tuple t20;
__tuple t21;
__tuple t22;
err=find_component_model(a_obj(0),t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,&t15,&t16,&t17,&t18,&t19,&t20,&t21,&t22);
fillvar(t15, a+15);fillvar(t16, a+16);fillvar(t17, a+17);fillvar(t18, a+18);fillvar(t19, a+19);fillvar(t20, a+20);fillvar(t21, a+21);fillvar(t22, a+22);
func_end_seterr;

func_begin(x_clear_all_component_models);
err=clear_all_component_models();
func_end_seterr;

func_begin(x_clear_component_model);
__tuple t0;filltuple(a+0, t0);
err=clear_component_model(t0);
func_end_seterr;

func_begin(x_get_component_model_tree);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="model_image";else filltuple(a+4, t4);
__tuple t5;
__tuple t6;
__tuple t7;
__tuple t8;
__tuple t9;
__tuple t10;
__tuple t11;
__tuple t12;
__tuple t13;
err=get_component_model_tree(varp_obj(0),varp_obj(1),t2,t3,t4,&t5,&t6,&t7,&t8,&t9,&t10,&t11,&t12,&t13);
fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);fillvar(t9, a+9);fillvar(t10, a+10);fillvar(t11, a+11);fillvar(t12, a+12);fillvar(t13, a+13);
func_end_seterr;

func_begin(x_get_component_model_params);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
err=get_component_model_params(t0,&t1,&t2,&t3);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_deserialize_component_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_component_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_serialize_component_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_component_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_read_component_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=read_component_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_component_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=write_component_model(t0,t1);
func_end_seterr;

func_begin(x_create_component_model);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=-0.39;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=0.79;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="auto";else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8="auto";else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9="auto";else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10="auto";else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11=0.5;else filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12="auto";else filltuple(a+12, t12);
__tuple t13;if(v_empty(13))t13="auto";else filltuple(a+13, t13);
__tuple t14;if(v_empty(14))t14="auto";else filltuple(a+14, t14);
__tuple t15;if(v_empty(15))t15="use_polarity";else filltuple(a+15, t15);
__tuple t16;if(v_empty(16))t16="false";else filltuple(a+16, t16);
__tuple t17;
__tuple t18;
err=create_component_model(a_obj(0),a_obj(1),t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,&t17,&t18);
fillvar(t17, a+17);fillvar(t18, a+18);
func_end_seterr;

func_begin(x_create_trained_component_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=-0.39;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0.79;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="auto";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.5;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="auto";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="auto";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="auto";else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8="use_polarity";else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9="false";else filltuple(a+9, t9);
__tuple t10;
__tuple t11;
err=create_trained_component_model(t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,&t10,&t11);
fillvar(t10, a+10);fillvar(t11, a+11);
func_end_seterr;

func_begin(x_clear_all_training_components);
err=clear_all_training_components();
func_end_seterr;

func_begin(x_clear_training_components);
__tuple t0;filltuple(a+0, t0);
err=clear_training_components(t0);
func_end_seterr;

func_begin(x_get_component_relations);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="model_image";else filltuple(a+3, t3);
__tuple t4;
__tuple t5;
__tuple t6;
__tuple t7;
__tuple t8;
__tuple t9;
__tuple t10;
err=get_component_relations(varp_obj(0),t1,t2,t3,&t4,&t5,&t6,&t7,&t8,&t9,&t10);
fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);fillvar(t9, a+9);fillvar(t10, a+10);
func_end_seterr;

func_begin(x_get_training_components);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="model_components";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="model_image";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="false";else filltuple(a+4, t4);
__tuple t5;
__tuple t6;
__tuple t7;
__tuple t8;
err=get_training_components(varp_obj(0),t1,t2,t3,t4,&t5,&t6,&t7,&t8);
fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);
func_end_seterr;

func_begin(x_modify_component_relations);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="all";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="all";else filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
err=modify_component_relations(t0,t1,t2,t3,t4);
func_end_seterr;

func_begin(x_deserialize_training_components);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_training_components(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_serialize_training_components);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_training_components(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_read_training_components);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=read_training_components(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_training_components);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=write_training_components(t0,t1);
func_end_seterr;

func_begin(x_cluster_model_components);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="rigidity";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.2;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=0.5;else filltuple(a+5, t5);
err=cluster_model_components(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_inspect_clustered_components);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="rigidity";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.2;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.5;else filltuple(a+4, t4);
err=inspect_clustered_components(varp_obj(0),t1,t2,t3,t4);
func_end_seterr;

func_begin(x_train_model_components);
__tuple t4;if(v_empty(4))t4="auto";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="auto";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="auto";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=0.5;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=-1;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=-1;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=-1;else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11="speed";else filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12="rigidity";else filltuple(a+12, t12);
__tuple t13;if(v_empty(13))t13=0.2;else filltuple(a+13, t13);
__tuple t14;if(v_empty(14))t14=0.5;else filltuple(a+14, t14);
__tuple t15;
err=train_model_components(a_obj(0),a_obj(1),a_obj(2),varp_obj(3),t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,&t15);
fillvar(t15, a+15);
func_end_seterr;

func_begin(x_gen_initial_components);
__tuple t2;if(v_empty(2))t2="auto";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="auto";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="auto";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="connection";else filltuple(a+5, t5);
__tuple t6;if(!v_empty(6)) filltuple(a+6, t6);
__tuple t7;if(!v_empty(7)) filltuple(a+7, t7);
err=gen_initial_components(a_obj(0),varp_obj(1),t2,t3,t4,t5,t6,t7);
func_end_seterr;

func_begin(x_get_deformable_surface_matching_result);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="sampled_scene";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;
err=get_deformable_surface_matching_result(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_clear_deformable_surface_matching_result);
__tuple t0;filltuple(a+0, t0);
err=clear_deformable_surface_matching_result(t0);
func_end_seterr;

func_begin(x_clear_deformable_surface_model);
__tuple t0;filltuple(a+0, t0);
err=clear_deformable_surface_model(t0);
func_end_seterr;

func_begin(x_deserialize_deformable_surface_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_deformable_surface_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_serialize_deformable_surface_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_deformable_surface_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_read_deformable_surface_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=read_deformable_surface_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_deformable_surface_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=write_deformable_surface_model(t0,t1);
func_end_seterr;

func_begin(x_refine_deformable_surface_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0.05;else filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(!v_empty(4)) filltuple(a+4, t4);
__tuple t5;if(!v_empty(5)) filltuple(a+5, t5);
__tuple t6;
__tuple t7;
err=refine_deformable_surface_model(t0,t1,t2,t3,t4,t5,&t6,&t7);
fillvar(t6, a+6);fillvar(t7, a+7);
func_end_seterr;

func_begin(x_find_deformable_surface_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0.05;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
__tuple t4;if(!v_empty(4)) filltuple(a+4, t4);
__tuple t5;if(!v_empty(5)) filltuple(a+5, t5);
__tuple t6;
__tuple t7;
err=find_deformable_surface_model(t0,t1,t2,t3,t4,t5,&t6,&t7);
fillvar(t6, a+6);fillvar(t7, a+7);
func_end_seterr;

func_begin(x_get_deformable_surface_model_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="sampled_model";else filltuple(a+1, t1);
__tuple t2;
err=get_deformable_surface_model_param(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_add_deformable_surface_model_reference_point);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;
err=add_deformable_surface_model_reference_point(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_add_deformable_surface_model_sample);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=add_deformable_surface_model_sample(t0,t1);
func_end_seterr;

func_begin(x_create_deformable_surface_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0.05;else filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;
err=create_deformable_surface_model(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_get_surface_matching_result);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="pose";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;
err=get_surface_matching_result(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_clear_all_surface_matching_results);
err=clear_all_surface_matching_results();
func_end_seterr;

func_begin(x_clear_surface_matching_result);
__tuple t0;filltuple(a+0, t0);
err=clear_surface_matching_result(t0);
func_end_seterr;

func_begin(x_clear_all_surface_models);
err=clear_all_surface_models();
func_end_seterr;

func_begin(x_clear_surface_model);
__tuple t0;filltuple(a+0, t0);
err=clear_surface_model(t0);
func_end_seterr;

func_begin(x_deserialize_surface_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_surface_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_serialize_surface_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_surface_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_read_surface_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=read_surface_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_surface_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=write_surface_model(t0,t1);
func_end_seterr;

func_begin(x_refine_surface_model_pose);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="false";else filltuple(a+4, t4);
__tuple t5;if(!v_empty(5)) filltuple(a+5, t5);
__tuple t6;if(!v_empty(6)) filltuple(a+6, t6);
__tuple t7;
__tuple t8;
__tuple t9;
err=refine_surface_model_pose(t0,t1,t2,t3,t4,t5,t6,&t7,&t8,&t9);
fillvar(t7, a+7);fillvar(t8, a+8);fillvar(t9, a+9);
func_end_seterr;

func_begin(x_find_surface_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0.05;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.2;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="false";else filltuple(a+5, t5);
__tuple t6;if(!v_empty(6)) filltuple(a+6, t6);
__tuple t7;if(!v_empty(7)) filltuple(a+7, t7);
__tuple t8;
__tuple t9;
__tuple t10;
err=find_surface_model(t0,t1,t2,t3,t4,t5,t6,t7,&t8,&t9,&t10);
fillvar(t8, a+8);fillvar(t9, a+9);fillvar(t10, a+10);
func_end_seterr;

func_begin(x_get_surface_model_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="diameter";else filltuple(a+1, t1);
__tuple t2;
err=get_surface_model_param(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_create_surface_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0.03;else filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;
err=create_surface_model(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_create_cam_pose_look_at_point);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="-y";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=0;else filltuple(a+7, t7);
__tuple t8;
err=create_cam_pose_look_at_point(t0,t1,t2,t3,t4,t5,t6,t7,&t8);
fillvar(t8, a+8);
func_end_seterr;

func_begin(x_convert_point_3d_spher_to_cart);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="-y";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="-z";else filltuple(a+4, t4);
__tuple t5;
__tuple t6;
__tuple t7;
err=convert_point_3d_spher_to_cart(t0,t1,t2,t3,t4,&t5,&t6,&t7);
fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);
func_end_seterr;

func_begin(x_convert_point_3d_cart_to_spher);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="-y";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="-z";else filltuple(a+4, t4);
__tuple t5;
__tuple t6;
__tuple t7;
err=convert_point_3d_cart_to_spher(t0,t1,t2,t3,t4,&t5,&t6,&t7);
fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);
func_end_seterr;

func_begin(x_clear_all_shape_model_3d);
err=clear_all_shape_model_3d();
func_end_seterr;

func_begin(x_clear_shape_model_3d);
__tuple t0;filltuple(a+0, t0);
err=clear_shape_model_3d(t0);
func_end_seterr;

func_begin(x_deserialize_shape_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_shape_model_3d(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_serialize_shape_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_shape_model_3d(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_read_shape_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=read_shape_model_3d(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_shape_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=write_shape_model_3d(t0,t1);
func_end_seterr;

func_begin(x_trans_pose_shape_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="ref_to_model";else filltuple(a+2, t2);
__tuple t3;
err=trans_pose_shape_model_3d(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_project_shape_model_3d);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="true";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=0.523599;else filltuple(a+5, t5);
err=project_shape_model_3d(varp_obj(0),t1,t2,t3,t4,t5);
func_end_seterr;

func_begin(x_get_shape_model_3d_contours);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=1;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1;else filltuple(a+3, t3);
__tuple t4;
err=get_shape_model_3d_contours(varp_obj(0),t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_get_shape_model_3d_params);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="num_levels_max";else filltuple(a+1, t1);
__tuple t2;
err=get_shape_model_3d_params(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_find_shape_model_3d);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0.7;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.9;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0;else filltuple(a+4, t4);
__tuple t5;if(!v_empty(5)) filltuple(a+5, t5);
__tuple t6;if(!v_empty(6)) filltuple(a+6, t6);
__tuple t7;
__tuple t8;
__tuple t9;
err=find_shape_model_3d(a_obj(0),t1,t2,t3,t4,t5,t6,&t7,&t8,&t9);
fillvar(t7, a+7);fillvar(t8, a+8);fillvar(t9, a+9);
func_end_seterr;

func_begin(x_create_shape_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="gba";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=-0.35;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=0.35;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=-0.35;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=0.35;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=-3.1416;else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11=3.1416;else filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12=0.3;else filltuple(a+12, t12);
__tuple t13;if(v_empty(13))t13=0.4;else filltuple(a+13, t13);
__tuple t14;if(v_empty(14))t14=10;else filltuple(a+14, t14);
__tuple t15;if(!v_empty(15)) filltuple(a+15, t15);
__tuple t16;if(!v_empty(16)) filltuple(a+16, t16);
__tuple t17;
err=create_shape_model_3d(t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,&t17);
fillvar(t17, a+17);
func_end_seterr;

func_begin(x_simplify_object_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="preserve_point_coordinates";else filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;if(!v_empty(4)) filltuple(a+4, t4);
__tuple t5;
err=simplify_object_model_3d(t0,t1,t2,t3,t4,&t5);
fillvar(t5, a+5);
func_end_seterr;

func_begin(x_distance_object_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
__tuple t4;if(!v_empty(4)) filltuple(a+4, t4);
__tuple t5;if(!v_empty(5)) filltuple(a+5, t5);
err=distance_object_model_3d(t0,t1,t2,t3,t4,t5);
func_end_seterr;

func_begin(x_union_object_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="points_surface";else filltuple(a+1, t1);
__tuple t2;
err=union_object_model_3d(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_set_object_model_3d_attrib_mod);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
err=set_object_model_3d_attrib_mod(t0,t1,t2,t3);
func_end_seterr;

func_begin(x_set_object_model_3d_attrib);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;
err=set_object_model_3d_attrib(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_gen_empty_object_model_3d);
__tuple t0;
err=gen_empty_object_model_3d(&t0);
fillvar(t0, a+0);
func_end_seterr;

func_begin(x_sample_object_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="fast";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0.05;else filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;if(!v_empty(4)) filltuple(a+4, t4);
__tuple t5;
err=sample_object_model_3d(t0,t1,t2,t3,t4,&t5);
fillvar(t5, a+5);
func_end_seterr;

func_begin(x_register_object_model_3d_global);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="global";else filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;if(!v_empty(4)) filltuple(a+4, t4);
__tuple t5;if(!v_empty(5)) filltuple(a+5, t5);
__tuple t6;
__tuple t7;
err=register_object_model_3d_global(t0,t1,t2,t3,t4,t5,&t6,&t7);
fillvar(t6, a+6);fillvar(t7, a+7);
func_end_seterr;

func_begin(x_register_object_model_3d_pair);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="matching";else filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;if(!v_empty(4)) filltuple(a+4, t4);
__tuple t5;
__tuple t6;
err=register_object_model_3d_pair(t0,t1,t2,t3,t4,&t5,&t6);
fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_gen_object_model_3d_from_points);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;
err=gen_object_model_3d_from_points(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_gen_box_object_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;
err=gen_box_object_model_3d(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_gen_plane_object_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;
err=gen_plane_object_model_3d(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_gen_sphere_object_model_3d_center);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;
err=gen_sphere_object_model_3d_center(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_gen_sphere_object_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=gen_sphere_object_model_3d(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_gen_cylinder_object_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;
err=gen_cylinder_object_model_3d(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_smallest_bounding_box_object_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="oriented";else filltuple(a+1, t1);
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
err=smallest_bounding_box_object_model_3d(t0,t1,&t2,&t3,&t4,&t5);
fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_smallest_sphere_object_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
err=smallest_sphere_object_model_3d(t0,&t1,&t2);
fillvar(t1, a+1);fillvar(t2, a+2);
func_end_seterr;

func_begin(x_intersect_plane_object_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1)){const char* vs1[]={"0","0","0","0","0","0","0"};arr2tupleS(vs1, 7, t1);}else filltuple(a+1, t1);
__tuple t2;
err=intersect_plane_object_model_3d(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_convex_hull_object_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=convex_hull_object_model_3d(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_select_object_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="has_triangles";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="and";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=1;else filltuple(a+4, t4);
__tuple t5;
err=select_object_model_3d(t0,t1,t2,t3,t4,&t5);
fillvar(t5, a+5);
func_end_seterr;

func_begin(x_area_object_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=area_object_model_3d(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_max_diameter_object_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=max_diameter_object_model_3d(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_moments_object_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="mean_points";else filltuple(a+1, t1);
__tuple t2;
err=moments_object_model_3d(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_volume_object_model_3d_relative_to_plane);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1)){const char* vs1[]={"0","0","0","0","0","0","0"};arr2tupleS(vs1, 7, t1);}else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="signed";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="true";else filltuple(a+3, t3);
__tuple t4;
err=volume_object_model_3d_relative_to_plane(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_reduce_object_model_3d_by_view);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;
err=reduce_object_model_3d_by_view(a_obj(0),t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_connection_object_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="distance_3d";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=1.0;else filltuple(a+2, t2);
__tuple t3;
err=connection_object_model_3d(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_select_points_object_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="point_coord_z";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0.5;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1.0;else filltuple(a+3, t3);
__tuple t4;
err=select_points_object_model_3d(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_get_disp_object_model_3d_info);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="depth";else filltuple(a+3, t3);
__tuple t4;
err=get_disp_object_model_3d_info(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_render_object_model_3d);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(!v_empty(4)) filltuple(a+4, t4);
__tuple t5;if(!v_empty(5)) filltuple(a+5, t5);
err=render_object_model_3d(varp_obj(0),t1,t2,t3,t4,t5);
func_end_seterr;

func_begin(x_disp_object_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;if(!v_empty(4)) filltuple(a+4, t4);
__tuple t5;if(!v_empty(5)) filltuple(a+5, t5);
err=disp_object_model_3d(t0,t1,t2,t3,t4,t5);
func_end_seterr;

func_begin(x_copy_object_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="all";else filltuple(a+1, t1);
__tuple t2;
err=copy_object_model_3d(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_prepare_object_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="shape_based_matching_3d";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="true";else filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;if(!v_empty(4)) filltuple(a+4, t4);
err=prepare_object_model_3d(t0,t1,t2,t3,t4);
func_end_seterr;

func_begin(x_object_model_3d_to_xyz);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="cartesian";else filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;filltuple(a+6, t6);
err=object_model_3d_to_xyz(varp_obj(0),varp_obj(1),varp_obj(2),t3,t4,t5,t6);
func_end_seterr;

func_begin(x_xyz_to_object_model_3d);
__tuple t3;
err=xyz_to_object_model_3d(a_obj(0),a_obj(1),a_obj(2),&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_get_object_model_3d_params);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="num_points";else filltuple(a+1, t1);
__tuple t2;
err=get_object_model_3d_params(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_project_object_model_3d);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(!v_empty(4)) filltuple(a+4, t4);
__tuple t5;if(!v_empty(5)) filltuple(a+5, t5);
err=project_object_model_3d(varp_obj(0),t1,t2,t3,t4,t5);
func_end_seterr;

func_begin(x_rigid_trans_object_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=rigid_trans_object_model_3d(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_projective_trans_object_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=projective_trans_object_model_3d(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_affine_trans_object_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=affine_trans_object_model_3d(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_clear_all_object_model_3d);
err=clear_all_object_model_3d();
func_end_seterr;

func_begin(x_clear_object_model_3d);
__tuple t0;filltuple(a+0, t0);
err=clear_object_model_3d(t0);
func_end_seterr;

func_begin(x_serialize_object_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_object_model_3d(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_deserialize_object_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_object_model_3d(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_object_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="om3";else filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;if(!v_empty(4)) filltuple(a+4, t4);
err=write_object_model_3d(t0,t1,t2,t3,t4);
func_end_seterr;

func_begin(x_read_object_model_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="m";else filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;
__tuple t5;
err=read_object_model_3d(t0,t1,t2,t3,&t4,&t5);
fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_read_object_model_3d_dxf);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="m";else filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;
__tuple t5;
err=read_object_model_3d_dxf(t0,t1,t2,t3,&t4,&t5);
fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_read_kalman);
__tuple t0;if(v_empty(0))t0="kalman.init";else filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
err=read_kalman(t0,&t1,&t2,&t3,&t4);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_update_kalman);
__tuple t0;if(v_empty(0))t0="kalman.updt";else filltuple(a+0, t0);
__tuple t1;if(v_empty(1)){const char* vs1[]={"3","1","0"};arr2tupleS(vs1, 3, t1);}else filltuple(a+1, t1);
__tuple t2;if(v_empty(2)){const char* vs2[]={"1.0","1.0","0.5","0.0","1.0","1.0","0.0","0.0","1.0","1.0","0.0","0.0","54.3","37.9","48.0","37.9","34.3","42.5","48.0","42.5","43.7"};arr2tupleS(vs2, 21, t2);}else filltuple(a+2, t2);
__tuple t3;if(v_empty(3)){const char* vs3[]={"1","2"};arr2tupleS(vs3, 2, t3);}else filltuple(a+3, t3);
__tuple t4;
__tuple t5;
__tuple t6;
err=update_kalman(t0,t1,t2,t3,&t4,&t5,&t6);
fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_filter_kalman);
__tuple t0;if(v_empty(0)){const char* vs0[]={"3","1","0"};arr2tupleS(vs0, 3, t0);}else filltuple(a+0, t0);
__tuple t1;if(v_empty(1)){const char* vs1[]={"1.0","1.0","0.5","0.0","1.0","1.0","0.0","0.0","1.0","1.0","0.0","0.0","54.3","37.9","48.0","37.9","34.3","42.5","48.0","42.5","43.7"};arr2tupleS(vs1, 21, t1);}else filltuple(a+1, t1);
__tuple t2;if(v_empty(2)){const char* vs2[]={"1.2","1.0"};arr2tupleS(vs2, 2, t2);}else filltuple(a+2, t2);
__tuple t3;if(v_empty(3)){const char* vs3[]={"0.0","0.0","0.0","0.0","180.5","0.0","0.0","0.0","100.0","0.0","100.0","0.0"};arr2tupleS(vs3, 12, t3);}else filltuple(a+3, t3);
__tuple t4;
__tuple t5;
err=filter_kalman(t0,t1,t2,t3,&t4,&t5);
fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_query_operator_info);
__tuple t0;
err=query_operator_info(&t0);
fillvar(t0, a+0);
func_end_seterr;

func_begin(x_query_param_info);
__tuple t0;
err=query_param_info(&t0);
fillvar(t0, a+0);
func_end_seterr;

func_begin(x_get_operator_name);
__tuple t0;if(v_empty(0))t0="info";else filltuple(a+0, t0);
__tuple t1;
err=get_operator_name(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_get_param_types);
__tuple t0;if(v_empty(0))t0="get_param_types";else filltuple(a+0, t0);
__tuple t1;
__tuple t2;
err=get_param_types(t0,&t1,&t2);
fillvar(t1, a+1);fillvar(t2, a+2);
func_end_seterr;

func_begin(x_get_param_num);
__tuple t0;if(v_empty(0))t0="get_param_num";else filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
__tuple t6;
err=get_param_num(t0,&t1,&t2,&t3,&t4,&t5,&t6);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_get_param_names);
__tuple t0;if(v_empty(0))t0="get_param_names";else filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
err=get_param_names(t0,&t1,&t2,&t3,&t4);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_get_operator_info);
__tuple t0;if(v_empty(0))t0="get_operator_info";else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="abstract";else filltuple(a+1, t1);
__tuple t2;
err=get_operator_info(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_get_param_info);
__tuple t0;if(v_empty(0))t0="get_param_info";else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="Slot";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="description";else filltuple(a+2, t2);
__tuple t3;
err=get_param_info(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_search_operator);
__tuple t0;if(v_empty(0))t0="Information";else filltuple(a+0, t0);
__tuple t1;
err=search_operator(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_get_keywords);
__tuple t0;if(v_empty(0))t0="get_keywords";else filltuple(a+0, t0);
__tuple t1;
err=get_keywords(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_get_chapter_info);
__tuple t0;if(v_empty(0))t0="";else filltuple(a+0, t0);
__tuple t1;
err=get_chapter_info(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_channels_to_image);
err=channels_to_image(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_image_to_channels);
err=image_to_channels(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_compose7);
err=compose7(a_obj(0),a_obj(1),a_obj(2),a_obj(3),a_obj(4),a_obj(5),a_obj(6),varp_obj(7));
func_end_seterr;

func_begin(x_compose6);
err=compose6(a_obj(0),a_obj(1),a_obj(2),a_obj(3),a_obj(4),a_obj(5),varp_obj(6));
func_end_seterr;

func_begin(x_compose5);
err=compose5(a_obj(0),a_obj(1),a_obj(2),a_obj(3),a_obj(4),varp_obj(5));
func_end_seterr;

func_begin(x_compose4);
err=compose4(a_obj(0),a_obj(1),a_obj(2),a_obj(3),varp_obj(4));
func_end_seterr;

func_begin(x_compose3);
err=compose3(a_obj(0),a_obj(1),a_obj(2),varp_obj(3));
func_end_seterr;

func_begin(x_compose2);
err=compose2(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_decompose7);
err=decompose7(a_obj(0),varp_obj(1),varp_obj(2),varp_obj(3),varp_obj(4),varp_obj(5),varp_obj(6),varp_obj(7));
func_end_seterr;

func_begin(x_decompose6);
err=decompose6(a_obj(0),varp_obj(1),varp_obj(2),varp_obj(3),varp_obj(4),varp_obj(5),varp_obj(6));
func_end_seterr;

func_begin(x_decompose5);
err=decompose5(a_obj(0),varp_obj(1),varp_obj(2),varp_obj(3),varp_obj(4),varp_obj(5));
func_end_seterr;

func_begin(x_decompose4);
err=decompose4(a_obj(0),varp_obj(1),varp_obj(2),varp_obj(3),varp_obj(4));
func_end_seterr;

func_begin(x_decompose3);
err=decompose3(a_obj(0),varp_obj(1),varp_obj(2),varp_obj(3));
func_end_seterr;

func_begin(x_decompose2);
err=decompose2(a_obj(0),varp_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_count_channels);
__tuple t1;
err=count_channels(a_obj(0),&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_append_channel);
err=append_channel(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_access_channel);
__tuple t2;if(v_empty(2))t2=1;else filltuple(a+2, t2);
err=access_channel(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_tile_images_offset);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=-1;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=-1;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=-1;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=-1;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=512;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=512;else filltuple(a+9, t9);
err=tile_images_offset(a_obj(0),varp_obj(1),t2,t3,t4,t5,t6,t7,t8,t9);
func_end_seterr;

func_begin(x_tile_images);
__tuple t2;if(v_empty(2))t2=1;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="vertical";else filltuple(a+3, t3);
err=tile_images(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_tile_channels);
__tuple t2;if(v_empty(2))t2=1;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="vertical";else filltuple(a+3, t3);
err=tile_channels(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_crop_domain);
err=crop_domain(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_crop_rectangle1);
__tuple t2;if(v_empty(2))t2=100;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=100;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=200;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=200;else filltuple(a+5, t5);
err=crop_rectangle1(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_crop_part);
__tuple t2;if(v_empty(2))t2=100;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=100;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=128;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=128;else filltuple(a+5, t5);
err=crop_part(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_change_format);
__tuple t2;if(v_empty(2))t2=512;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=512;else filltuple(a+3, t3);
err=change_format(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_change_domain);
err=change_domain(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_add_channels);
err=add_channels(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_rectangle1_domain);
__tuple t2;if(v_empty(2))t2=100;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=100;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=200;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=200;else filltuple(a+5, t5);
err=rectangle1_domain(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_reduce_domain);
err=reduce_domain(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_full_domain);
err=full_domain(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_get_domain);
err=get_domain(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_hough_circles);
__tuple t2;if(v_empty(2))t2=12;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=60;else filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
err=hough_circles(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_hough_circle_trans);
__tuple t2;if(v_empty(2))t2=12;else filltuple(a+2, t2);
err=hough_circle_trans(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_hough_lines_dir);
__tuple t3;if(v_empty(3))t3=2;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=4;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="mean";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=5;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=100;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=5;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=5;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10="true";else filltuple(a+10, t10);
__tuple t11;
__tuple t12;
err=hough_lines_dir(a_obj(0),varp_obj(1),varp_obj(2),t3,t4,t5,t6,t7,t8,t9,t10,&t11,&t12);
fillvar(t11, a+11);fillvar(t12, a+12);
func_end_seterr;

func_begin(x_hough_line_trans_dir);
__tuple t2;if(v_empty(2))t2=2;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=4;else filltuple(a+3, t3);
err=hough_line_trans_dir(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_hough_lines);
__tuple t1;if(v_empty(1))t1=4;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=100;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=5;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=5;else filltuple(a+4, t4);
__tuple t5;
__tuple t6;
err=hough_lines(a_obj(0),t1,t2,t3,t4,&t5,&t6);
fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_hough_line_trans);
__tuple t2;if(v_empty(2))t2=4;else filltuple(a+2, t2);
err=hough_line_trans(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_select_matching_lines);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=7;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=100;else filltuple(a+5, t5);
__tuple t6;
__tuple t7;
err=select_matching_lines(a_obj(0),varp_obj(1),t2,t3,t4,t5,&t6,&t7);
fillvar(t6, a+6);fillvar(t7, a+7);
func_end_seterr;

func_begin(x_find_rectification_grid);
__tuple t2;if(v_empty(2))t2=8.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=7.5;else filltuple(a+3, t3);
err=find_rectification_grid(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_create_rectification_grid);
__tuple t0;if(v_empty(0))t0=0.17;else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=17;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="rectification_grid.ps";else filltuple(a+2, t2);
err=create_rectification_grid(t0,t1,t2);
func_end_seterr;

func_begin(x_connect_grid_points);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.9;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=5.5;else filltuple(a+5, t5);
err=connect_grid_points(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_gen_grid_rectification_map);
__tuple t4;filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="auto";else filltuple(a+5, t5);
__tuple t6;filltuple(a+6, t6);
__tuple t7;filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8="bilinear";else filltuple(a+8, t8);
err=gen_grid_rectification_map(a_obj(0),a_obj(1),varp_obj(2),varp_obj(3),t4,t5,t6,t7,t8);
func_end_seterr;

func_begin(x_gen_arbitrary_distortion_map);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="bilinear";else filltuple(a+7, t7);
err=gen_arbitrary_distortion_map(varp_obj(0),t1,t2,t3,t4,t5,t6,t7);
func_end_seterr;

func_begin(x_get_window_background_image);
__tuple t1;filltuple(a+1, t1);
err=get_window_background_image(varp_obj(0),t1);
func_end_seterr;

func_begin(x_set_drawing_object_callback);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
err=set_drawing_object_callback(t0,t1,t2);
func_end_seterr;

func_begin(x_detach_background_from_window);
__tuple t0;filltuple(a+0, t0);
err=detach_background_from_window(t0);
func_end_seterr;

func_begin(x_attach_background_to_window);
__tuple t1;filltuple(a+1, t1);
err=attach_background_to_window(a_obj(0),t1);
func_end_seterr;

func_begin(x_detach_drawing_object_from_window);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=detach_drawing_object_from_window(t0,t1);
func_end_seterr;

func_begin(x_attach_drawing_object_to_window);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=attach_drawing_object_to_window(t0,t1);
func_end_seterr;

func_begin(x_update_window_pose);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="rotate";else filltuple(a+5, t5);
err=update_window_pose(t0,t1,t2,t3,t4,t5);
func_end_seterr;

func_begin(x_unproject_coordinates);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;
__tuple t5;
__tuple t6;
err=unproject_coordinates(a_obj(0),t1,t2,t3,&t4,&t5,&t6);
fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_get_os_window_handle);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
err=get_os_window_handle(t0,&t1,&t2);
fillvar(t1, a+1);fillvar(t2, a+2);
func_end_seterr;

func_begin(x_set_window_dc);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=set_window_dc(t0,t1);
func_end_seterr;

func_begin(x_new_extern_window);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=512;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=512;else filltuple(a+4, t4);
__tuple t5;
err=new_extern_window(t0,t1,t2,t3,t4,&t5);
fillvar(t5, a+5);
func_end_seterr;

func_begin(x_slide_image);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
err=slide_image(t0,t1,t2);
func_end_seterr;

func_begin(x_set_window_type);
__tuple t0;if(v_empty(0))t0="X-Window";else filltuple(a+0, t0);
err=set_window_type(t0);
func_end_seterr;

func_begin(x_set_window_extents);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=512;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=512;else filltuple(a+4, t4);
err=set_window_extents(t0,t1,t2,t3,t4);
func_end_seterr;

func_begin(x_get_window_attr);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=get_window_attr(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_set_window_attr);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=set_window_attr(t0,t1);
func_end_seterr;

func_begin(x_query_window_type);
__tuple t0;
err=query_window_type(&t0);
fillvar(t0, a+0);
func_end_seterr;

func_begin(x_open_window);
__tuple t0;if(v_empty(0))t0=0;else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=256;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=256;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="visible";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="";else filltuple(a+6, t6);
__tuple t7;
err=open_window(t0,t1,t2,t3,t4,t5,t6,&t7);
fillvar(t7, a+7);
func_end_seterr;

func_begin(x_open_textwindow);
__tuple t0;if(v_empty(0))t0=0;else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=256;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=256;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=2;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="white";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="black";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=0;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8="visible";else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9="";else filltuple(a+9, t9);
__tuple t10;
err=open_textwindow(t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,&t10);
fillvar(t10, a+10);
func_end_seterr;

func_begin(x_move_rectangle);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=64;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=64;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=64;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=64;else filltuple(a+6, t6);
err=move_rectangle(t0,t1,t2,t3,t4,t5,t6);
func_end_seterr;

func_begin(x_get_window_type);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=get_window_type(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_get_window_pointer3);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
err=get_window_pointer3(t0,&t1,&t2,&t3,&t4,&t5);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_get_window_extents);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
err=get_window_extents(t0,&t1,&t2,&t3,&t4);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_dump_window_image);
__tuple t1;filltuple(a+1, t1);
err=dump_window_image(varp_obj(0),t1);
func_end_seterr;

func_begin(x_dump_window);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="postscript";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="halcon_dump";else filltuple(a+2, t2);
err=dump_window(t0,t1,t2);
func_end_seterr;

func_begin(x_copy_rectangle);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=128;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=128;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=0;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=0;else filltuple(a+7, t7);
err=copy_rectangle(t0,t1,t2,t3,t4,t5,t6,t7);
func_end_seterr;

func_begin(x_close_window);
__tuple t0;filltuple(a+0, t0);
err=close_window(t0);
func_end_seterr;

func_begin(x_clear_window);
__tuple t0;filltuple(a+0, t0);
err=clear_window(t0);
func_end_seterr;

func_begin(x_clear_rectangle);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=10;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=10;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=118;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=118;else filltuple(a+4, t4);
err=clear_rectangle(t0,t1,t2,t3,t4);
func_end_seterr;

func_begin(x_write_string);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="hello";else filltuple(a+1, t1);
err=write_string(t0,t1);
func_end_seterr;

func_begin(x_set_tshape);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="invisible";else filltuple(a+1, t1);
err=set_tshape(t0,t1);
func_end_seterr;

func_begin(x_set_tposition);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=24;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=12;else filltuple(a+2, t2);
err=set_tposition(t0,t1,t2);
func_end_seterr;

func_begin(x_read_string);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=32;else filltuple(a+2, t2);
__tuple t3;
err=read_string(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_read_char);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
err=read_char(t0,&t1,&t2);
fillvar(t1, a+1);fillvar(t2, a+2);
func_end_seterr;

func_begin(x_new_line);
__tuple t0;filltuple(a+0, t0);
err=new_line(t0);
func_end_seterr;

func_begin(x_get_tshape);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=get_tshape(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_get_tposition);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
err=get_tposition(t0,&t1,&t2);
fillvar(t1, a+1);fillvar(t2, a+2);
func_end_seterr;

func_begin(x_get_font_extents);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
err=get_font_extents(t0,&t1,&t2,&t3,&t4);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_get_string_extents);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="test_string";else filltuple(a+1, t1);
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
err=get_string_extents(t0,t1,&t2,&t3,&t4,&t5);
fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_query_font);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=query_font(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_query_tshape);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=query_tshape(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_set_font);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=set_font(t0,t1);
func_end_seterr;

func_begin(x_get_font);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=get_font(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_get_display_scene_3d_info);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="depth";else filltuple(a+4, t4);
__tuple t5;
err=get_display_scene_3d_info(t0,t1,t2,t3,t4,&t5);
fillvar(t5, a+5);
func_end_seterr;

func_begin(x_set_scene_3d_to_world_pose);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=set_scene_3d_to_world_pose(t0,t1);
func_end_seterr;

func_begin(x_set_scene_3d_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="quality";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="high";else filltuple(a+2, t2);
err=set_scene_3d_param(t0,t1,t2);
func_end_seterr;

func_begin(x_set_scene_3d_light_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="ambient";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3)){const char* vs3[]={"0.2","0.2","0.2"};arr2tupleS(vs3, 3, t3);}else filltuple(a+3, t3);
err=set_scene_3d_light_param(t0,t1,t2,t3);
func_end_seterr;

func_begin(x_set_scene_3d_instance_pose);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
err=set_scene_3d_instance_pose(t0,t1,t2);
func_end_seterr;

func_begin(x_set_scene_3d_instance_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="color";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="green";else filltuple(a+3, t3);
err=set_scene_3d_instance_param(t0,t1,t2,t3);
func_end_seterr;

func_begin(x_set_scene_3d_camera_pose);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
err=set_scene_3d_camera_pose(t0,t1,t2);
func_end_seterr;

func_begin(x_render_scene_3d);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
err=render_scene_3d(varp_obj(0),t1,t2);
func_end_seterr;

func_begin(x_remove_scene_3d_light);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=remove_scene_3d_light(t0,t1);
func_end_seterr;

func_begin(x_remove_scene_3d_instance);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=remove_scene_3d_instance(t0,t1);
func_end_seterr;

func_begin(x_remove_scene_3d_camera);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=remove_scene_3d_camera(t0,t1);
func_end_seterr;

func_begin(x_display_scene_3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
err=display_scene_3d(t0,t1,t2);
func_end_seterr;

func_begin(x_add_scene_3d_light);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1)){const char* vs1[]={"-100.0","-100.0","0.0"};arr2tupleS(vs1, 3, t1);}else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="point_light";else filltuple(a+2, t2);
__tuple t3;
err=add_scene_3d_light(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_add_scene_3d_instance);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;
err=add_scene_3d_instance(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_add_scene_3d_camera);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=add_scene_3d_camera(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_clear_scene_3d);
__tuple t0;filltuple(a+0, t0);
err=clear_scene_3d(t0);
func_end_seterr;

func_begin(x_create_scene_3d);
__tuple t0;
err=create_scene_3d(&t0);
fillvar(t0, a+0);
func_end_seterr;

func_begin(x_get_window_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="save_depth_buffer";else filltuple(a+1, t1);
__tuple t2;
err=get_window_param(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_set_window_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="save_depth_buffer";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="true";else filltuple(a+2, t2);
err=set_window_param(t0,t1,t2);
func_end_seterr;

func_begin(x_set_shape);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="original";else filltuple(a+1, t1);
err=set_shape(t0,t1);
func_end_seterr;

func_begin(x_set_rgb);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=255;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
err=set_rgb(t0,t1,t2,t3);
func_end_seterr;

func_begin(x_set_pixel);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=128;else filltuple(a+1, t1);
err=set_pixel(t0,t1);
func_end_seterr;

func_begin(x_set_part_style);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0;else filltuple(a+1, t1);
err=set_part_style(t0,t1);
func_end_seterr;

func_begin(x_set_part);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=-1;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=-1;else filltuple(a+4, t4);
err=set_part(t0,t1,t2,t3,t4);
func_end_seterr;

func_begin(x_set_paint);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="default";else filltuple(a+1, t1);
err=set_paint(t0,t1);
func_end_seterr;

func_begin(x_set_line_width);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=1;else filltuple(a+1, t1);
err=set_line_width(t0,t1);
func_end_seterr;

func_begin(x_set_line_style);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(!v_empty(1)) filltuple(a+1, t1);
err=set_line_style(t0,t1);
func_end_seterr;

func_begin(x_set_line_approx);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0;else filltuple(a+1, t1);
err=set_line_approx(t0,t1);
func_end_seterr;

func_begin(x_set_insert);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="copy";else filltuple(a+1, t1);
err=set_insert(t0,t1);
func_end_seterr;

func_begin(x_set_hsi);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=30;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=255;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=84;else filltuple(a+3, t3);
err=set_hsi(t0,t1,t2,t3);
func_end_seterr;

func_begin(x_set_gray);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=255;else filltuple(a+1, t1);
err=set_gray(t0,t1);
func_end_seterr;

func_begin(x_set_draw);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="fill";else filltuple(a+1, t1);
err=set_draw(t0,t1);
func_end_seterr;

func_begin(x_set_comprise);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="object";else filltuple(a+1, t1);
err=set_comprise(t0,t1);
func_end_seterr;

func_begin(x_set_colored);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=12;else filltuple(a+1, t1);
err=set_colored(t0,t1);
func_end_seterr;

func_begin(x_set_color);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="white";else filltuple(a+1, t1);
err=set_color(t0,t1);
func_end_seterr;

func_begin(x_get_shape);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=get_shape(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_get_rgb);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
err=get_rgb(t0,&t1,&t2,&t3);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_get_pixel);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=get_pixel(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_get_part_style);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=get_part_style(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_get_part);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
err=get_part(t0,&t1,&t2,&t3,&t4);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_get_paint);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=get_paint(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_get_line_width);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=get_line_width(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_get_line_style);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=get_line_style(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_get_line_approx);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=get_line_approx(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_get_insert);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=get_insert(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_get_hsi);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
err=get_hsi(t0,&t1,&t2,&t3);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_get_draw);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=get_draw(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_get_comprise);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=get_comprise(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_query_shape);
__tuple t0;
err=query_shape(&t0);
fillvar(t0, a+0);
func_end_seterr;

func_begin(x_query_paint);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=query_paint(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_query_line_width);
__tuple t0;
__tuple t1;
err=query_line_width(&t0,&t1);
fillvar(t0, a+0);fillvar(t1, a+1);
func_end_seterr;

func_begin(x_query_insert);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=query_insert(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_query_gray);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=query_gray(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_query_colored);
__tuple t0;
err=query_colored(&t0);
fillvar(t0, a+0);
func_end_seterr;

func_begin(x_query_all_colors);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=query_all_colors(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_query_color);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=query_color(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_get_icon);
__tuple t1;filltuple(a+1, t1);
err=get_icon(varp_obj(0),t1);
func_end_seterr;

func_begin(x_set_icon);
__tuple t1;filltuple(a+1, t1);
err=set_icon(a_obj(0),t1);
func_end_seterr;

func_begin(x_disp_region);
__tuple t1;filltuple(a+1, t1);
err=disp_region(a_obj(0),t1);
func_end_seterr;

func_begin(x_disp_rectangle2);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=48;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=64;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=48;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=32;else filltuple(a+5, t5);
err=disp_rectangle2(t0,t1,t2,t3,t4,t5);
func_end_seterr;

func_begin(x_disp_rectangle1);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=16;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=16;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=48;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=80;else filltuple(a+4, t4);
err=disp_rectangle1(t0,t1,t2,t3,t4);
func_end_seterr;

func_begin(x_disp_polygon);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1)){const char* vs1[]={"16","80","80"};arr2tupleS(vs1, 3, t1);}else filltuple(a+1, t1);
__tuple t2;if(v_empty(2)){const char* vs2[]={"48","16","80"};arr2tupleS(vs2, 3, t2);}else filltuple(a+2, t2);
err=disp_polygon(t0,t1,t2);
func_end_seterr;

func_begin(x_disp_line);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=32.0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=32.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=64.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=64.0;else filltuple(a+4, t4);
err=disp_line(t0,t1,t2,t3,t4);
func_end_seterr;

func_begin(x_disp_cross);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=32.0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=32.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=6.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.0;else filltuple(a+4, t4);
err=disp_cross(t0,t1,t2,t3,t4);
func_end_seterr;

func_begin(x_disp_image);
__tuple t1;filltuple(a+1, t1);
err=disp_image(a_obj(0),t1);
func_end_seterr;

func_begin(x_disp_channel);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=1;else filltuple(a+2, t2);
err=disp_channel(a_obj(0),t1,t2);
func_end_seterr;

func_begin(x_disp_color);
__tuple t1;filltuple(a+1, t1);
err=disp_color(a_obj(0),t1);
func_end_seterr;

func_begin(x_disp_ellipse);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=64;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=64;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=24.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=14.0;else filltuple(a+5, t5);
err=disp_ellipse(t0,t1,t2,t3,t4,t5);
func_end_seterr;

func_begin(x_disp_distribution);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=256;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=256;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=1;else filltuple(a+4, t4);
err=disp_distribution(t0,t1,t2,t3,t4);
func_end_seterr;

func_begin(x_disp_circle);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=64;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=64;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=64;else filltuple(a+3, t3);
err=disp_circle(t0,t1,t2,t3);
func_end_seterr;

func_begin(x_disp_arrow);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=10.0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=10.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=118.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=118.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=1.0;else filltuple(a+5, t5);
err=disp_arrow(t0,t1,t2,t3,t4,t5);
func_end_seterr;

func_begin(x_disp_arc);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=64;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=64;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=3.1415926;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=32;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=32;else filltuple(a+5, t5);
err=disp_arc(t0,t1,t2,t3,t4,t5);
func_end_seterr;

func_begin(x_disp_obj);
__tuple t1;filltuple(a+1, t1);
err=disp_obj(a_obj(0),t1);
func_end_seterr;

func_begin(x_set_mshape);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="arrow";else filltuple(a+1, t1);
err=set_mshape(t0,t1);
func_end_seterr;

func_begin(x_get_mshape);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=get_mshape(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_query_mshape);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=query_mshape(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_get_mposition_sub_pix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
err=get_mposition_sub_pix(t0,&t1,&t2,&t3);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_get_mposition);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
err=get_mposition(t0,&t1,&t2,&t3);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_get_mbutton_sub_pix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
err=get_mbutton_sub_pix(t0,&t1,&t2,&t3);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_get_mbutton);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
err=get_mbutton(t0,&t1,&t2,&t3);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_write_lut);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="/tmp/lut";else filltuple(a+1, t1);
err=write_lut(t0,t1);
func_end_seterr;

func_begin(x_disp_lut);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=128;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=128;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1;else filltuple(a+3, t3);
err=disp_lut(t0,t1,t2,t3);
func_end_seterr;

func_begin(x_query_lut);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=query_lut(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_draw_lut);
__tuple t0;filltuple(a+0, t0);
err=draw_lut(t0);
func_end_seterr;

func_begin(x_get_lut_style);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
err=get_lut_style(t0,&t1,&t2,&t3);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_set_lut_style);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0.0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=1.5;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1.5;else filltuple(a+3, t3);
err=set_lut_style(t0,t1,t2,t3);
func_end_seterr;

func_begin(x_get_lut);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=get_lut(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_set_lut);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="default";else filltuple(a+1, t1);
err=set_lut(t0,t1);
func_end_seterr;

func_begin(x_get_fix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=get_fix(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_set_fix);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="true";else filltuple(a+1, t1);
err=set_fix(t0,t1);
func_end_seterr;

func_begin(x_get_fixed_lut);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=get_fixed_lut(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_set_fixed_lut);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="true";else filltuple(a+1, t1);
err=set_fixed_lut(t0,t1);
func_end_seterr;

func_begin(x_gnuplot_plot_funct_1d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=gnuplot_plot_funct_1d(t0,t1);
func_end_seterr;

func_begin(x_gnuplot_plot_ctrl);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=gnuplot_plot_ctrl(t0,t1);
func_end_seterr;

func_begin(x_gnuplot_plot_image);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=64;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=64;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=60;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=30;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="hidden3d";else filltuple(a+6, t6);
err=gnuplot_plot_image(a_obj(0),t1,t2,t3,t4,t5,t6);
func_end_seterr;

func_begin(x_gnuplot_close);
__tuple t0;filltuple(a+0, t0);
err=gnuplot_close(t0);
func_end_seterr;

func_begin(x_gnuplot_open_file);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=gnuplot_open_file(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_gnuplot_open_pipe);
__tuple t0;
err=gnuplot_open_pipe(&t0);
fillvar(t0, a+0);
func_end_seterr;

func_begin(x_create_drawing_object_text);
__tuple t0;if(v_empty(0))t0=12;else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=12;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="Text";else filltuple(a+2, t2);
__tuple t3;
err=create_drawing_object_text(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_get_drawing_object_iconic);
__tuple t1;filltuple(a+1, t1);
err=get_drawing_object_iconic(varp_obj(0),t1);
func_end_seterr;

func_begin(x_clear_drawing_object);
__tuple t0;filltuple(a+0, t0);
err=clear_drawing_object(t0);
func_end_seterr;

func_begin(x_set_drawing_object_params);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
err=set_drawing_object_params(t0,t1,t2);
func_end_seterr;

func_begin(x_get_drawing_object_params);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=get_drawing_object_params(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_set_drawing_object_xld);
__tuple t1;filltuple(a+1, t1);
err=set_drawing_object_xld(a_obj(0),t1);
func_end_seterr;

func_begin(x_create_drawing_object_xld);
__tuple t0;if(v_empty(0)){const char* vs0[]={"100","200","200","100"};arr2tupleS(vs0, 4, t0);}else filltuple(a+0, t0);
__tuple t1;if(v_empty(1)){const char* vs1[]={"100","100","200","200"};arr2tupleS(vs1, 4, t1);}else filltuple(a+1, t1);
__tuple t2;
err=create_drawing_object_xld(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_create_drawing_object_circle_sector);
__tuple t0;if(v_empty(0))t0=100;else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=100;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=80;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=3.14159;else filltuple(a+4, t4);
__tuple t5;
err=create_drawing_object_circle_sector(t0,t1,t2,t3,t4,&t5);
fillvar(t5, a+5);
func_end_seterr;

func_begin(x_create_drawing_object_ellipse_sector);
__tuple t0;if(v_empty(0))t0=200;else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=200;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=100;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=60;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=0;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=3.14159;else filltuple(a+6, t6);
__tuple t7;
err=create_drawing_object_ellipse_sector(t0,t1,t2,t3,t4,t5,t6,&t7);
fillvar(t7, a+7);
func_end_seterr;

func_begin(x_create_drawing_object_line);
__tuple t0;if(v_empty(0))t0=100;else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=100;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=200;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=200;else filltuple(a+3, t3);
__tuple t4;
err=create_drawing_object_line(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_create_drawing_object_circle);
__tuple t0;if(v_empty(0))t0=100;else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=100;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=80;else filltuple(a+2, t2);
__tuple t3;
err=create_drawing_object_circle(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_create_drawing_object_ellipse);
__tuple t0;if(v_empty(0))t0=200;else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=200;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=100;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=60;else filltuple(a+4, t4);
__tuple t5;
err=create_drawing_object_ellipse(t0,t1,t2,t3,t4,&t5);
fillvar(t5, a+5);
func_end_seterr;

func_begin(x_create_drawing_object_rectangle2);
__tuple t0;if(v_empty(0))t0=150;else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=150;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=100;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=100;else filltuple(a+4, t4);
__tuple t5;
err=create_drawing_object_rectangle2(t0,t1,t2,t3,t4,&t5);
fillvar(t5, a+5);
func_end_seterr;

func_begin(x_create_drawing_object_rectangle1);
__tuple t0;if(v_empty(0))t0=100;else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=100;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=200;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=200;else filltuple(a+3, t3);
__tuple t4;
err=create_drawing_object_rectangle1(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_drag_region3);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=100;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=100;else filltuple(a+5, t5);
err=drag_region3(a_obj(0),a_obj(1),varp_obj(2),t3,t4,t5);
func_end_seterr;

func_begin(x_drag_region2);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=100;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=100;else filltuple(a+4, t4);
err=drag_region2(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_drag_region1);
__tuple t2;filltuple(a+2, t2);
err=drag_region1(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_draw_nurbs_interp_mod);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="true";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="true";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="true";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="true";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="true";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=3;else filltuple(a+7, t7);
__tuple t8;filltuple(a+8, t8);
__tuple t9;filltuple(a+9, t9);
__tuple t10;filltuple(a+10, t10);
__tuple t11;
__tuple t12;
__tuple t13;
__tuple t14;
__tuple t15;
__tuple t16;
err=draw_nurbs_interp_mod(varp_obj(0),t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,&t11,&t12,&t13,&t14,&t15,&t16);
fillvar(t11, a+11);fillvar(t12, a+12);fillvar(t13, a+13);fillvar(t14, a+14);fillvar(t15, a+15);fillvar(t16, a+16);
func_end_seterr;

func_begin(x_draw_nurbs_interp);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="true";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="true";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="true";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="true";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=3;else filltuple(a+6, t6);
__tuple t7;
__tuple t8;
__tuple t9;
__tuple t10;
__tuple t11;
__tuple t12;
err=draw_nurbs_interp(varp_obj(0),t1,t2,t3,t4,t5,t6,&t7,&t8,&t9,&t10,&t11,&t12);
fillvar(t7, a+7);fillvar(t8, a+8);fillvar(t9, a+9);fillvar(t10, a+10);fillvar(t11, a+11);fillvar(t12, a+12);
func_end_seterr;

func_begin(x_draw_nurbs_mod);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="true";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="true";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="true";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="true";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="true";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=3;else filltuple(a+7, t7);
__tuple t8;filltuple(a+8, t8);
__tuple t9;filltuple(a+9, t9);
__tuple t10;filltuple(a+10, t10);
__tuple t11;
__tuple t12;
__tuple t13;
err=draw_nurbs_mod(varp_obj(0),t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,&t11,&t12,&t13);
fillvar(t11, a+11);fillvar(t12, a+12);fillvar(t13, a+13);
func_end_seterr;

func_begin(x_draw_nurbs);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="true";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="true";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="true";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="true";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=3;else filltuple(a+6, t6);
__tuple t7;
__tuple t8;
__tuple t9;
err=draw_nurbs(varp_obj(0),t1,t2,t3,t4,t5,t6,&t7,&t8,&t9);
fillvar(t7, a+7);fillvar(t8, a+8);fillvar(t9, a+9);
func_end_seterr;

func_begin(x_draw_xld_mod);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="true";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="true";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="true";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="true";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="true";else filltuple(a+7, t7);
err=draw_xld_mod(a_obj(0),varp_obj(1),t2,t3,t4,t5,t6,t7);
func_end_seterr;

func_begin(x_draw_xld);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="true";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="true";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="true";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="true";else filltuple(a+5, t5);
err=draw_xld(varp_obj(0),t1,t2,t3,t4,t5);
func_end_seterr;

func_begin(x_draw_rectangle2_mod);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;
__tuple t7;
__tuple t8;
__tuple t9;
__tuple t10;
err=draw_rectangle2_mod(t0,t1,t2,t3,t4,t5,&t6,&t7,&t8,&t9,&t10);
fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);fillvar(t9, a+9);fillvar(t10, a+10);
func_end_seterr;

func_begin(x_draw_rectangle2);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
err=draw_rectangle2(t0,&t1,&t2,&t3,&t4,&t5);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_draw_rectangle1_mod);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;
__tuple t6;
__tuple t7;
__tuple t8;
err=draw_rectangle1_mod(t0,t1,t2,t3,t4,&t5,&t6,&t7,&t8);
fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);
func_end_seterr;

func_begin(x_draw_rectangle1);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
err=draw_rectangle1(t0,&t1,&t2,&t3,&t4);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_draw_point_mod);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;
__tuple t4;
err=draw_point_mod(t0,t1,t2,&t3,&t4);
fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_draw_point);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
err=draw_point(t0,&t1,&t2);
fillvar(t1, a+1);fillvar(t2, a+2);
func_end_seterr;

func_begin(x_draw_line_mod);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;
__tuple t6;
__tuple t7;
__tuple t8;
err=draw_line_mod(t0,t1,t2,t3,t4,&t5,&t6,&t7,&t8);
fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);
func_end_seterr;

func_begin(x_draw_line);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
err=draw_line(t0,&t1,&t2,&t3,&t4);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_draw_ellipse_mod);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;
__tuple t7;
__tuple t8;
__tuple t9;
__tuple t10;
err=draw_ellipse_mod(t0,t1,t2,t3,t4,t5,&t6,&t7,&t8,&t9,&t10);
fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);fillvar(t9, a+9);fillvar(t10, a+10);
func_end_seterr;

func_begin(x_draw_ellipse);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
err=draw_ellipse(t0,&t1,&t2,&t3,&t4,&t5);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_draw_circle_mod);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;
__tuple t5;
__tuple t6;
err=draw_circle_mod(t0,t1,t2,t3,&t4,&t5,&t6);
fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_draw_circle);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
err=draw_circle(t0,&t1,&t2,&t3);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_draw_region);
__tuple t1;filltuple(a+1, t1);
err=draw_region(varp_obj(0),t1);
func_end_seterr;

func_begin(x_draw_polygon);
__tuple t1;filltuple(a+1, t1);
err=draw_polygon(varp_obj(0),t1);
func_end_seterr;

func_begin(x_projection_pl);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;
__tuple t7;
err=projection_pl(t0,t1,t2,t3,t4,t5,&t6,&t7);
fillvar(t6, a+6);fillvar(t7, a+7);
func_end_seterr;

func_begin(x_get_points_ellipse);
__tuple t0;if(v_empty(0))t0=0;else filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;
__tuple t7;
err=get_points_ellipse(t0,t1,t2,t3,t4,t5,&t6,&t7);
fillvar(t6, a+6);fillvar(t7, a+7);
func_end_seterr;

func_begin(x_intersection_ll);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;filltuple(a+6, t6);
__tuple t7;filltuple(a+7, t7);
__tuple t8;
__tuple t9;
__tuple t10;
err=intersection_ll(t0,t1,t2,t3,t4,t5,t6,t7,&t8,&t9,&t10);
fillvar(t8, a+8);fillvar(t9, a+9);fillvar(t10, a+10);
func_end_seterr;

func_begin(x_intersection_contours_xld);
__tuple t2;if(v_empty(2))t2="all";else filltuple(a+2, t2);
__tuple t3;
__tuple t4;
__tuple t5;
err=intersection_contours_xld(a_obj(0),a_obj(1),t2,&t3,&t4,&t5);
fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_intersection_circle_contour_xld);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=6.28318;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="positive";else filltuple(a+6, t6);
__tuple t7;
__tuple t8;
err=intersection_circle_contour_xld(a_obj(0),t1,t2,t3,t4,t5,t6,&t7,&t8);
fillvar(t7, a+7);fillvar(t8, a+8);
func_end_seterr;

func_begin(x_intersection_circles);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=6.28318;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="positive";else filltuple(a+5, t5);
__tuple t6;filltuple(a+6, t6);
__tuple t7;filltuple(a+7, t7);
__tuple t8;filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=0.0;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=6.28318;else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11="positive";else filltuple(a+11, t11);
__tuple t12;
__tuple t13;
__tuple t14;
err=intersection_circles(t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,&t12,&t13,&t14);
fillvar(t12, a+12);fillvar(t13, a+13);fillvar(t14, a+14);
func_end_seterr;

func_begin(x_intersection_line_contour_xld);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;
__tuple t6;
__tuple t7;
err=intersection_line_contour_xld(a_obj(0),t1,t2,t3,t4,&t5,&t6,&t7);
fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);
func_end_seterr;

func_begin(x_intersection_line_circle);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=0.0;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=6.28318;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9="positive";else filltuple(a+9, t9);
__tuple t10;
__tuple t11;
err=intersection_line_circle(t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,&t10,&t11);
fillvar(t10, a+10);fillvar(t11, a+11);
func_end_seterr;

func_begin(x_intersection_lines);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;filltuple(a+6, t6);
__tuple t7;filltuple(a+7, t7);
__tuple t8;
__tuple t9;
__tuple t10;
err=intersection_lines(t0,t1,t2,t3,t4,t5,t6,t7,&t8,&t9,&t10);
fillvar(t8, a+8);fillvar(t9, a+9);fillvar(t10, a+10);
func_end_seterr;

func_begin(x_intersection_segment_contour_xld);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;
__tuple t6;
__tuple t7;
err=intersection_segment_contour_xld(a_obj(0),t1,t2,t3,t4,&t5,&t6,&t7);
fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);
func_end_seterr;

func_begin(x_intersection_segment_circle);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=0.0;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=6.28318;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9="positive";else filltuple(a+9, t9);
__tuple t10;
__tuple t11;
err=intersection_segment_circle(t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,&t10,&t11);
fillvar(t10, a+10);fillvar(t11, a+11);
func_end_seterr;

func_begin(x_intersection_segment_line);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;filltuple(a+6, t6);
__tuple t7;filltuple(a+7, t7);
__tuple t8;
__tuple t9;
__tuple t10;
err=intersection_segment_line(t0,t1,t2,t3,t4,t5,t6,t7,&t8,&t9,&t10);
fillvar(t8, a+8);fillvar(t9, a+9);fillvar(t10, a+10);
func_end_seterr;

func_begin(x_intersection_segments);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;filltuple(a+6, t6);
__tuple t7;filltuple(a+7, t7);
__tuple t8;
__tuple t9;
__tuple t10;
err=intersection_segments(t0,t1,t2,t3,t4,t5,t6,t7,&t8,&t9,&t10);
fillvar(t8, a+8);fillvar(t9, a+9);fillvar(t10, a+10);
func_end_seterr;

func_begin(x_clear_distance_transform_xld);
__tuple t0;filltuple(a+0, t0);
err=clear_distance_transform_xld(t0);
func_end_seterr;

func_begin(x_apply_distance_transform_xld);
__tuple t2;filltuple(a+2, t2);
err=apply_distance_transform_xld(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_read_distance_transform_xld);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=read_distance_transform_xld(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_deserialize_distance_transform_xld);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_distance_transform_xld(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_serialize_distance_transform_xld);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_distance_transform_xld(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_distance_transform_xld);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=write_distance_transform_xld(t0,t1);
func_end_seterr;

func_begin(x_set_distance_transform_xld_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="mode";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="point_to_point";else filltuple(a+2, t2);
err=set_distance_transform_xld_param(t0,t1,t2);
func_end_seterr;

func_begin(x_get_distance_transform_xld_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="mode";else filltuple(a+1, t1);
__tuple t2;
err=get_distance_transform_xld_param(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_get_distance_transform_xld_contour);
__tuple t1;filltuple(a+1, t1);
err=get_distance_transform_xld_contour(varp_obj(0),t1);
func_end_seterr;

func_begin(x_create_distance_transform_xld);
__tuple t1;if(v_empty(1))t1="point_to_point";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=20.0;else filltuple(a+2, t2);
__tuple t3;
err=create_distance_transform_xld(a_obj(0),t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_distance_contours_xld);
__tuple t3;if(v_empty(3))t3="point_to_point";else filltuple(a+3, t3);
err=distance_contours_xld(a_obj(0),a_obj(1),varp_obj(2),t3);
func_end_seterr;

func_begin(x_distance_cc_min);
__tuple t2;if(v_empty(2))t2="fast_point_to_segment";else filltuple(a+2, t2);
__tuple t3;
err=distance_cc_min(a_obj(0),a_obj(1),t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_distance_cc);
__tuple t2;if(v_empty(2))t2="point_to_point";else filltuple(a+2, t2);
__tuple t3;
__tuple t4;
err=distance_cc(a_obj(0),a_obj(1),t2,&t3,&t4);
fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_distance_sc);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;
__tuple t6;
err=distance_sc(a_obj(0),t1,t2,t3,t4,&t5,&t6);
fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_distance_lc);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;
__tuple t6;
err=distance_lc(a_obj(0),t1,t2,t3,t4,&t5,&t6);
fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_distance_pc);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;
__tuple t4;
err=distance_pc(a_obj(0),t1,t2,&t3,&t4);
fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_distance_sr);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;
__tuple t6;
err=distance_sr(a_obj(0),t1,t2,t3,t4,&t5,&t6);
fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_distance_lr);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;
__tuple t6;
err=distance_lr(a_obj(0),t1,t2,t3,t4,&t5,&t6);
fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_distance_pr);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;
__tuple t4;
err=distance_pr(a_obj(0),t1,t2,&t3,&t4);
fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_angle_lx);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;
err=angle_lx(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_angle_ll);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;filltuple(a+6, t6);
__tuple t7;filltuple(a+7, t7);
__tuple t8;
err=angle_ll(t0,t1,t2,t3,t4,t5,t6,t7,&t8);
fillvar(t8, a+8);
func_end_seterr;

func_begin(x_distance_sl);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;filltuple(a+6, t6);
__tuple t7;filltuple(a+7, t7);
__tuple t8;
__tuple t9;
err=distance_sl(t0,t1,t2,t3,t4,t5,t6,t7,&t8,&t9);
fillvar(t8, a+8);fillvar(t9, a+9);
func_end_seterr;

func_begin(x_distance_ss);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;filltuple(a+6, t6);
__tuple t7;filltuple(a+7, t7);
__tuple t8;
__tuple t9;
err=distance_ss(t0,t1,t2,t3,t4,t5,t6,t7,&t8,&t9);
fillvar(t8, a+8);fillvar(t9, a+9);
func_end_seterr;

func_begin(x_distance_ps);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;
__tuple t7;
err=distance_ps(t0,t1,t2,t3,t4,t5,&t6,&t7);
fillvar(t6, a+6);fillvar(t7, a+7);
func_end_seterr;

func_begin(x_distance_pl);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;
err=distance_pl(t0,t1,t2,t3,t4,t5,&t6);
fillvar(t6, a+6);
func_end_seterr;

func_begin(x_distance_pp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;
err=distance_pp(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_compose_funct_1d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="constant";else filltuple(a+2, t2);
__tuple t3;
err=compose_funct_1d(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_invert_funct_1d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=invert_funct_1d(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_derivate_funct_1d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="first";else filltuple(a+1, t1);
__tuple t2;
err=derivate_funct_1d(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_local_min_max_funct_1d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="strict_min_max";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="true";else filltuple(a+2, t2);
__tuple t3;
__tuple t4;
err=local_min_max_funct_1d(t0,t1,t2,&t3,&t4);
fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_zero_crossings_funct_1d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=zero_crossings_funct_1d(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_scale_y_funct_1d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=2.0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0.0;else filltuple(a+2, t2);
__tuple t3;
err=scale_y_funct_1d(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_negate_funct_1d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=negate_funct_1d(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_abs_funct_1d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=abs_funct_1d(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_get_y_value_funct_1d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="constant";else filltuple(a+2, t2);
__tuple t3;
err=get_y_value_funct_1d(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_get_pair_funct_1d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
__tuple t3;
err=get_pair_funct_1d(t0,t1,&t2,&t3);
fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_num_points_funct_1d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=num_points_funct_1d(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_y_range_funct_1d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
err=y_range_funct_1d(t0,&t1,&t2);
fillvar(t1, a+1);fillvar(t2, a+2);
func_end_seterr;

func_begin(x_x_range_funct_1d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
err=x_range_funct_1d(t0,&t1,&t2);
fillvar(t1, a+1);fillvar(t2, a+2);
func_end_seterr;

func_begin(x_funct_1d_to_pairs);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
err=funct_1d_to_pairs(t0,&t1,&t2);
fillvar(t1, a+1);fillvar(t2, a+2);
func_end_seterr;

func_begin(x_sample_funct_1d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="constant";else filltuple(a+4, t4);
__tuple t5;
err=sample_funct_1d(t0,t1,t2,t3,t4,&t5);
fillvar(t5, a+5);
func_end_seterr;

func_begin(x_transform_funct_1d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=transform_funct_1d(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_match_funct_1d_trans);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="constant";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3)){const char* vs3[]={"1.0","0.0","1.0","0.0"};arr2tupleS(vs3, 4, t3);}else filltuple(a+3, t3);
__tuple t4;if(v_empty(4)){const char* vs4[]={"true","true","true","true"};arr2tupleS(vs4, 4, t4);}else filltuple(a+4, t4);
__tuple t5;
__tuple t6;
__tuple t7;
err=match_funct_1d_trans(t0,t1,t2,t3,t4,&t5,&t6,&t7);
fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);
func_end_seterr;

func_begin(x_distance_funct_1d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="length";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.0;else filltuple(a+3, t3);
__tuple t4;
err=distance_funct_1d(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_smooth_funct_1d_gauss);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=2.0;else filltuple(a+1, t1);
__tuple t2;
err=smooth_funct_1d_gauss(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_integrate_funct_1d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
err=integrate_funct_1d(t0,&t1,&t2);
fillvar(t1, a+1);fillvar(t2, a+2);
func_end_seterr;

func_begin(x_read_funct_1d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=read_funct_1d(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_funct_1d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=write_funct_1d(t0,t1);
func_end_seterr;

func_begin(x_create_funct_1d_array);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=create_funct_1d_array(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_create_funct_1d_pairs);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=create_funct_1d_pairs(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_smooth_funct_1d_mean);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=9;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=3;else filltuple(a+2, t2);
__tuple t3;
err=smooth_funct_1d_mean(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_match_fourier_coeff);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=50;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="1/index";else filltuple(a+5, t5);
__tuple t6;
err=match_fourier_coeff(t0,t1,t2,t3,t4,t5,&t6);
fillvar(t6, a+6);
func_end_seterr;

func_begin(x_fourier_1dim_inv);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=100;else filltuple(a+2, t2);
__tuple t3;
__tuple t4;
err=fourier_1dim_inv(t0,t1,t2,&t3,&t4);
fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_abs_invar_fourier_coeff);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=1;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="abs_amount";else filltuple(a+4, t4);
__tuple t5;
__tuple t6;
err=abs_invar_fourier_coeff(t0,t1,t2,t3,t4,&t5,&t6);
fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_invar_fourier_coeff);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=1;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="affine_invar";else filltuple(a+3, t3);
__tuple t4;
__tuple t5;
err=invar_fourier_coeff(t0,t1,t2,t3,&t4,&t5);
fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_fourier_1dim);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=50;else filltuple(a+3, t3);
__tuple t4;
__tuple t5;
err=fourier_1dim(t0,t1,t2,t3,&t4,&t5);
fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_prep_contour_fourier);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="signed_area";else filltuple(a+2, t2);
__tuple t3;
err=prep_contour_fourier(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_move_contour_orig);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
__tuple t3;
err=move_contour_orig(t0,t1,&t2,&t3);
fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_texture_laws);
__tuple t2;if(v_empty(2))t2="el";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=2;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=5;else filltuple(a+4, t4);
err=texture_laws(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_deviation_image);
__tuple t2;if(v_empty(2))t2=11;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=11;else filltuple(a+3, t3);
err=deviation_image(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_entropy_image);
__tuple t2;if(v_empty(2))t2=9;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=9;else filltuple(a+3, t3);
err=entropy_image(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_isotropic_diffusion);
__tuple t2;if(v_empty(2))t2=1.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=10;else filltuple(a+3, t3);
err=isotropic_diffusion(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_anisotropic_diffusion);
__tuple t2;if(v_empty(2))t2="weickert";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=5.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=1.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=10;else filltuple(a+5, t5);
err=anisotropic_diffusion(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_smooth_image);
__tuple t2;if(v_empty(2))t2="deriche2";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.5;else filltuple(a+3, t3);
err=smooth_image(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_sigma_image);
__tuple t2;if(v_empty(2))t2=5;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=5;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=3;else filltuple(a+4, t4);
err=sigma_image(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_midrange_image);
__tuple t3;if(v_empty(3))t3="mirrored";else filltuple(a+3, t3);
err=midrange_image(a_obj(0),a_obj(1),varp_obj(2),t3);
func_end_seterr;

func_begin(x_trimmed_mean);
__tuple t3;if(v_empty(3))t3=5;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="mirrored";else filltuple(a+4, t4);
err=trimmed_mean(a_obj(0),a_obj(1),varp_obj(2),t3,t4);
func_end_seterr;

func_begin(x_median_separate);
__tuple t2;if(v_empty(2))t2=25;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=25;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="mirrored";else filltuple(a+4, t4);
err=median_separate(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_median_rect);
__tuple t2;if(v_empty(2))t2=15;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=15;else filltuple(a+3, t3);
err=median_rect(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_median_image);
__tuple t2;if(v_empty(2))t2="circle";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="mirrored";else filltuple(a+4, t4);
err=median_image(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_median_weighted);
__tuple t2;if(v_empty(2))t2="inner";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=3;else filltuple(a+3, t3);
err=median_weighted(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_rank_rect);
__tuple t2;if(v_empty(2))t2=15;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=15;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=5;else filltuple(a+4, t4);
err=rank_rect(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_rank_image);
__tuple t3;if(v_empty(3))t3=5;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="mirrored";else filltuple(a+4, t4);
err=rank_image(a_obj(0),a_obj(1),varp_obj(2),t3,t4);
func_end_seterr;

func_begin(x_dual_rank);
__tuple t2;if(v_empty(2))t2="circle";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=10;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="mirrored";else filltuple(a+5, t5);
err=dual_rank(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_mean_image);
__tuple t2;if(v_empty(2))t2=9;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=9;else filltuple(a+3, t3);
err=mean_image(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_info_smooth);
__tuple t0;if(v_empty(0))t0="deriche2";else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0.5;else filltuple(a+1, t1);
__tuple t2;
__tuple t3;
err=info_smooth(t0,t1,&t2,&t3);
fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_binomial_filter);
__tuple t2;if(v_empty(2))t2=5;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=5;else filltuple(a+3, t3);
err=binomial_filter(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_gauss_image);
__tuple t2;if(v_empty(2))t2=5;else filltuple(a+2, t2);
err=gauss_image(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_gauss_filter);
__tuple t2;if(v_empty(2))t2=5;else filltuple(a+2, t2);
err=gauss_filter(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_eliminate_min_max);
__tuple t2;if(v_empty(2))t2=3;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=3;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=1.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=3;else filltuple(a+5, t5);
err=eliminate_min_max(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_anisotrope_diff);
__tuple t2;if(v_empty(2))t2=80;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=5;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=8;else filltuple(a+5, t5);
err=anisotrope_diff(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_fill_interlace);
__tuple t2;if(v_empty(2))t2="odd";else filltuple(a+2, t2);
err=fill_interlace(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_rank_n);
__tuple t2;if(v_empty(2))t2=2;else filltuple(a+2, t2);
err=rank_n(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_mean_n);
err=mean_n(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_eliminate_sp);
__tuple t2;if(v_empty(2))t2=3;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=3;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=1;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=254;else filltuple(a+5, t5);
err=eliminate_sp(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_mean_sp);
__tuple t2;if(v_empty(2))t2=3;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=3;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=1;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=254;else filltuple(a+5, t5);
err=mean_sp(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_points_sojka);
__tuple t1;if(v_empty(1))t1=9;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=2.5;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.75;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=30.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=90.0;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=0.5;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="false";else filltuple(a+7, t7);
__tuple t8;
__tuple t9;
err=points_sojka(a_obj(0),t1,t2,t3,t4,t5,t6,t7,&t8,&t9);
fillvar(t8, a+8);fillvar(t9, a+9);
func_end_seterr;

func_begin(x_dots_image);
__tuple t2;if(v_empty(2))t2=5;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="light";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0;else filltuple(a+4, t4);
err=dots_image(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_local_min_sub_pix);
__tuple t1;if(v_empty(1))t1="facet";else filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=5.0;else filltuple(a+3, t3);
__tuple t4;
__tuple t5;
err=local_min_sub_pix(a_obj(0),t1,t2,t3,&t4,&t5);
fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_local_max_sub_pix);
__tuple t1;if(v_empty(1))t1="facet";else filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=5.0;else filltuple(a+3, t3);
__tuple t4;
__tuple t5;
err=local_max_sub_pix(a_obj(0),t1,t2,t3,&t4,&t5);
fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_saddle_points_sub_pix);
__tuple t1;if(v_empty(1))t1="facet";else filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=5.0;else filltuple(a+3, t3);
__tuple t4;
__tuple t5;
err=saddle_points_sub_pix(a_obj(0),t1,t2,t3,&t4,&t5);
fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_critical_points_sub_pix);
__tuple t1;if(v_empty(1))t1="facet";else filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=5.0;else filltuple(a+3, t3);
__tuple t4;
__tuple t5;
__tuple t6;
__tuple t7;
__tuple t8;
__tuple t9;
err=critical_points_sub_pix(a_obj(0),t1,t2,t3,&t4,&t5,&t6,&t7,&t8,&t9);
fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);fillvar(t9, a+9);
func_end_seterr;

func_begin(x_points_harris);
__tuple t1;if(v_empty(1))t1=0.7;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=2.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.08;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=1000.0;else filltuple(a+4, t4);
__tuple t5;
__tuple t6;
err=points_harris(a_obj(0),t1,t2,t3,t4,&t5,&t6);
fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_points_harris_binomial);
__tuple t1;if(v_empty(1))t1=5;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=15;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.08;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=1000.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="on";else filltuple(a+5, t5);
__tuple t6;
__tuple t7;
err=points_harris_binomial(a_obj(0),t1,t2,t3,t4,t5,&t6,&t7);
fillvar(t6, a+6);fillvar(t7, a+7);
func_end_seterr;

func_begin(x_points_lepetit);
__tuple t1;if(v_empty(1))t1=3;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=1;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=15;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=30;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="interpolation";else filltuple(a+5, t5);
__tuple t6;
__tuple t7;
err=points_lepetit(a_obj(0),t1,t2,t3,t4,t5,&t6,&t7);
fillvar(t6, a+6);fillvar(t7, a+7);
func_end_seterr;

func_begin(x_points_foerstner);
__tuple t1;if(v_empty(1))t1=1.0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=2.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=3.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=200;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=0.3;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="gauss";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="false";else filltuple(a+7, t7);
__tuple t8;
__tuple t9;
__tuple t10;
__tuple t11;
__tuple t12;
__tuple t13;
__tuple t14;
__tuple t15;
__tuple t16;
__tuple t17;
err=points_foerstner(a_obj(0),t1,t2,t3,t4,t5,t6,t7,&t8,&t9,&t10,&t11,&t12,&t13,&t14,&t15,&t16,&t17);
fillvar(t8, a+8);fillvar(t9, a+9);fillvar(t10, a+10);fillvar(t11, a+11);fillvar(t12, a+12);fillvar(t13, a+13);fillvar(t14, a+14);fillvar(t15, a+15);fillvar(t16, a+16);fillvar(t17, a+17);
func_end_seterr;

func_begin(x_estimate_noise);
__tuple t1;if(v_empty(1))t1="foerstner";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=20;else filltuple(a+2, t2);
__tuple t3;
err=estimate_noise(a_obj(0),t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_noise_distribution_mean);
__tuple t2;if(v_empty(2))t2=21;else filltuple(a+2, t2);
__tuple t3;
err=noise_distribution_mean(a_obj(0),a_obj(1),t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_add_noise_white);
__tuple t2;if(v_empty(2))t2=60.0;else filltuple(a+2, t2);
err=add_noise_white(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_add_noise_distribution);
__tuple t2;filltuple(a+2, t2);
err=add_noise_distribution(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_gauss_distribution);
__tuple t0;if(v_empty(0))t0=2.0;else filltuple(a+0, t0);
__tuple t1;
err=gauss_distribution(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_sp_distribution);
__tuple t0;if(v_empty(0))t0=5.0;else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=5.0;else filltuple(a+1, t1);
__tuple t2;
err=sp_distribution(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_deviation_n);
err=deviation_n(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_inpainting_texture);
__tuple t3;if(v_empty(3))t3=9;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=30;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=1.0;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="none";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=1.0;else filltuple(a+7, t7);
err=inpainting_texture(a_obj(0),a_obj(1),varp_obj(2),t3,t4,t5,t6,t7);
func_end_seterr;

func_begin(x_inpainting_ct);
__tuple t3;if(v_empty(3))t3=5.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=25.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=1.41;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=4.0;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=1;else filltuple(a+7, t7);
err=inpainting_ct(a_obj(0),a_obj(1),varp_obj(2),t3,t4,t5,t6,t7);
func_end_seterr;

func_begin(x_inpainting_mcf);
__tuple t3;if(v_empty(3))t3=0.5;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.5;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=10;else filltuple(a+5, t5);
err=inpainting_mcf(a_obj(0),a_obj(1),varp_obj(2),t3,t4,t5);
func_end_seterr;

func_begin(x_inpainting_ced);
__tuple t3;if(v_empty(3))t3=0.5;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=3.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=0.5;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=10;else filltuple(a+6, t6);
err=inpainting_ced(a_obj(0),a_obj(1),varp_obj(2),t3,t4,t5,t6);
func_end_seterr;

func_begin(x_inpainting_aniso);
__tuple t3;if(v_empty(3))t3="weickert";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=5.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=0.5;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=10;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=3.0;else filltuple(a+7, t7);
err=inpainting_aniso(a_obj(0),a_obj(1),varp_obj(2),t3,t4,t5,t6,t7);
func_end_seterr;

func_begin(x_harmonic_interpolation);
__tuple t3;if(v_empty(3))t3=0.001;else filltuple(a+3, t3);
err=harmonic_interpolation(a_obj(0),a_obj(1),varp_obj(2),t3);
func_end_seterr;

func_begin(x_expand_domain_gray);
__tuple t2;if(v_empty(2))t2=2;else filltuple(a+2, t2);
err=expand_domain_gray(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_topographic_sketch);
err=topographic_sketch(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_linear_trans_color);
__tuple t2;filltuple(a+2, t2);
err=linear_trans_color(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_gen_principal_comp_trans);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
err=gen_principal_comp_trans(a_obj(0),&t1,&t2,&t3,&t4,&t5);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_principal_comp);
__tuple t2;
err=principal_comp(a_obj(0),varp_obj(1),&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_fuzzy_entropy);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=255;else filltuple(a+3, t3);
__tuple t4;
err=fuzzy_entropy(a_obj(0),a_obj(1),t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_fuzzy_perimeter);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=255;else filltuple(a+3, t3);
__tuple t4;
err=fuzzy_perimeter(a_obj(0),a_obj(1),t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_gray_closing_shape);
__tuple t2;if(v_empty(2))t2=11;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=11;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="octagon";else filltuple(a+4, t4);
err=gray_closing_shape(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_gray_opening_shape);
__tuple t2;if(v_empty(2))t2=11;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=11;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="octagon";else filltuple(a+4, t4);
err=gray_opening_shape(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_gray_erosion_shape);
__tuple t2;if(v_empty(2))t2=11;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=11;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="octagon";else filltuple(a+4, t4);
err=gray_erosion_shape(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_gray_dilation_shape);
__tuple t2;if(v_empty(2))t2=11;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=11;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="octagon";else filltuple(a+4, t4);
err=gray_dilation_shape(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_gray_range_rect);
__tuple t2;if(v_empty(2))t2=11;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=11;else filltuple(a+3, t3);
err=gray_range_rect(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_gray_closing_rect);
__tuple t2;if(v_empty(2))t2=11;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=11;else filltuple(a+3, t3);
err=gray_closing_rect(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_gray_opening_rect);
__tuple t2;if(v_empty(2))t2=11;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=11;else filltuple(a+3, t3);
err=gray_opening_rect(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_gray_erosion_rect);
__tuple t2;if(v_empty(2))t2=11;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=11;else filltuple(a+3, t3);
err=gray_erosion_rect(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_gray_dilation_rect);
__tuple t2;if(v_empty(2))t2=11;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=11;else filltuple(a+3, t3);
err=gray_dilation_rect(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_gray_skeleton);
err=gray_skeleton(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_lut_trans);
__tuple t2;filltuple(a+2, t2);
err=lut_trans(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_convol_image);
__tuple t2;if(v_empty(2))t2="sobel";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="mirrored";else filltuple(a+3, t3);
err=convol_image(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_convert_image_type);
__tuple t2;if(v_empty(2))t2="byte";else filltuple(a+2, t2);
err=convert_image_type(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_real_to_vector_field);
__tuple t3;if(v_empty(3))t3="vector_field_relative";else filltuple(a+3, t3);
err=real_to_vector_field(a_obj(0),a_obj(1),varp_obj(2),t3);
func_end_seterr;

func_begin(x_vector_field_to_real);
err=vector_field_to_real(a_obj(0),varp_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_real_to_complex);
err=real_to_complex(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_complex_to_real);
err=complex_to_real(a_obj(0),varp_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_region_to_mean);
err=region_to_mean(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_gray_inside);
err=gray_inside(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_symmetry);
__tuple t2;if(v_empty(2))t2=40;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.5;else filltuple(a+4, t4);
err=symmetry(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_select_grayvalues_from_channels);
err=select_grayvalues_from_channels(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_depth_from_focus);
__tuple t3;if(v_empty(3))t3="highpass";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="next_maximum";else filltuple(a+4, t4);
err=depth_from_focus(a_obj(0),varp_obj(1),varp_obj(2),t3,t4);
func_end_seterr;

func_begin(x_scene_flow_calib);
__tuple t5;if(v_empty(5))t5=40.0;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=40.0;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="default_parameters";else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8="accurate";else filltuple(a+8, t8);
__tuple t9;filltuple(a+9, t9);
__tuple t10;filltuple(a+10, t10);
__tuple t11;filltuple(a+11, t11);
__tuple t12;
err=scene_flow_calib(a_obj(0),a_obj(1),a_obj(2),a_obj(3),a_obj(4),t5,t6,t7,t8,t9,t10,t11,&t12);
fillvar(t12, a+12);
func_end_seterr;

func_begin(x_scene_flow_uncalib);
__tuple t7;if(v_empty(7))t7=40.0;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=40.0;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9="default_parameters";else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10="accurate";else filltuple(a+10, t10);
err=scene_flow_uncalib(a_obj(0),a_obj(1),a_obj(2),a_obj(3),a_obj(4),varp_obj(5),varp_obj(6),t7,t8,t9,t10);
func_end_seterr;

func_begin(x_unwarp_image_vector_field);
err=unwarp_image_vector_field(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_derivate_vector_field);
__tuple t2;if(v_empty(2))t2=1.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="mean_curvature";else filltuple(a+3, t3);
err=derivate_vector_field(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_vector_field_length);
__tuple t2;if(v_empty(2))t2="length";else filltuple(a+2, t2);
err=vector_field_length(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_optical_flow_mg);
__tuple t3;if(v_empty(3))t3="fdrig";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.8;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=1.0;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=20.0;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=5.0;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8="default_parameters";else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9="accurate";else filltuple(a+9, t9);
err=optical_flow_mg(a_obj(0),a_obj(1),varp_obj(2),t3,t4,t5,t6,t7,t8,t9);
func_end_seterr;

func_begin(x_exhaustive_match_mg);
__tuple t3;if(v_empty(3))t3="dfd";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=1;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=30;else filltuple(a+5, t5);
err=exhaustive_match_mg(a_obj(0),a_obj(1),varp_obj(2),t3,t4,t5);
func_end_seterr;

func_begin(x_create_template_rot);
__tuple t1;if(v_empty(1))t1=4;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=-0.39;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.79;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.0982;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="sort";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="original";else filltuple(a+6, t6);
__tuple t7;
err=create_template_rot(a_obj(0),t1,t2,t3,t4,t5,t6,&t7);
fillvar(t7, a+7);
func_end_seterr;

func_begin(x_create_template);
__tuple t1;if(v_empty(1))t1=255;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=4;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="sort";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="original";else filltuple(a+4, t4);
__tuple t5;
err=create_template(a_obj(0),t1,t2,t3,t4,&t5);
fillvar(t5, a+5);
func_end_seterr;

func_begin(x_serialize_template);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_template(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_deserialize_template);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_template(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_template);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=write_template(t0,t1);
func_end_seterr;

func_begin(x_read_template);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=read_template(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_clear_all_templates);
err=clear_all_templates();
func_end_seterr;

func_begin(x_clear_template);
__tuple t0;filltuple(a+0, t0);
err=clear_template(t0);
func_end_seterr;

func_begin(x_set_offset_template);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0;else filltuple(a+1, t1);
err=set_offset_template(t0,t1);
func_end_seterr;

func_begin(x_set_reference_template);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
err=set_reference_template(t0,t1,t2);
func_end_seterr;

func_begin(x_adapt_template);
__tuple t1;filltuple(a+1, t1);
err=adapt_template(a_obj(0),t1);
func_end_seterr;

func_begin(x_fast_match_mg);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=30.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=3;else filltuple(a+4, t4);
err=fast_match_mg(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_best_match_pre_mg);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=30.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="false";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=3;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="original";else filltuple(a+5, t5);
__tuple t6;
__tuple t7;
__tuple t8;
err=best_match_pre_mg(a_obj(0),t1,t2,t3,t4,t5,&t6,&t7,&t8);
fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);
func_end_seterr;

func_begin(x_best_match_mg);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=30.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="false";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=4;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=2;else filltuple(a+5, t5);
__tuple t6;
__tuple t7;
__tuple t8;
err=best_match_mg(a_obj(0),t1,t2,t3,t4,t5,&t6,&t7,&t8);
fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);
func_end_seterr;

func_begin(x_fast_match);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=20.0;else filltuple(a+3, t3);
err=fast_match(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_best_match_rot_mg);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=-0.39;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.79;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=40.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="false";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=3;else filltuple(a+6, t6);
__tuple t7;
__tuple t8;
__tuple t9;
__tuple t10;
err=best_match_rot_mg(a_obj(0),t1,t2,t3,t4,t5,t6,&t7,&t8,&t9,&t10);
fillvar(t7, a+7);fillvar(t8, a+8);fillvar(t9, a+9);fillvar(t10, a+10);
func_end_seterr;

func_begin(x_best_match_rot);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=-0.39;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.79;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=30.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="false";else filltuple(a+5, t5);
__tuple t6;
__tuple t7;
__tuple t8;
__tuple t9;
err=best_match_rot(a_obj(0),t1,t2,t3,t4,t5,&t6,&t7,&t8,&t9);
fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);fillvar(t9, a+9);
func_end_seterr;

func_begin(x_best_match);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=20.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="false";else filltuple(a+3, t3);
__tuple t4;
__tuple t5;
__tuple t6;
err=best_match(a_obj(0),t1,t2,t3,&t4,&t5,&t6);
fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_exhaustive_match);
__tuple t4;if(v_empty(4))t4="dfd";else filltuple(a+4, t4);
err=exhaustive_match(a_obj(0),a_obj(1),a_obj(2),varp_obj(3),t4);
func_end_seterr;

func_begin(x_corner_response);
__tuple t2;if(v_empty(2))t2=3;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.04;else filltuple(a+3, t3);
err=corner_response(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_gen_gauss_pyramid);
__tuple t2;if(v_empty(2))t2="weighted";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.5;else filltuple(a+3, t3);
err=gen_gauss_pyramid(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_monotony);
err=monotony(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_bandpass_image);
__tuple t2;if(v_empty(2))t2="lines";else filltuple(a+2, t2);
err=bandpass_image(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_lines_color);
__tuple t2;if(v_empty(2))t2=1.5;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=3;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=8;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="true";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="true";else filltuple(a+6, t6);
err=lines_color(a_obj(0),varp_obj(1),t2,t3,t4,t5,t6);
func_end_seterr;

func_begin(x_lines_gauss);
__tuple t2;if(v_empty(2))t2=1.5;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=3;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=8;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="light";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="true";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="bar-shaped";else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8="true";else filltuple(a+8, t8);
err=lines_gauss(a_obj(0),varp_obj(1),t2,t3,t4,t5,t6,t7,t8);
func_end_seterr;

func_begin(x_lines_facet);
__tuple t2;if(v_empty(2))t2=5;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=3;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=8;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="light";else filltuple(a+5, t5);
err=lines_facet(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_gen_filter_mask);
__tuple t1;if(v_empty(1))t1="gauss";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=1.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=512;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=512;else filltuple(a+4, t4);
err=gen_filter_mask(varp_obj(0),t1,t2,t3,t4);
func_end_seterr;

func_begin(x_gen_mean_filter);
__tuple t1;if(v_empty(1))t1="ellipse";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=11.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=11.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="none";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="dc_center";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=512;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=512;else filltuple(a+8, t8);
err=gen_mean_filter(varp_obj(0),t1,t2,t3,t4,t5,t6,t7,t8);
func_end_seterr;

func_begin(x_gen_gauss_filter);
__tuple t1;if(v_empty(1))t1=1.0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=1.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="none";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="dc_center";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=512;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=512;else filltuple(a+7, t7);
err=gen_gauss_filter(varp_obj(0),t1,t2,t3,t4,t5,t6,t7);
func_end_seterr;

func_begin(x_gen_derivative_filter);
__tuple t1;if(v_empty(1))t1="x";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=1;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="none";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="dc_center";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=512;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=512;else filltuple(a+6, t6);
err=gen_derivative_filter(varp_obj(0),t1,t2,t3,t4,t5,t6);
func_end_seterr;

func_begin(x_gen_std_bandpass);
__tuple t1;if(v_empty(1))t1=0.1;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0.01;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="sin";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="none";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="dc_center";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=512;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=512;else filltuple(a+7, t7);
err=gen_std_bandpass(varp_obj(0),t1,t2,t3,t4,t5,t6,t7);
func_end_seterr;

func_begin(x_gen_sin_bandpass);
__tuple t1;if(v_empty(1))t1=0.1;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="none";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="dc_center";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=512;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=512;else filltuple(a+5, t5);
err=gen_sin_bandpass(varp_obj(0),t1,t2,t3,t4,t5);
func_end_seterr;

func_begin(x_gen_bandfilter);
__tuple t1;if(v_empty(1))t1=0.1;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0.2;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="none";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="dc_center";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=512;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=512;else filltuple(a+6, t6);
err=gen_bandfilter(varp_obj(0),t1,t2,t3,t4,t5,t6);
func_end_seterr;

func_begin(x_gen_bandpass);
__tuple t1;if(v_empty(1))t1=0.1;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0.2;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="none";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="dc_center";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=512;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=512;else filltuple(a+6, t6);
err=gen_bandpass(varp_obj(0),t1,t2,t3,t4,t5,t6);
func_end_seterr;

func_begin(x_gen_lowpass);
__tuple t1;if(v_empty(1))t1=0.1;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="none";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="dc_center";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=512;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=512;else filltuple(a+5, t5);
err=gen_lowpass(varp_obj(0),t1,t2,t3,t4,t5);
func_end_seterr;

func_begin(x_gen_highpass);
__tuple t1;if(v_empty(1))t1=0.1;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="none";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="dc_center";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=512;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=512;else filltuple(a+5, t5);
err=gen_highpass(varp_obj(0),t1,t2,t3,t4,t5);
func_end_seterr;

func_begin(x_power_ln);
err=power_ln(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_power_real);
err=power_real(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_power_byte);
err=power_byte(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_phase_deg);
err=phase_deg(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_phase_rad);
err=phase_rad(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_energy_gabor);
err=energy_gabor(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_convol_gabor);
err=convol_gabor(a_obj(0),a_obj(1),varp_obj(2),varp_obj(3));
func_end_seterr;

func_begin(x_gen_gabor);
__tuple t1;if(v_empty(1))t1=1.4;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0.4;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=1.5;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="none";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="dc_center";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=512;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=512;else filltuple(a+8, t8);
err=gen_gabor(varp_obj(0),t1,t2,t3,t4,t5,t6,t7,t8);
func_end_seterr;

func_begin(x_phase_correlation_fft);
err=phase_correlation_fft(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_correlation_fft);
err=correlation_fft(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_convol_fft);
err=convol_fft(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_deserialize_fft_optimization_data);
__tuple t0;filltuple(a+0, t0);
err=deserialize_fft_optimization_data(t0);
func_end_seterr;

func_begin(x_serialize_fft_optimization_data);
__tuple t0;
err=serialize_fft_optimization_data(&t0);
fillvar(t0, a+0);
func_end_seterr;

func_begin(x_read_fft_optimization_data);
__tuple t0;if(v_empty(0))t0="fft_opt.dat";else filltuple(a+0, t0);
err=read_fft_optimization_data(t0);
func_end_seterr;

func_begin(x_write_fft_optimization_data);
__tuple t0;if(v_empty(0))t0="fft_opt.dat";else filltuple(a+0, t0);
err=write_fft_optimization_data(t0);
func_end_seterr;

func_begin(x_optimize_rft_speed);
__tuple t0;if(v_empty(0))t0=512;else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=512;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="standard";else filltuple(a+2, t2);
err=optimize_rft_speed(t0,t1,t2);
func_end_seterr;

func_begin(x_optimize_fft_speed);
__tuple t0;if(v_empty(0))t0=512;else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=512;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="standard";else filltuple(a+2, t2);
err=optimize_fft_speed(t0,t1,t2);
func_end_seterr;

func_begin(x_rft_generic);
__tuple t2;if(v_empty(2))t2="to_freq";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="sqrt";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="complex";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=512;else filltuple(a+5, t5);
err=rft_generic(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_fft_image_inv);
err=fft_image_inv(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_fft_image);
err=fft_image(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_fft_generic);
__tuple t2;if(v_empty(2))t2="to_freq";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=-1;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="sqrt";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="dc_center";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="complex";else filltuple(a+6, t6);
err=fft_generic(a_obj(0),varp_obj(1),t2,t3,t4,t5,t6);
func_end_seterr;

func_begin(x_shock_filter);
__tuple t2;if(v_empty(2))t2=0.5;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=10;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="canny";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=1.0;else filltuple(a+5, t5);
err=shock_filter(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_mean_curvature_flow);
__tuple t2;if(v_empty(2))t2=0.5;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.5;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=10;else filltuple(a+4, t4);
err=mean_curvature_flow(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_coherence_enhancing_diff);
__tuple t2;if(v_empty(2))t2=0.5;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=3.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.5;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=10;else filltuple(a+5, t5);
err=coherence_enhancing_diff(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_equ_histo_image);
err=equ_histo_image(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_illuminate);
__tuple t2;if(v_empty(2))t2=101;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=101;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.7;else filltuple(a+4, t4);
err=illuminate(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_emphasize);
__tuple t2;if(v_empty(2))t2=7;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=7;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=1.0;else filltuple(a+4, t4);
err=emphasize(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_scale_image_max);
err=scale_image_max(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_robinson_dir);
err=robinson_dir(a_obj(0),varp_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_robinson_amp);
err=robinson_amp(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_kirsch_dir);
err=kirsch_dir(a_obj(0),varp_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_kirsch_amp);
err=kirsch_amp(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_frei_dir);
err=frei_dir(a_obj(0),varp_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_frei_amp);
err=frei_amp(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_prewitt_dir);
err=prewitt_dir(a_obj(0),varp_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_prewitt_amp);
err=prewitt_amp(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_sobel_amp);
__tuple t2;if(v_empty(2))t2="sum_abs";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=3;else filltuple(a+3, t3);
err=sobel_amp(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_sobel_dir);
__tuple t3;if(v_empty(3))t3="sum_abs";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=3;else filltuple(a+4, t4);
err=sobel_dir(a_obj(0),varp_obj(1),varp_obj(2),t3,t4);
func_end_seterr;

func_begin(x_roberts);
__tuple t2;if(v_empty(2))t2="gradient_sum";else filltuple(a+2, t2);
err=roberts(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_laplace);
__tuple t2;if(v_empty(2))t2="absolute";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=3;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="n_4";else filltuple(a+4, t4);
err=laplace(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_highpass_image);
__tuple t2;if(v_empty(2))t2=9;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=9;else filltuple(a+3, t3);
err=highpass_image(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_info_edges);
__tuple t0;if(v_empty(0))t0="lanser2";else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="edge";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0.5;else filltuple(a+2, t2);
__tuple t3;
__tuple t4;
err=info_edges(t0,t1,t2,&t3,&t4);
fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_edges_color_sub_pix);
__tuple t2;if(v_empty(2))t2="canny";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=20;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=40;else filltuple(a+5, t5);
err=edges_color_sub_pix(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_edges_color);
__tuple t3;if(v_empty(3))t3="canny";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=1.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="nms";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=20;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=40;else filltuple(a+7, t7);
err=edges_color(a_obj(0),varp_obj(1),varp_obj(2),t3,t4,t5,t6,t7);
func_end_seterr;

func_begin(x_edges_sub_pix);
__tuple t2;if(v_empty(2))t2="canny";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=20;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=40;else filltuple(a+5, t5);
err=edges_sub_pix(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_edges_image);
__tuple t3;if(v_empty(3))t3="canny";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=1.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="nms";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=20;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=40;else filltuple(a+7, t7);
err=edges_image(a_obj(0),varp_obj(1),varp_obj(2),t3,t4,t5,t6,t7);
func_end_seterr;

func_begin(x_derivate_gauss);
__tuple t2;if(v_empty(2))t2=1.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="x";else filltuple(a+3, t3);
err=derivate_gauss(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_laplace_of_gauss);
__tuple t2;if(v_empty(2))t2=2.0;else filltuple(a+2, t2);
err=laplace_of_gauss(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_diff_of_gauss);
__tuple t2;if(v_empty(2))t2=3.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1.6;else filltuple(a+3, t3);
err=diff_of_gauss(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_close_edges_length);
__tuple t3;if(v_empty(3))t3=16;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=3;else filltuple(a+4, t4);
err=close_edges_length(a_obj(0),a_obj(1),varp_obj(2),t3,t4);
func_end_seterr;

func_begin(x_close_edges);
__tuple t3;if(v_empty(3))t3=16;else filltuple(a+3, t3);
err=close_edges(a_obj(0),a_obj(1),varp_obj(2),t3);
func_end_seterr;

func_begin(x_detect_edge_segments);
__tuple t1;if(v_empty(1))t1=5;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=32;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=3;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=10;else filltuple(a+4, t4);
__tuple t5;
__tuple t6;
__tuple t7;
__tuple t8;
err=detect_edge_segments(a_obj(0),t1,t2,t3,t4,&t5,&t6,&t7,&t8);
fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);
func_end_seterr;

func_begin(x_clear_all_color_trans_luts);
err=clear_all_color_trans_luts();
func_end_seterr;

func_begin(x_clear_color_trans_lut);
__tuple t0;filltuple(a+0, t0);
err=clear_color_trans_lut(t0);
func_end_seterr;

func_begin(x_apply_color_trans_lut);
__tuple t6;filltuple(a+6, t6);
err=apply_color_trans_lut(a_obj(0),a_obj(1),a_obj(2),varp_obj(3),varp_obj(4),varp_obj(5),t6);
func_end_seterr;

func_begin(x_create_color_trans_lut);
__tuple t0;if(v_empty(0))t0="hsv";else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="from_rgb";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=8;else filltuple(a+2, t2);
__tuple t3;
err=create_color_trans_lut(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_cfa_to_rgb);
__tuple t2;if(v_empty(2))t2="bayer_gb";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="bilinear";else filltuple(a+3, t3);
err=cfa_to_rgb(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_rgb1_to_gray);
err=rgb1_to_gray(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_rgb3_to_gray);
err=rgb3_to_gray(a_obj(0),a_obj(1),a_obj(2),varp_obj(3));
func_end_seterr;

func_begin(x_trans_from_rgb);
__tuple t6;if(v_empty(6))t6="hsv";else filltuple(a+6, t6);
err=trans_from_rgb(a_obj(0),a_obj(1),a_obj(2),varp_obj(3),varp_obj(4),varp_obj(5),t6);
func_end_seterr;

func_begin(x_trans_to_rgb);
__tuple t6;if(v_empty(6))t6="hsv";else filltuple(a+6, t6);
err=trans_to_rgb(a_obj(0),a_obj(1),a_obj(2),varp_obj(3),varp_obj(4),varp_obj(5),t6);
func_end_seterr;

func_begin(x_bit_mask);
__tuple t2;if(v_empty(2))t2=128;else filltuple(a+2, t2);
err=bit_mask(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_bit_slice);
__tuple t2;if(v_empty(2))t2=8;else filltuple(a+2, t2);
err=bit_slice(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_bit_rshift);
__tuple t2;if(v_empty(2))t2=3;else filltuple(a+2, t2);
err=bit_rshift(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_bit_lshift);
__tuple t2;if(v_empty(2))t2=3;else filltuple(a+2, t2);
err=bit_lshift(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_bit_not);
err=bit_not(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_bit_xor);
err=bit_xor(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_bit_or);
err=bit_or(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_bit_and);
err=bit_and(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_gamma_image);
__tuple t2;if(v_empty(2))t2=0.416666666667;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.055;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.0031308;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=255.0;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="true";else filltuple(a+6, t6);
err=gamma_image(a_obj(0),varp_obj(1),t2,t3,t4,t5,t6);
func_end_seterr;

func_begin(x_pow_image);
__tuple t2;if(v_empty(2))t2=2;else filltuple(a+2, t2);
err=pow_image(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_exp_image);
__tuple t2;if(v_empty(2))t2="e";else filltuple(a+2, t2);
err=exp_image(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_log_image);
__tuple t2;if(v_empty(2))t2="e";else filltuple(a+2, t2);
err=log_image(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_atan2_image);
err=atan2_image(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_atan_image);
err=atan_image(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_acos_image);
err=acos_image(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_asin_image);
err=asin_image(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_tan_image);
err=tan_image(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_cos_image);
err=cos_image(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_sin_image);
err=sin_image(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_abs_diff_image);
__tuple t3;if(v_empty(3))t3=1.0;else filltuple(a+3, t3);
err=abs_diff_image(a_obj(0),a_obj(1),varp_obj(2),t3);
func_end_seterr;

func_begin(x_sqrt_image);
err=sqrt_image(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_sub_image);
__tuple t3;if(v_empty(3))t3=1.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=128.0;else filltuple(a+4, t4);
err=sub_image(a_obj(0),a_obj(1),varp_obj(2),t3,t4);
func_end_seterr;

func_begin(x_scale_image);
__tuple t2;if(v_empty(2))t2=0.01;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
err=scale_image(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_div_image);
__tuple t3;if(v_empty(3))t3=255;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0;else filltuple(a+4, t4);
err=div_image(a_obj(0),a_obj(1),varp_obj(2),t3,t4);
func_end_seterr;

func_begin(x_mult_image);
__tuple t3;if(v_empty(3))t3=0.005;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0;else filltuple(a+4, t4);
err=mult_image(a_obj(0),a_obj(1),varp_obj(2),t3,t4);
func_end_seterr;

func_begin(x_add_image);
__tuple t3;if(v_empty(3))t3=0.5;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0;else filltuple(a+4, t4);
err=add_image(a_obj(0),a_obj(1),varp_obj(2),t3,t4);
func_end_seterr;

func_begin(x_abs_image);
err=abs_image(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_min_image);
err=min_image(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_max_image);
err=max_image(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_invert_image);
err=invert_image(a_obj(0),varp_obj(1));
func_end_seterr;

func_begin(x_adjust_mosaic_images);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="standard";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="mult_gray";else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8="laguerre";else filltuple(a+8, t8);
err=adjust_mosaic_images(a_obj(0),varp_obj(1),t2,t3,t4,t5,t6,t7,t8);
func_end_seterr;

func_begin(x_gen_cube_map_mosaic);
__tuple t7;filltuple(a+7, t7);
__tuple t8;filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=1000;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10="voronoi";else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11="bilinear";else filltuple(a+11, t11);
err=gen_cube_map_mosaic(a_obj(0),varp_obj(1),varp_obj(2),varp_obj(3),varp_obj(4),varp_obj(5),varp_obj(6),t7,t8,t9,t10,t11);
func_end_seterr;

func_begin(x_gen_spherical_mosaic);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=-90;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=90;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=-180;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=180;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=0.1;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9="voronoi";else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10="bilinear";else filltuple(a+10, t10);
err=gen_spherical_mosaic(a_obj(0),varp_obj(1),t2,t3,t4,t5,t6,t7,t8,t9,t10);
func_end_seterr;

func_begin(x_gen_bundle_adjusted_mosaic);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="default";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="false";else filltuple(a+4, t4);
__tuple t5;
err=gen_bundle_adjusted_mosaic(a_obj(0),varp_obj(1),t2,t3,t4,&t5);
fillvar(t5, a+5);
func_end_seterr;

func_begin(x_gen_projective_mosaic);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="default";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="false";else filltuple(a+7, t7);
__tuple t8;
err=gen_projective_mosaic(a_obj(0),varp_obj(1),t2,t3,t4,t5,t6,t7,&t8);
fillvar(t8, a+8);
func_end_seterr;

func_begin(x_projective_trans_image_size);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="bilinear";else filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="false";else filltuple(a+6, t6);
err=projective_trans_image_size(a_obj(0),varp_obj(1),t2,t3,t4,t5,t6);
func_end_seterr;

func_begin(x_projective_trans_image);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="bilinear";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="false";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="false";else filltuple(a+5, t5);
err=projective_trans_image(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_affine_trans_image_size);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="constant";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=640;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=480;else filltuple(a+5, t5);
err=affine_trans_image_size(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_affine_trans_image);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="constant";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="false";else filltuple(a+4, t4);
err=affine_trans_image(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_zoom_image_factor);
__tuple t2;if(v_empty(2))t2=0.5;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.5;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="constant";else filltuple(a+4, t4);
err=zoom_image_factor(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_zoom_image_size);
__tuple t2;if(v_empty(2))t2=512;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=512;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="constant";else filltuple(a+4, t4);
err=zoom_image_size(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_mirror_image);
__tuple t2;if(v_empty(2))t2="row";else filltuple(a+2, t2);
err=mirror_image(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_rotate_image);
__tuple t2;if(v_empty(2))t2=90;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="constant";else filltuple(a+3, t3);
err=rotate_image(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_polar_trans_image_inv);
__tuple t2;if(v_empty(2))t2=256;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=256;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=6.2831853;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=0;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=100;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=512;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=512;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10="nearest_neighbor";else filltuple(a+10, t10);
err=polar_trans_image_inv(a_obj(0),varp_obj(1),t2,t3,t4,t5,t6,t7,t8,t9,t10);
func_end_seterr;

func_begin(x_polar_trans_image_ext);
__tuple t2;if(v_empty(2))t2=256;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=256;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=6.2831853;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=0;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=100;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=512;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=512;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10="nearest_neighbor";else filltuple(a+10, t10);
err=polar_trans_image_ext(a_obj(0),varp_obj(1),t2,t3,t4,t5,t6,t7,t8,t9,t10);
func_end_seterr;

func_begin(x_polar_trans_image);
__tuple t2;if(v_empty(2))t2=100;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=100;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=314;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=200;else filltuple(a+5, t5);
err=polar_trans_image(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_vector_field_to_hom_mat2d);
__tuple t1;
err=vector_field_to_hom_mat2d(a_obj(0),&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_deserialize_xld);
__tuple t1;filltuple(a+1, t1);
err=deserialize_xld(varp_obj(0),t1);
func_end_seterr;

func_begin(x_serialize_xld);
__tuple t1;
err=serialize_xld(a_obj(0),&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_read_polygon_xld_dxf);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;
err=read_polygon_xld_dxf(varp_obj(0),t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_write_polygon_xld_dxf);
__tuple t1;filltuple(a+1, t1);
err=write_polygon_xld_dxf(a_obj(0),t1);
func_end_seterr;

func_begin(x_read_contour_xld_dxf);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;
err=read_contour_xld_dxf(varp_obj(0),t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_write_contour_xld_dxf);
__tuple t1;filltuple(a+1, t1);
err=write_contour_xld_dxf(a_obj(0),t1);
func_end_seterr;

func_begin(x_copy_file);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=copy_file(t0,t1);
func_end_seterr;

func_begin(x_set_current_dir);
__tuple t0;filltuple(a+0, t0);
err=set_current_dir(t0);
func_end_seterr;

func_begin(x_get_current_dir);
__tuple t0;
err=get_current_dir(&t0);
fillvar(t0, a+0);
func_end_seterr;

func_begin(x_remove_dir);
__tuple t0;filltuple(a+0, t0);
err=remove_dir(t0);
func_end_seterr;

func_begin(x_make_dir);
__tuple t0;filltuple(a+0, t0);
err=make_dir(t0);
func_end_seterr;

func_begin(x_list_files);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="files";else filltuple(a+1, t1);
__tuple t2;
err=list_files(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_delete_file);
__tuple t0;filltuple(a+0, t0);
err=delete_file(t0);
func_end_seterr;

func_begin(x_file_exists);
__tuple t0;if(v_empty(0))t0="/bin/cc";else filltuple(a+0, t0);
__tuple t1;
err=file_exists(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_read_object);
__tuple t1;filltuple(a+1, t1);
err=read_object(varp_obj(0),t1);
func_end_seterr;

func_begin(x_write_object);
__tuple t1;filltuple(a+1, t1);
err=write_object(a_obj(0),t1);
func_end_seterr;

func_begin(x_deserialize_object);
__tuple t1;filltuple(a+1, t1);
err=deserialize_object(varp_obj(0),t1);
func_end_seterr;

func_begin(x_serialize_object);
__tuple t1;
err=serialize_object(a_obj(0),&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_deserialize_image);
__tuple t1;filltuple(a+1, t1);
err=deserialize_image(varp_obj(0),t1);
func_end_seterr;

func_begin(x_serialize_image);
__tuple t1;
err=serialize_image(a_obj(0),&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_deserialize_region);
__tuple t1;filltuple(a+1, t1);
err=deserialize_region(varp_obj(0),t1);
func_end_seterr;

func_begin(x_serialize_region);
__tuple t1;
err=serialize_region(a_obj(0),&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_region);
__tuple t1;if(v_empty(1))t1="region.hobj";else filltuple(a+1, t1);
err=write_region(a_obj(0),t1);
func_end_seterr;

func_begin(x_write_image);
__tuple t1;if(v_empty(1))t1="tiff";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
err=write_image(a_obj(0),t1,t2,t3);
func_end_seterr;

func_begin(x_read_sequence);
__tuple t1;if(v_empty(1))t1=0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=512;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=512;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=0;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=512;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=512;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8="byte";else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9="MSBFirst";else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10="MSBFirst";else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11="byte";else filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12=1;else filltuple(a+12, t12);
__tuple t13;filltuple(a+13, t13);
err=read_sequence(varp_obj(0),t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13);
func_end_seterr;

func_begin(x_read_region);
__tuple t1;filltuple(a+1, t1);
err=read_region(varp_obj(0),t1);
func_end_seterr;

func_begin(x_read_image);
__tuple t1;if(v_empty(1))t1="fabrik";else filltuple(a+1, t1);
err=read_image(varp_obj(0),t1);
func_end_seterr;

func_begin(x_open_file);
__tuple t0;if(v_empty(0))t0="standard";else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="output";else filltuple(a+1, t1);
__tuple t2;
err=open_file(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_fwrite_string);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="hallo";else filltuple(a+1, t1);
err=fwrite_string(t0,t1);
func_end_seterr;

func_begin(x_fread_line);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
err=fread_line(t0,&t1,&t2);
fillvar(t1, a+1);fillvar(t2, a+2);
func_end_seterr;

func_begin(x_fread_string);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
err=fread_string(t0,&t1,&t2);
fillvar(t1, a+1);fillvar(t2, a+2);
func_end_seterr;

func_begin(x_fread_char);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=fread_char(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_fnew_line);
__tuple t0;filltuple(a+0, t0);
err=fnew_line(t0);
func_end_seterr;

func_begin(x_close_file);
__tuple t0;filltuple(a+0, t0);
err=close_file(t0);
func_end_seterr;

func_begin(x_close_all_files);
err=close_all_files();
func_end_seterr;

func_begin(x_test_closed_xld);
__tuple t1;
err=test_closed_xld(a_obj(0),&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_get_grayval_contour_xld);
__tuple t2;if(v_empty(2))t2="nearest_neighbor";else filltuple(a+2, t2);
__tuple t3;
err=get_grayval_contour_xld(a_obj(0),a_obj(1),t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_moments_any_points_xld);
__tuple t1;if(v_empty(1))t1="unnormalized";else filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=1;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=1;else filltuple(a+6, t6);
__tuple t7;
err=moments_any_points_xld(a_obj(0),t1,t2,t3,t4,t5,t6,&t7);
fillvar(t7, a+7);
func_end_seterr;

func_begin(x_eccentricity_points_xld);
__tuple t1;
err=eccentricity_points_xld(a_obj(0),&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_elliptic_axis_points_xld);
__tuple t1;
__tuple t2;
__tuple t3;
err=elliptic_axis_points_xld(a_obj(0),&t1,&t2,&t3);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_orientation_points_xld);
__tuple t1;
err=orientation_points_xld(a_obj(0),&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_moments_points_xld);
__tuple t1;
__tuple t2;
__tuple t3;
err=moments_points_xld(a_obj(0),&t1,&t2,&t3);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_area_center_points_xld);
__tuple t1;
__tuple t2;
__tuple t3;
err=area_center_points_xld(a_obj(0),&t1,&t2,&t3);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_test_self_intersection_xld);
__tuple t1;if(v_empty(1))t1="true";else filltuple(a+1, t1);
__tuple t2;
err=test_self_intersection_xld(a_obj(0),t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_select_xld_point);
__tuple t2;if(v_empty(2))t2=100.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=100.0;else filltuple(a+3, t3);
err=select_xld_point(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_test_xld_point);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;
err=test_xld_point(a_obj(0),t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_select_shape_xld);
__tuple t2;if(v_empty(2))t2="area";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="and";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=150.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=99999.0;else filltuple(a+5, t5);
err=select_shape_xld(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_orientation_xld);
__tuple t1;
err=orientation_xld(a_obj(0),&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_eccentricity_xld);
__tuple t1;
__tuple t2;
__tuple t3;
err=eccentricity_xld(a_obj(0),&t1,&t2,&t3);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_compactness_xld);
__tuple t1;
err=compactness_xld(a_obj(0),&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_diameter_xld);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
err=diameter_xld(a_obj(0),&t1,&t2,&t3,&t4,&t5);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_convexity_xld);
__tuple t1;
err=convexity_xld(a_obj(0),&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_circularity_xld);
__tuple t1;
err=circularity_xld(a_obj(0),&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_elliptic_axis_xld);
__tuple t1;
__tuple t2;
__tuple t3;
err=elliptic_axis_xld(a_obj(0),&t1,&t2,&t3);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_smallest_rectangle2_xld);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
err=smallest_rectangle2_xld(a_obj(0),&t1,&t2,&t3,&t4,&t5);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_smallest_rectangle1_xld);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
err=smallest_rectangle1_xld(a_obj(0),&t1,&t2,&t3,&t4);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_smallest_circle_xld);
__tuple t1;
__tuple t2;
__tuple t3;
err=smallest_circle_xld(a_obj(0),&t1,&t2,&t3);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_shape_trans_xld);
__tuple t2;if(v_empty(2))t2="convex";else filltuple(a+2, t2);
err=shape_trans_xld(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_length_xld);
__tuple t1;
err=length_xld(a_obj(0),&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_moments_any_xld);
__tuple t1;if(v_empty(1))t1="unnormalized";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="positive";else filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=1;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=1;else filltuple(a+7, t7);
__tuple t8;
err=moments_any_xld(a_obj(0),t1,t2,t3,t4,t5,t6,t7,&t8);
fillvar(t8, a+8);
func_end_seterr;

func_begin(x_moments_xld);
__tuple t1;
__tuple t2;
__tuple t3;
err=moments_xld(a_obj(0),&t1,&t2,&t3);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_area_center_xld);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
err=area_center_xld(a_obj(0),&t1,&t2,&t3,&t4);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_moments_region_central_invar);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
err=moments_region_central_invar(a_obj(0),&t1,&t2,&t3,&t4);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_moments_region_central);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
err=moments_region_central(a_obj(0),&t1,&t2,&t3,&t4);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_moments_region_3rd_invar);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
err=moments_region_3rd_invar(a_obj(0),&t1,&t2,&t3,&t4);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_moments_region_3rd);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
err=moments_region_3rd(a_obj(0),&t1,&t2,&t3,&t4);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_smallest_rectangle2);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
err=smallest_rectangle2(a_obj(0),&t1,&t2,&t3,&t4,&t5);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_smallest_rectangle1);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
err=smallest_rectangle1(a_obj(0),&t1,&t2,&t3,&t4);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_smallest_circle);
__tuple t1;
__tuple t2;
__tuple t3;
err=smallest_circle(a_obj(0),&t1,&t2,&t3);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_select_shape_proto);
__tuple t3;if(v_empty(3))t3="covers";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=50.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=100.0;else filltuple(a+5, t5);
err=select_shape_proto(a_obj(0),a_obj(1),varp_obj(2),t3,t4,t5);
func_end_seterr;

func_begin(x_region_features);
__tuple t1;if(v_empty(1))t1="area";else filltuple(a+1, t1);
__tuple t2;
err=region_features(a_obj(0),t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_select_shape);
__tuple t2;if(v_empty(2))t2="area";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="and";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=150.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=99999.0;else filltuple(a+5, t5);
err=select_shape(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_runlength_features);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
err=runlength_features(a_obj(0),&t1,&t2,&t3,&t4,&t5);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_find_neighbors);
__tuple t2;if(v_empty(2))t2=1;else filltuple(a+2, t2);
__tuple t3;
__tuple t4;
err=find_neighbors(a_obj(0),a_obj(1),t2,&t3,&t4);
fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_moments_region_2nd_rel_invar);
__tuple t1;
__tuple t2;
err=moments_region_2nd_rel_invar(a_obj(0),&t1,&t2);
fillvar(t1, a+1);fillvar(t2, a+2);
func_end_seterr;

func_begin(x_moments_region_2nd_invar);
__tuple t1;
__tuple t2;
__tuple t3;
err=moments_region_2nd_invar(a_obj(0),&t1,&t2,&t3);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_moments_region_2nd);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
err=moments_region_2nd(a_obj(0),&t1,&t2,&t3,&t4,&t5);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_distance_rr_min);
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
__tuple t6;
err=distance_rr_min(a_obj(0),a_obj(1),&t2,&t3,&t4,&t5,&t6);
fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_distance_rr_min_dil);
__tuple t2;
err=distance_rr_min_dil(a_obj(0),a_obj(1),&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_diameter_region);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
err=diameter_region(a_obj(0),&t1,&t2,&t3,&t4,&t5);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_test_region_point);
__tuple t1;if(v_empty(1))t1=100;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=100;else filltuple(a+2, t2);
__tuple t3;
err=test_region_point(a_obj(0),t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_get_region_index);
__tuple t1;if(v_empty(1))t1=100;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=100;else filltuple(a+2, t2);
__tuple t3;
err=get_region_index(a_obj(0),t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_select_region_point);
__tuple t2;if(v_empty(2))t2=100;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=100;else filltuple(a+3, t3);
err=select_region_point(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_select_shape_std);
__tuple t2;if(v_empty(2))t2="max_area";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=70.0;else filltuple(a+3, t3);
err=select_shape_std(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_hamming_distance_norm);
__tuple t2;if(v_empty(2))t2="center";else filltuple(a+2, t2);
__tuple t3;
__tuple t4;
err=hamming_distance_norm(a_obj(0),a_obj(1),t2,&t3,&t4);
fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_hamming_distance);
__tuple t2;
__tuple t3;
err=hamming_distance(a_obj(0),a_obj(1),&t2,&t3);
fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_eccentricity);
__tuple t1;
__tuple t2;
__tuple t3;
err=eccentricity(a_obj(0),&t1,&t2,&t3);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_euler_number);
__tuple t1;
err=euler_number(a_obj(0),&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_orientation_region);
__tuple t1;
err=orientation_region(a_obj(0),&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_elliptic_axis);
__tuple t1;
__tuple t2;
__tuple t3;
err=elliptic_axis(a_obj(0),&t1,&t2,&t3);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_select_region_spatial);
__tuple t2;if(v_empty(2))t2="left";else filltuple(a+2, t2);
__tuple t3;
__tuple t4;
err=select_region_spatial(a_obj(0),a_obj(1),t2,&t3,&t4);
fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_spatial_relation);
__tuple t2;if(v_empty(2))t2=50;else filltuple(a+2, t2);
__tuple t3;
__tuple t4;
__tuple t5;
__tuple t6;
err=spatial_relation(a_obj(0),a_obj(1),t2,&t3,&t4,&t5,&t6);
fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_convexity);
__tuple t1;
err=convexity(a_obj(0),&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_contlength);
__tuple t1;
err=contlength(a_obj(0),&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_connect_and_holes);
__tuple t1;
__tuple t2;
err=connect_and_holes(a_obj(0),&t1,&t2);
fillvar(t1, a+1);fillvar(t2, a+2);
func_end_seterr;

func_begin(x_rectangularity);
__tuple t1;
err=rectangularity(a_obj(0),&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_compactness);
__tuple t1;
err=compactness(a_obj(0),&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_circularity);
__tuple t1;
err=circularity(a_obj(0),&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_area_holes);
__tuple t1;
err=area_holes(a_obj(0),&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_area_center);
__tuple t1;
__tuple t2;
__tuple t3;
err=area_center(a_obj(0),&t1,&t2,&t3);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_runlength_distribution);
__tuple t1;
__tuple t2;
err=runlength_distribution(a_obj(0),&t1,&t2);
fillvar(t1, a+1);fillvar(t2, a+2);
func_end_seterr;

func_begin(x_roundness);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
err=roundness(a_obj(0),&t1,&t2,&t3,&t4);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_inner_rectangle1);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
err=inner_rectangle1(a_obj(0),&t1,&t2,&t3,&t4);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_inner_circle);
__tuple t1;
__tuple t2;
__tuple t3;
err=inner_circle(a_obj(0),&t1,&t2,&t3);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_select_lines_longest);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=10;else filltuple(a+4, t4);
__tuple t5;
__tuple t6;
__tuple t7;
__tuple t8;
err=select_lines_longest(t0,t1,t2,t3,t4,&t5,&t6,&t7,&t8);
fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);
func_end_seterr;

func_begin(x_partition_lines);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="min";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="max";else filltuple(a+7, t7);
__tuple t8;
__tuple t9;
__tuple t10;
__tuple t11;
__tuple t12;
__tuple t13;
__tuple t14;
__tuple t15;
err=partition_lines(t0,t1,t2,t3,t4,t5,t6,t7,&t8,&t9,&t10,&t11,&t12,&t13,&t14,&t15);
fillvar(t8, a+8);fillvar(t9, a+9);fillvar(t10, a+10);fillvar(t11, a+11);fillvar(t12, a+12);fillvar(t13, a+13);fillvar(t14, a+14);fillvar(t15, a+15);
func_end_seterr;

func_begin(x_select_lines);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="length";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="and";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="min";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="max";else filltuple(a+7, t7);
__tuple t8;
__tuple t9;
__tuple t10;
__tuple t11;
err=select_lines(t0,t1,t2,t3,t4,t5,t6,t7,&t8,&t9,&t10,&t11);
fillvar(t8, a+8);fillvar(t9, a+9);fillvar(t10, a+10);fillvar(t11, a+11);
func_end_seterr;

func_begin(x_line_position);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;
__tuple t5;
__tuple t6;
__tuple t7;
err=line_position(t0,t1,t2,t3,&t4,&t5,&t6,&t7);
fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);
func_end_seterr;

func_begin(x_line_orientation);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;
err=line_orientation(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_approx_chain_simple);
__tuple t0;if(v_empty(0))t0=32;else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=32;else filltuple(a+1, t1);
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
__tuple t6;
__tuple t7;
__tuple t8;
__tuple t9;
__tuple t10;
__tuple t11;
err=approx_chain_simple(t0,t1,&t2,&t3,&t4,&t5,&t6,&t7,&t8,&t9,&t10,&t11);
fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);fillvar(t9, a+9);fillvar(t10, a+10);fillvar(t11, a+11);
func_end_seterr;

func_begin(x_approx_chain);
__tuple t0;if(v_empty(0))t0=32;else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=32;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0.5;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=2.4;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.3;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=0.9;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=0.2;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=0.5;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=2.4;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=2;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=12;else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11=1.0;else filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12=1.0;else filltuple(a+12, t12);
__tuple t13;if(v_empty(13))t13=1.0;else filltuple(a+13, t13);
__tuple t14;
__tuple t15;
__tuple t16;
__tuple t17;
__tuple t18;
__tuple t19;
__tuple t20;
__tuple t21;
__tuple t22;
__tuple t23;
err=approx_chain(t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,&t14,&t15,&t16,&t17,&t18,&t19,&t20,&t21,&t22,&t23);
fillvar(t14, a+14);fillvar(t15, a+15);fillvar(t16, a+16);fillvar(t17, a+17);fillvar(t18, a+18);fillvar(t19, a+19);fillvar(t20, a+20);fillvar(t21, a+21);fillvar(t22, a+22);fillvar(t23, a+23);
func_end_seterr;

func_begin(x_fit_surface_first_order);
__tuple t2;if(v_empty(2))t2="regression";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=5;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=2.0;else filltuple(a+4, t4);
__tuple t5;
__tuple t6;
__tuple t7;
err=fit_surface_first_order(a_obj(0),a_obj(1),t2,t3,t4,&t5,&t6,&t7);
fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);
func_end_seterr;

func_begin(x_fit_surface_second_order);
__tuple t2;if(v_empty(2))t2="regression";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=5;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=2.0;else filltuple(a+4, t4);
__tuple t5;
__tuple t6;
__tuple t7;
__tuple t8;
__tuple t9;
__tuple t10;
err=fit_surface_second_order(a_obj(0),a_obj(1),t2,t3,t4,&t5,&t6,&t7,&t8,&t9,&t10);
fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);fillvar(t9, a+9);fillvar(t10, a+10);
func_end_seterr;

func_begin(x_gen_image_surface_second_order);
__tuple t1;if(v_empty(1))t1="byte";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=1.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=1.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=1.0;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=1.0;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=1.0;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=256.0;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=256.0;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=512;else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11=512;else filltuple(a+11, t11);
err=gen_image_surface_second_order(varp_obj(0),t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11);
func_end_seterr;

func_begin(x_gen_image_surface_first_order);
__tuple t1;if(v_empty(1))t1="byte";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=1.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=1.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=1.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=256.0;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=256.0;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=512;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=512;else filltuple(a+8, t8);
err=gen_image_surface_first_order(varp_obj(0),t1,t2,t3,t4,t5,t6,t7,t8);
func_end_seterr;

func_begin(x_shape_histo_point);
__tuple t2;if(v_empty(2))t2="convexity";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=256;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=256;else filltuple(a+4, t4);
__tuple t5;
__tuple t6;
err=shape_histo_point(a_obj(0),a_obj(1),t2,t3,t4,&t5,&t6);
fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_shape_histo_all);
__tuple t2;if(v_empty(2))t2="connected_components";else filltuple(a+2, t2);
__tuple t3;
__tuple t4;
err=shape_histo_all(a_obj(0),a_obj(1),t2,&t3,&t4);
fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_gray_features);
__tuple t2;if(v_empty(2))t2="mean";else filltuple(a+2, t2);
__tuple t3;
err=gray_features(a_obj(0),a_obj(1),t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_select_gray);
__tuple t3;if(v_empty(3))t3="mean";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="and";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=128.0;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=255.0;else filltuple(a+6, t6);
err=select_gray(a_obj(0),a_obj(1),varp_obj(2),t3,t4,t5,t6);
func_end_seterr;

func_begin(x_min_max_gray);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;
__tuple t4;
__tuple t5;
err=min_max_gray(a_obj(0),a_obj(1),t2,&t3,&t4,&t5);
fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_intensity);
__tuple t2;
__tuple t3;
err=intensity(a_obj(0),a_obj(1),&t2,&t3);
fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_gray_histo_range);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=255;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=256;else filltuple(a+4, t4);
__tuple t5;
__tuple t6;
err=gray_histo_range(a_obj(0),a_obj(1),t2,t3,t4,&t5,&t6);
fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_histo_2dim);
err=histo_2dim(a_obj(0),a_obj(1),a_obj(2),varp_obj(3));
func_end_seterr;

func_begin(x_gray_histo_abs);
__tuple t2;if(v_empty(2))t2=1.0;else filltuple(a+2, t2);
__tuple t3;
err=gray_histo_abs(a_obj(0),a_obj(1),t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_gray_histo);
__tuple t2;
__tuple t3;
err=gray_histo(a_obj(0),a_obj(1),&t2,&t3);
fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_entropy_gray);
__tuple t2;
__tuple t3;
err=entropy_gray(a_obj(0),a_obj(1),&t2,&t3);
fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_cooc_feature_matrix);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
err=cooc_feature_matrix(a_obj(0),&t1,&t2,&t3,&t4);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_cooc_feature_image);
__tuple t2;if(v_empty(2))t2=6;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
__tuple t4;
__tuple t5;
__tuple t6;
__tuple t7;
err=cooc_feature_image(a_obj(0),a_obj(1),t2,t3,&t4,&t5,&t6,&t7);
fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);
func_end_seterr;

func_begin(x_gen_cooc_matrix);
__tuple t3;if(v_empty(3))t3=6;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0;else filltuple(a+4, t4);
err=gen_cooc_matrix(a_obj(0),a_obj(1),varp_obj(2),t3,t4);
func_end_seterr;

func_begin(x_moments_gray_plane);
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
__tuple t6;
err=moments_gray_plane(a_obj(0),a_obj(1),&t2,&t3,&t4,&t5,&t6);
fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_plane_deviation);
__tuple t2;
err=plane_deviation(a_obj(0),a_obj(1),&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_elliptic_axis_gray);
__tuple t2;
__tuple t3;
__tuple t4;
err=elliptic_axis_gray(a_obj(0),a_obj(1),&t2,&t3,&t4);
fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_area_center_gray);
__tuple t2;
__tuple t3;
__tuple t4;
err=area_center_gray(a_obj(0),a_obj(1),&t2,&t3,&t4);
fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_gray_projections);
__tuple t2;if(v_empty(2))t2="simple";else filltuple(a+2, t2);
__tuple t3;
__tuple t4;
err=gray_projections(a_obj(0),a_obj(1),t2,&t3,&t4);
fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_get_data_code_2d_objects);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="all_candidates";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="candidate_xld";else filltuple(a+3, t3);
err=get_data_code_2d_objects(varp_obj(0),t1,t2,t3);
func_end_seterr;

func_begin(x_get_data_code_2d_results);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="all_candidates";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="status";else filltuple(a+2, t2);
__tuple t3;
err=get_data_code_2d_results(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_find_data_code_2d);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;if(!v_empty(4)) filltuple(a+4, t4);
__tuple t5;
__tuple t6;
err=find_data_code_2d(a_obj(0),varp_obj(1),t2,t3,t4,&t5,&t6);
fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_set_data_code_2d_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="polarity";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="light_on_dark";else filltuple(a+2, t2);
err=set_data_code_2d_param(t0,t1,t2);
func_end_seterr;

func_begin(x_get_data_code_2d_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="contrast_min";else filltuple(a+1, t1);
__tuple t2;
err=get_data_code_2d_param(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_query_data_code_2d_params);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="get_result_params";else filltuple(a+1, t1);
__tuple t2;
err=query_data_code_2d_params(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_deserialize_data_code_2d_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_data_code_2d_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_serialize_data_code_2d_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_data_code_2d_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_read_data_code_2d_model);
__tuple t0;if(v_empty(0))t0="data_code_model.dcm";else filltuple(a+0, t0);
__tuple t1;
err=read_data_code_2d_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_data_code_2d_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="data_code_model.dcm";else filltuple(a+1, t1);
err=write_data_code_2d_model(t0,t1);
func_end_seterr;

func_begin(x_clear_all_data_code_2d_models);
err=clear_all_data_code_2d_models();
func_end_seterr;

func_begin(x_clear_data_code_2d_model);
__tuple t0;filltuple(a+0, t0);
err=clear_data_code_2d_model(t0);
func_end_seterr;

func_begin(x_create_data_code_2d_model);
__tuple t0;if(v_empty(0))t0="Data Matrix ECC 200";else filltuple(a+0, t0);
__tuple t1;if(!v_empty(1)) filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;
err=create_data_code_2d_model(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_deserialize_class_train_data);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_class_train_data(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_serialize_class_train_data);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_class_train_data(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_read_class_train_data);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=read_class_train_data(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_class_train_data);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=write_class_train_data(t0,t1);
func_end_seterr;

func_begin(x_select_sub_feature_class_train_data);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=select_sub_feature_class_train_data(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_set_feature_lengths_class_train_data);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
err=set_feature_lengths_class_train_data(t0,t1,t2);
func_end_seterr;

func_begin(x_get_class_train_data_gmm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=get_class_train_data_gmm(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_add_class_train_data_gmm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=add_class_train_data_gmm(t0,t1);
func_end_seterr;

func_begin(x_get_class_train_data_mlp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=get_class_train_data_mlp(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_add_class_train_data_mlp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=add_class_train_data_mlp(t0,t1);
func_end_seterr;

func_begin(x_get_class_train_data_knn);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=get_class_train_data_knn(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_add_class_train_data_knn);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=add_class_train_data_knn(t0,t1);
func_end_seterr;

func_begin(x_get_class_train_data_svm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=get_class_train_data_svm(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_add_class_train_data_svm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=add_class_train_data_svm(t0,t1);
func_end_seterr;

func_begin(x_get_sample_num_class_train_data);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=get_sample_num_class_train_data(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_get_sample_class_train_data);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
__tuple t3;
err=get_sample_class_train_data(t0,t1,&t2,&t3);
fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_clear_all_class_train_data);
err=clear_all_class_train_data();
func_end_seterr;

func_begin(x_clear_class_train_data);
__tuple t0;filltuple(a+0, t0);
err=clear_class_train_data(t0);
func_end_seterr;

func_begin(x_add_sample_class_train_data);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="row";else filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
err=add_sample_class_train_data(t0,t1,t2,t3);
func_end_seterr;

func_begin(x_create_class_train_data);
__tuple t0;if(v_empty(0))t0=10;else filltuple(a+0, t0);
__tuple t1;
err=create_class_train_data(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_select_feature_set_mlp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="greedy";else filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;
__tuple t5;
__tuple t6;
err=select_feature_set_mlp(t0,t1,t2,t3,&t4,&t5,&t6);
fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_select_feature_set_svm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="greedy";else filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;
__tuple t5;
__tuple t6;
err=select_feature_set_svm(t0,t1,t2,t3,&t4,&t5,&t6);
fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_select_feature_set_gmm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="greedy";else filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;
__tuple t5;
__tuple t6;
err=select_feature_set_gmm(t0,t1,t2,t3,&t4,&t5,&t6);
fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_select_feature_set_knn);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="greedy";else filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;
__tuple t5;
__tuple t6;
err=select_feature_set_knn(t0,t1,t2,t3,&t4,&t5,&t6);
fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_clear_all_class_knn);
err=clear_all_class_knn();
func_end_seterr;

func_begin(x_clear_class_knn);
__tuple t0;filltuple(a+0, t0);
err=clear_class_knn(t0);
func_end_seterr;

func_begin(x_get_sample_num_class_knn);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=get_sample_num_class_knn(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_get_sample_class_knn);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
__tuple t3;
err=get_sample_class_knn(t0,t1,&t2,&t3);
fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_deserialize_class_knn);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_class_knn(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_serialize_class_knn);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_class_knn(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_read_class_knn);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=read_class_knn(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_class_knn);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=write_class_knn(t0,t1);
func_end_seterr;

func_begin(x_get_params_class_knn);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1)){const char* vs1[]={"method","k"};arr2tupleS(vs1, 2, t1);}else filltuple(a+1, t1);
__tuple t2;
err=get_params_class_knn(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_set_params_class_knn);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1)){const char* vs1[]={"method","k","max_num_classes"};arr2tupleS(vs1, 3, t1);}else filltuple(a+1, t1);
__tuple t2;if(v_empty(2)){const char* vs2[]={"classes_distance","5","1"};arr2tupleS(vs2, 3, t2);}else filltuple(a+2, t2);
err=set_params_class_knn(t0,t1,t2);
func_end_seterr;

func_begin(x_classify_class_knn);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
__tuple t3;
err=classify_class_knn(t0,t1,&t2,&t3);
fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_train_class_knn);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(!v_empty(1)) filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
err=train_class_knn(t0,t1,t2);
func_end_seterr;

func_begin(x_add_sample_class_knn);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
err=add_sample_class_knn(t0,t1,t2);
func_end_seterr;

func_begin(x_create_class_knn);
__tuple t0;if(v_empty(0))t0=10;else filltuple(a+0, t0);
__tuple t1;
err=create_class_knn(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_clear_all_class_lut);
err=clear_all_class_lut();
func_end_seterr;

func_begin(x_clear_class_lut);
__tuple t0;filltuple(a+0, t0);
err=clear_class_lut(t0);
func_end_seterr;

func_begin(x_create_class_lut_knn);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(!v_empty(1)) filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;
err=create_class_lut_knn(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_create_class_lut_gmm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(!v_empty(1)) filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;
err=create_class_lut_gmm(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_create_class_lut_svm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(!v_empty(1)) filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;
err=create_class_lut_svm(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_create_class_lut_mlp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(!v_empty(1)) filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;
err=create_class_lut_mlp(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_clear_all_class_gmm);
err=clear_all_class_gmm();
func_end_seterr;

func_begin(x_clear_class_gmm);
__tuple t0;filltuple(a+0, t0);
err=clear_class_gmm(t0);
func_end_seterr;

func_begin(x_clear_samples_class_gmm);
__tuple t0;filltuple(a+0, t0);
err=clear_samples_class_gmm(t0);
func_end_seterr;

func_begin(x_deserialize_class_gmm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_class_gmm(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_serialize_class_gmm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_class_gmm(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_read_class_gmm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=read_class_gmm(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_class_gmm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=write_class_gmm(t0,t1);
func_end_seterr;

func_begin(x_read_samples_class_gmm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=read_samples_class_gmm(t0,t1);
func_end_seterr;

func_begin(x_write_samples_class_gmm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=write_samples_class_gmm(t0,t1);
func_end_seterr;

func_begin(x_classify_class_gmm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=1;else filltuple(a+2, t2);
__tuple t3;
__tuple t4;
__tuple t5;
__tuple t6;
err=classify_class_gmm(t0,t1,t2,&t3,&t4,&t5,&t6);
fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_evaluate_class_gmm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
__tuple t3;
__tuple t4;
err=evaluate_class_gmm(t0,t1,&t2,&t3,&t4);
fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_train_class_gmm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=100;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0.001;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="training";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.0001;else filltuple(a+4, t4);
__tuple t5;
__tuple t6;
err=train_class_gmm(t0,t1,t2,t3,t4,&t5,&t6);
fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_get_prep_info_class_gmm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="principal_components";else filltuple(a+1, t1);
__tuple t2;
__tuple t3;
err=get_prep_info_class_gmm(t0,t1,&t2,&t3);
fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_get_sample_num_class_gmm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=get_sample_num_class_gmm(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_get_sample_class_gmm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
__tuple t3;
err=get_sample_class_gmm(t0,t1,&t2,&t3);
fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_add_sample_class_gmm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.0;else filltuple(a+3, t3);
err=add_sample_class_gmm(t0,t1,t2,t3);
func_end_seterr;

func_begin(x_get_params_class_gmm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
err=get_params_class_gmm(t0,&t1,&t2,&t3,&t4,&t5);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_create_class_gmm);
__tuple t0;if(v_empty(0))t0=3;else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=5;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=1;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="spherical";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="normalization";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=10;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=42;else filltuple(a+6, t6);
__tuple t7;
err=create_class_gmm(t0,t1,t2,t3,t4,t5,t6,&t7);
fillvar(t7, a+7);
func_end_seterr;

func_begin(x_clear_all_class_svm);
err=clear_all_class_svm();
func_end_seterr;

func_begin(x_clear_class_svm);
__tuple t0;filltuple(a+0, t0);
err=clear_class_svm(t0);
func_end_seterr;

func_begin(x_clear_samples_class_svm);
__tuple t0;filltuple(a+0, t0);
err=clear_samples_class_svm(t0);
func_end_seterr;

func_begin(x_deserialize_class_svm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_class_svm(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_serialize_class_svm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_class_svm(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_read_class_svm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=read_class_svm(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_class_svm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=write_class_svm(t0,t1);
func_end_seterr;

func_begin(x_read_samples_class_svm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=read_samples_class_svm(t0,t1);
func_end_seterr;

func_begin(x_write_samples_class_svm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=write_samples_class_svm(t0,t1);
func_end_seterr;

func_begin(x_evaluate_class_svm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=evaluate_class_svm(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_classify_class_svm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=1;else filltuple(a+2, t2);
__tuple t3;
err=classify_class_svm(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_reduce_class_svm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="bottom_up";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=2;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.001;else filltuple(a+3, t3);
__tuple t4;
err=reduce_class_svm(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_train_class_svm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0.001;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="default";else filltuple(a+2, t2);
err=train_class_svm(t0,t1,t2);
func_end_seterr;

func_begin(x_get_prep_info_class_svm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="principal_components";else filltuple(a+1, t1);
__tuple t2;
__tuple t3;
err=get_prep_info_class_svm(t0,t1,&t2,&t3);
fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_get_support_vector_num_class_svm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
err=get_support_vector_num_class_svm(t0,&t1,&t2);
fillvar(t1, a+1);fillvar(t2, a+2);
func_end_seterr;

func_begin(x_get_support_vector_class_svm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=get_support_vector_class_svm(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_get_sample_num_class_svm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=get_sample_num_class_svm(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_get_sample_class_svm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
__tuple t3;
err=get_sample_class_svm(t0,t1,&t2,&t3);
fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_add_sample_class_svm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
err=add_sample_class_svm(t0,t1,t2);
func_end_seterr;

func_begin(x_get_params_class_svm);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
__tuple t6;
__tuple t7;
__tuple t8;
err=get_params_class_svm(t0,&t1,&t2,&t3,&t4,&t5,&t6,&t7,&t8);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);
func_end_seterr;

func_begin(x_create_class_svm);
__tuple t0;if(v_empty(0))t0=10;else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="rbf";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0.02;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.05;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=5;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="one-versus-one";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="normalization";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=10;else filltuple(a+7, t7);
__tuple t8;
err=create_class_svm(t0,t1,t2,t3,t4,t5,t6,t7,&t8);
fillvar(t8, a+8);
func_end_seterr;

func_begin(x_clear_all_class_mlp);
err=clear_all_class_mlp();
func_end_seterr;

func_begin(x_clear_class_mlp);
__tuple t0;filltuple(a+0, t0);
err=clear_class_mlp(t0);
func_end_seterr;

func_begin(x_clear_samples_class_mlp);
__tuple t0;filltuple(a+0, t0);
err=clear_samples_class_mlp(t0);
func_end_seterr;

func_begin(x_deserialize_class_mlp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_class_mlp(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_serialize_class_mlp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_class_mlp(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_read_class_mlp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=read_class_mlp(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_class_mlp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=write_class_mlp(t0,t1);
func_end_seterr;

func_begin(x_read_samples_class_mlp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=read_samples_class_mlp(t0,t1);
func_end_seterr;

func_begin(x_write_samples_class_mlp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=write_samples_class_mlp(t0,t1);
func_end_seterr;

func_begin(x_classify_class_mlp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=1;else filltuple(a+2, t2);
__tuple t3;
__tuple t4;
err=classify_class_mlp(t0,t1,t2,&t3,&t4);
fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_evaluate_class_mlp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=evaluate_class_mlp(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_train_class_mlp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=200;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=1.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.01;else filltuple(a+3, t3);
__tuple t4;
__tuple t5;
err=train_class_mlp(t0,t1,t2,t3,&t4,&t5);
fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_get_prep_info_class_mlp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="principal_components";else filltuple(a+1, t1);
__tuple t2;
__tuple t3;
err=get_prep_info_class_mlp(t0,t1,&t2,&t3);
fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_get_sample_num_class_mlp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=get_sample_num_class_mlp(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_get_sample_class_mlp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
__tuple t3;
err=get_sample_class_mlp(t0,t1,&t2,&t3);
fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_get_rejection_params_class_mlp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="sampling_strategy";else filltuple(a+1, t1);
__tuple t2;
err=get_rejection_params_class_mlp(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_set_rejection_params_class_mlp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="sampling_strategy";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="hyperbox_around_all_classes";else filltuple(a+2, t2);
err=set_rejection_params_class_mlp(t0,t1,t2);
func_end_seterr;

func_begin(x_add_sample_class_mlp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
err=add_sample_class_mlp(t0,t1,t2);
func_end_seterr;

func_begin(x_get_regularization_params_class_mlp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="weight_prior";else filltuple(a+1, t1);
__tuple t2;
err=get_regularization_params_class_mlp(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_set_regularization_params_class_mlp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="weight_prior";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=1.0;else filltuple(a+2, t2);
err=set_regularization_params_class_mlp(t0,t1,t2);
func_end_seterr;

func_begin(x_get_params_class_mlp);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
__tuple t6;
err=get_params_class_mlp(t0,&t1,&t2,&t3,&t4,&t5,&t6);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_create_class_mlp);
__tuple t0;if(v_empty(0))t0=20;else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=10;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=5;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="softmax";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="normalization";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=10;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=42;else filltuple(a+6, t6);
__tuple t7;
err=create_class_mlp(t0,t1,t2,t3,t4,t5,t6,&t7);
fillvar(t7, a+7);
func_end_seterr;

func_begin(x_deserialize_class_box);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=deserialize_class_box(t0,t1);
func_end_seterr;

func_begin(x_serialize_class_box);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_class_box(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_class_box);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=write_class_box(t0,t1);
func_end_seterr;

func_begin(x_set_class_box_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="split_error";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0.1;else filltuple(a+2, t2);
err=set_class_box_param(t0,t1,t2);
func_end_seterr;

func_begin(x_read_sampset);
__tuple t0;if(v_empty(0))t0="sampset1";else filltuple(a+0, t0);
__tuple t1;
err=read_sampset(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_read_class_box);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=read_class_box(t0,t1);
func_end_seterr;

func_begin(x_learn_sampset_box);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="training_prot";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=500;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.05;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=100;else filltuple(a+5, t5);
err=learn_sampset_box(t0,t1,t2,t3,t4,t5);
func_end_seterr;

func_begin(x_learn_class_box);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1)){const char* vs1[]={"1.0","1.5","2.0"};arr2tupleS(vs1, 3, t1);}else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=1;else filltuple(a+2, t2);
err=learn_class_box(t0,t1,t2);
func_end_seterr;

func_begin(x_get_class_box_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="split_error";else filltuple(a+1, t1);
__tuple t2;
err=get_class_box_param(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_clear_sampset);
__tuple t0;filltuple(a+0, t0);
err=clear_sampset(t0);
func_end_seterr;

func_begin(x_close_class_box);
__tuple t0;filltuple(a+0, t0);
err=close_class_box(t0);
func_end_seterr;

func_begin(x_create_class_box);
__tuple t0;
err=create_class_box(&t0);
fillvar(t0, a+0);
func_end_seterr;

func_begin(x_descript_class_box);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=3;else filltuple(a+1, t1);
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
__tuple t6;
__tuple t7;
err=descript_class_box(t0,t1,&t2,&t3,&t4,&t5,&t6,&t7);
fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);
func_end_seterr;

func_begin(x_test_sampset_box);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=test_sampset_box(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_enquire_reject_class_box);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=1.0;else filltuple(a+1, t1);
__tuple t2;
err=enquire_reject_class_box(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_enquire_class_box);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=1.0;else filltuple(a+1, t1);
__tuple t2;
err=enquire_class_box(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_close_all_class_box);
err=close_all_class_box();
func_end_seterr;

func_begin(x_convert_map_type);
__tuple t2;if(v_empty(2))t2="coord_map_sub_pix";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="map_width";else filltuple(a+3, t3);
err=convert_map_type(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_vector_to_pose);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="iterative";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="error";else filltuple(a+7, t7);
__tuple t8;
__tuple t9;
err=vector_to_pose(t0,t1,t2,t3,t4,t5,t6,t7,&t8,&t9);
fillvar(t8, a+8);fillvar(t9, a+9);
func_end_seterr;

func_begin(x_proj_hom_mat2d_to_pose);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="decomposition";else filltuple(a+2, t2);
__tuple t3;
err=proj_hom_mat2d_to_pose(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_radial_distortion_self_calibration);
__tuple t2;if(v_empty(2))t2=640;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=480;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.05;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=42;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="division";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="variable";else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=0.0;else filltuple(a+8, t8);
__tuple t9;
err=radial_distortion_self_calibration(a_obj(0),varp_obj(1),t2,t3,t4,t5,t6,t7,t8,&t9);
fillvar(t9, a+9);
func_end_seterr;

func_begin(x_cam_par_to_cam_mat);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
err=cam_par_to_cam_mat(t0,&t1,&t2,&t3);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_cam_mat_to_cam_par);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;
err=cam_mat_to_cam_par(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_stationary_camera_self_calibration);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;filltuple(a+6, t6);
__tuple t7;filltuple(a+7, t7);
__tuple t8;filltuple(a+8, t8);
__tuple t9;filltuple(a+9, t9);
__tuple t10;filltuple(a+10, t10);
__tuple t11;filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12="gold_standard";else filltuple(a+12, t12);
__tuple t13;if(v_empty(13)){const char* vs13[]={"focus","principal_point"};arr2tupleS(vs13, 2, t13);}else filltuple(a+13, t13);
__tuple t14;if(v_empty(14))t14="true";else filltuple(a+14, t14);
__tuple t15;
__tuple t16;
__tuple t17;
__tuple t18;
__tuple t19;
__tuple t20;
__tuple t21;
err=stationary_camera_self_calibration(t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,&t15,&t16,&t17,&t18,&t19,&t20,&t21);
fillvar(t15, a+15);fillvar(t16, a+16);fillvar(t17, a+17);fillvar(t18, a+18);fillvar(t19, a+19);fillvar(t20, a+20);fillvar(t21, a+21);
func_end_seterr;

func_begin(x_get_rectangle_pose);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="nonweighted";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=2.0;else filltuple(a+5, t5);
__tuple t6;
__tuple t7;
__tuple t8;
err=get_rectangle_pose(a_obj(0),t1,t2,t3,t4,t5,&t6,&t7,&t8);
fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);
func_end_seterr;

func_begin(x_get_circle_pose);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="pose";else filltuple(a+3, t3);
__tuple t4;
__tuple t5;
err=get_circle_pose(a_obj(0),t1,t2,t3,&t4,&t5);
fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_radiometric_self_calibration);
__tuple t1;if(v_empty(1))t1=0.5;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="2d_histogram";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="discrete";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=1.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=5;else filltuple(a+5, t5);
__tuple t6;
err=radiometric_self_calibration(a_obj(0),t1,t2,t3,t4,t5,&t6);
fillvar(t6, a+6);
func_end_seterr;

func_begin(x_map_image);
err=map_image(a_obj(0),a_obj(1),varp_obj(2));
func_end_seterr;

func_begin(x_gen_radial_distortion_map);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="bilinear";else filltuple(a+3, t3);
err=gen_radial_distortion_map(varp_obj(0),t1,t2,t3);
func_end_seterr;

func_begin(x_gen_image_to_world_plane_map);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="m";else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8="bilinear";else filltuple(a+8, t8);
err=gen_image_to_world_plane_map(varp_obj(0),t1,t2,t3,t4,t5,t6,t7,t8);
func_end_seterr;

func_begin(x_image_to_world_plane);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="m";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="bilinear";else filltuple(a+7, t7);
err=image_to_world_plane(a_obj(0),varp_obj(1),t2,t3,t4,t5,t6,t7);
func_end_seterr;

func_begin(x_contour_to_world_plane_xld);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="m";else filltuple(a+4, t4);
err=contour_to_world_plane_xld(a_obj(0),varp_obj(1),t2,t3,t4);
func_end_seterr;

func_begin(x_image_points_to_world_plane);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=100.0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=100.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="m";else filltuple(a+4, t4);
__tuple t5;
__tuple t6;
err=image_points_to_world_plane(t0,t1,t2,t3,t4,&t5,&t6);
fillvar(t5, a+5);fillvar(t6, a+6);
func_end_seterr;

func_begin(x_set_origin_pose);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
__tuple t4;
err=set_origin_pose(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_hand_eye_calibration);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;filltuple(a+6, t6);
__tuple t7;filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8="nonlinear";else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9="error_pose";else filltuple(a+9, t9);
__tuple t10;
__tuple t11;
__tuple t12;
err=hand_eye_calibration(t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,&t10,&t11,&t12);
fillvar(t10, a+10);fillvar(t11, a+11);fillvar(t12, a+12);
func_end_seterr;

func_begin(x_get_pose_type);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
err=get_pose_type(t0,&t1,&t2,&t3);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_convert_pose_type);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="Rp+T";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="gba";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="point";else filltuple(a+3, t3);
__tuple t4;
err=convert_pose_type(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_create_pose);
__tuple t0;if(v_empty(0))t0=0.1;else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0.1;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0.1;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=90.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=90.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=90.0;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="Rp+T";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="gba";else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8="point";else filltuple(a+8, t8);
__tuple t9;
err=create_pose(t0,t1,t2,t3,t4,t5,t6,t7,t8,&t9);
fillvar(t9, a+9);
func_end_seterr;

func_begin(x_change_radial_distortion_contours_xld);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
err=change_radial_distortion_contours_xld(a_obj(0),varp_obj(1),t2,t3);
func_end_seterr;

func_begin(x_change_radial_distortion_points);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;
__tuple t5;
err=change_radial_distortion_points(t0,t1,t2,t3,&t4,&t5);
fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_change_radial_distortion_image);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
err=change_radial_distortion_image(a_obj(0),a_obj(1),varp_obj(2),t3,t4);
func_end_seterr;

func_begin(x_change_radial_distortion_cam_par);
__tuple t0;if(v_empty(0))t0="adaptive";else filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0.0;else filltuple(a+2, t2);
__tuple t3;
err=change_radial_distortion_cam_par(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_gen_caltab);
__tuple t0;if(v_empty(0))t0=7;else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=7;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0.0125;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0.5;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="caltab.descr";else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="caltab.ps";else filltuple(a+5, t5);
err=gen_caltab(t0,t1,t2,t3,t4,t5);
func_end_seterr;

func_begin(x_create_caltab);
__tuple t0;if(v_empty(0))t0=27;else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=31;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0.00258065;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3)){const char* vs3[]={"13","6","6","20","20"};arr2tupleS(vs3, 5, t3);}else filltuple(a+3, t3);
__tuple t4;if(v_empty(4)){const char* vs4[]={"15","6","24","6","24"};arr2tupleS(vs4, 5, t4);}else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="light_on_dark";else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="calplate.cpd";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="calplate.ps";else filltuple(a+7, t7);
err=create_caltab(t0,t1,t2,t3,t4,t5,t6,t7);
func_end_seterr;

func_begin(x_caltab_points);
__tuple t0;if(v_empty(0))t0="calplate.cpd";else filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
err=caltab_points(t0,&t1,&t2,&t3);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_get_line_of_sight);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;
__tuple t4;
__tuple t5;
__tuple t6;
__tuple t7;
__tuple t8;
err=get_line_of_sight(t0,t1,t2,&t3,&t4,&t5,&t6,&t7,&t8);
fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);
func_end_seterr;

func_begin(x_project_hom_point_hom_mat3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;
__tuple t6;
__tuple t7;
err=project_hom_point_hom_mat3d(t0,t1,t2,t3,t4,&t5,&t6,&t7);
fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);
func_end_seterr;

func_begin(x_project_point_hom_mat3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;
__tuple t5;
err=project_point_hom_mat3d(t0,t1,t2,t3,&t4,&t5);
fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_project_3d_point);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;
__tuple t5;
err=project_3d_point(t0,t1,t2,t3,&t4,&t5);
fillvar(t4, a+4);fillvar(t5, a+5);
func_end_seterr;

func_begin(x_cam_par_pose_to_hom_mat3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=cam_par_pose_to_hom_mat3d(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_hom_mat3d_to_pose);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=hom_mat3d_to_pose(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_pose_to_hom_mat3d);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=pose_to_hom_mat3d(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_deserialize_cam_par);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_cam_par(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_serialize_cam_par);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_cam_par(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_deserialize_pose);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_pose(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_serialize_pose);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_pose(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_read_pose);
__tuple t0;if(v_empty(0))t0="campose.dat";else filltuple(a+0, t0);
__tuple t1;
err=read_pose(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_pose);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="campose.dat";else filltuple(a+1, t1);
err=write_pose(t0,t1);
func_end_seterr;

func_begin(x_read_cam_par);
__tuple t0;if(v_empty(0))t0="campar.dat";else filltuple(a+0, t0);
__tuple t1;
err=read_cam_par(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_cam_par);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="campar.dat";else filltuple(a+1, t1);
err=write_cam_par(t0,t1);
func_end_seterr;

func_begin(x_sim_caltab);
__tuple t1;if(v_empty(1))t1="calplate.cpd";else filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=128;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=224;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=80;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=1.0;else filltuple(a+7, t7);
err=sim_caltab(varp_obj(0),t1,t2,t3,t4,t5,t6,t7);
func_end_seterr;

func_begin(x_disp_caltab);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="calplate.cpd";else filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=1.0;else filltuple(a+4, t4);
err=disp_caltab(t0,t1,t2,t3,t4);
func_end_seterr;

func_begin(x_camera_calibration);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="all";else filltuple(a+7, t7);
__tuple t8;
__tuple t9;
__tuple t10;
err=camera_calibration(t0,t1,t2,t3,t4,t5,t6,t7,&t8,&t9,&t10);
fillvar(t8, a+8);fillvar(t9, a+9);fillvar(t10, a+10);
func_end_seterr;

func_begin(x_find_marks_and_pose);
__tuple t2;if(v_empty(2))t2="caltab.descr";else filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=128;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=10;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=18;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=0.9;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=15.0;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=100.0;else filltuple(a+9, t9);
__tuple t10;
__tuple t11;
__tuple t12;
err=find_marks_and_pose(a_obj(0),a_obj(1),t2,t3,t4,t5,t6,t7,t8,t9,&t10,&t11,&t12);
fillvar(t10, a+10);fillvar(t11, a+11);fillvar(t12, a+12);
func_end_seterr;

func_begin(x_find_caltab);
__tuple t2;if(v_empty(2))t2="caltab.descr";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=3;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=112;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=5;else filltuple(a+5, t5);
err=find_caltab(a_obj(0),varp_obj(1),t2,t3,t4,t5);
func_end_seterr;

func_begin(x_clear_all_camera_setup_models);
err=clear_all_camera_setup_models();
func_end_seterr;

func_begin(x_clear_camera_setup_model);
__tuple t0;filltuple(a+0, t0);
err=clear_camera_setup_model(t0);
func_end_seterr;

func_begin(x_serialize_camera_setup_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_camera_setup_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_deserialize_camera_setup_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_camera_setup_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_camera_setup_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=write_camera_setup_model(t0,t1);
func_end_seterr;

func_begin(x_read_camera_setup_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=read_camera_setup_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_get_camera_setup_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0;else filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;
err=get_camera_setup_param(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_set_camera_setup_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0;else filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
err=set_camera_setup_param(t0,t1,t2,t3);
func_end_seterr;

func_begin(x_set_camera_setup_cam_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="area_scan_division";else filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
err=set_camera_setup_cam_param(t0,t1,t2,t3,t4);
func_end_seterr;

func_begin(x_create_camera_setup_model);
__tuple t0;if(v_empty(0))t0=2;else filltuple(a+0, t0);
__tuple t1;
err=create_camera_setup_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_clear_all_calib_data);
err=clear_all_calib_data();
func_end_seterr;

func_begin(x_clear_calib_data);
__tuple t0;filltuple(a+0, t0);
err=clear_calib_data(t0);
func_end_seterr;

func_begin(x_deserialize_calib_data);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_calib_data(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_serialize_calib_data);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_calib_data(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_read_calib_data);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=read_calib_data(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_calib_data);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
err=write_calib_data(t0,t1);
func_end_seterr;

func_begin(x_calibrate_hand_eye);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=calibrate_hand_eye(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_calibrate_cameras);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=calibrate_cameras(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_remove_calib_data);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="tool";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
err=remove_calib_data(t0,t1,t2);
func_end_seterr;

func_begin(x_set_calib_data);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="model";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="general";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="reference_camera";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="0";else filltuple(a+4, t4);
err=set_calib_data(t0,t1,t2,t3,t4);
func_end_seterr;

func_begin(x_find_calib_object);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0;else filltuple(a+4, t4);
__tuple t5;if(!v_empty(5)) filltuple(a+5, t5);
__tuple t6;if(!v_empty(6)) filltuple(a+6, t6);
err=find_calib_object(a_obj(0),t1,t2,t3,t4,t5,t6);
func_end_seterr;

func_begin(x_remove_calib_data_observ);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
err=remove_calib_data_observ(t0,t1,t2,t3);
func_end_seterr;

func_begin(x_get_calib_data_observ_contours);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="marks";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=0;else filltuple(a+5, t5);
err=get_calib_data_observ_contours(varp_obj(0),t1,t2,t3,t4,t5);
func_end_seterr;

func_begin(x_get_calib_data_observ_pose);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
__tuple t4;
err=get_calib_data_observ_pose(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_set_calib_data_observ_pose);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
err=set_calib_data_observ_pose(t0,t1,t2,t3,t4);
func_end_seterr;

func_begin(x_get_calib_data_observ_points);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
__tuple t4;
__tuple t5;
__tuple t6;
__tuple t7;
err=get_calib_data_observ_points(t0,t1,t2,t3,&t4,&t5,&t6,&t7);
fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);
func_end_seterr;

func_begin(x_set_calib_data_observ_points);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="all";else filltuple(a+6, t6);
__tuple t7;filltuple(a+7, t7);
err=set_calib_data_observ_points(t0,t1,t2,t3,t4,t5,t6,t7);
func_end_seterr;

func_begin(x_query_calib_data_observ_indices);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="camera";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;
__tuple t4;
err=query_calib_data_observ_indices(t0,t1,t2,&t3,&t4);
fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_get_calib_data);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="camera";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="params";else filltuple(a+3, t3);
__tuple t4;
err=get_calib_data(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_set_calib_data_calib_object);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0;else filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
err=set_calib_data_calib_object(t0,t1,t2);
func_end_seterr;

func_begin(x_set_calib_data_cam_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="area_scan_division";else filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
err=set_calib_data_cam_param(t0,t1,t2,t3);
func_end_seterr;

func_begin(x_create_calib_data);
__tuple t0;if(v_empty(0))t0="calibration_object";else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=1;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=1;else filltuple(a+2, t2);
__tuple t3;
err=create_calib_data(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_get_bead_inspection_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="target_thickness";else filltuple(a+1, t1);
__tuple t2;
err=get_bead_inspection_param(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_set_bead_inspection_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="target_thickness";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="40";else filltuple(a+2, t2);
err=set_bead_inspection_param(t0,t1,t2);
func_end_seterr;

func_begin(x_apply_bead_inspection_model);
__tuple t4;filltuple(a+4, t4);
__tuple t5;
err=apply_bead_inspection_model(a_obj(0),varp_obj(1),varp_obj(2),varp_obj(3),t4,&t5);
fillvar(t5, a+5);
func_end_seterr;

func_begin(x_clear_bead_inspection_model);
__tuple t0;filltuple(a+0, t0);
err=clear_bead_inspection_model(t0);
func_end_seterr;

func_begin(x_create_bead_inspection_model);
__tuple t1;if(v_empty(1))t1=50;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=15;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=15;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4="light";else filltuple(a+4, t4);
__tuple t5;if(!v_empty(5)) filltuple(a+5, t5);
__tuple t6;if(!v_empty(6)) filltuple(a+6, t6);
__tuple t7;
err=create_bead_inspection_model(a_obj(0),t1,t2,t3,t4,t5,t6,&t7);
fillvar(t7, a+7);
func_end_seterr;

func_begin(x_deserialize_bar_code_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=deserialize_bar_code_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_serialize_bar_code_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
err=serialize_bar_code_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_read_bar_code_model);
__tuple t0;if(v_empty(0))t0="bar_code_model.bcm";else filltuple(a+0, t0);
__tuple t1;
err=read_bar_code_model(t0,&t1);
fillvar(t1, a+1);
func_end_seterr;

func_begin(x_write_bar_code_model);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="bar_code_model.bcm";else filltuple(a+1, t1);
err=write_bar_code_model(t0,t1);
func_end_seterr;

func_begin(x_get_bar_code_object);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="all";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="candidate_regions";else filltuple(a+3, t3);
err=get_bar_code_object(varp_obj(0),t1,t2,t3);
func_end_seterr;

func_begin(x_get_bar_code_result);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="all";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="decoded_types";else filltuple(a+2, t2);
__tuple t3;
err=get_bar_code_result(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_decode_bar_code_rectangle2);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="EAN-13";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=50.0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=100.0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=0.0;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=200.0;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=100.0;else filltuple(a+7, t7);
__tuple t8;
err=decode_bar_code_rectangle2(a_obj(0),t1,t2,t3,t4,t5,t6,t7,&t8);
fillvar(t8, a+8);
func_end_seterr;

func_begin(x_find_bar_code);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="auto";else filltuple(a+3, t3);
__tuple t4;
err=find_bar_code(a_obj(0),varp_obj(1),t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_query_bar_code_params);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="trained_general";else filltuple(a+1, t1);
__tuple t2;
err=query_bar_code_params(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_get_bar_code_param_specific);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="EAN-13";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="check_char";else filltuple(a+2, t2);
__tuple t3;
err=get_bar_code_param_specific(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_get_bar_code_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="element_size_min";else filltuple(a+1, t1);
__tuple t2;
err=get_bar_code_param(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_set_bar_code_param_specific);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="EAN-13";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="check_char";else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="absent";else filltuple(a+3, t3);
err=set_bar_code_param_specific(t0,t1,t2,t3);
func_end_seterr;

func_begin(x_set_bar_code_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="element_size_min";else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=8;else filltuple(a+2, t2);
err=set_bar_code_param(t0,t1,t2);
func_end_seterr;

func_begin(x_clear_all_bar_code_models);
err=clear_all_bar_code_models();
func_end_seterr;

func_begin(x_clear_bar_code_model);
__tuple t0;filltuple(a+0, t0);
err=clear_bar_code_model(t0);
func_end_seterr;

func_begin(x_create_bar_code_model);
__tuple t0;if(!v_empty(0)) filltuple(a+0, t0);
__tuple t1;if(!v_empty(1)) filltuple(a+1, t1);
__tuple t2;
err=create_bar_code_model(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_decode_2d_bar_code);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;
__tuple t4;
__tuple t5;
__tuple t6;
__tuple t7;
err=decode_2d_bar_code(t0,t1,t2,&t3,&t4,&t5,&t6,&t7);
fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);
func_end_seterr;

func_begin(x_get_2d_bar_code_pos);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(!v_empty(4)) filltuple(a+4, t4);
__tuple t5;if(!v_empty(5)) filltuple(a+5, t5);
__tuple t6;
__tuple t7;
__tuple t8;
__tuple t9;
err=get_2d_bar_code_pos(a_obj(0),a_obj(1),t2,t3,t4,t5,&t6,&t7,&t8,&t9);
fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);fillvar(t9, a+9);
func_end_seterr;

func_begin(x_get_2d_bar_code);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(!v_empty(4)) filltuple(a+4, t4);
__tuple t5;if(!v_empty(5)) filltuple(a+5, t5);
__tuple t6;
__tuple t7;
err=get_2d_bar_code(a_obj(0),a_obj(1),t2,t3,t4,t5,&t6,&t7);
fillvar(t6, a+6);fillvar(t7, a+7);
func_end_seterr;

func_begin(x_find_2d_bar_code);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;if(!v_empty(4)) filltuple(a+4, t4);
__tuple t5;
err=find_2d_bar_code(a_obj(0),varp_obj(1),t2,t3,t4,&t5);
fillvar(t5, a+5);
func_end_seterr;

func_begin(x_gen_2d_bar_code_descr);
__tuple t0;if(v_empty(0))t0="Data Matrix ECC 200";else filltuple(a+0, t0);
__tuple t1;if(!v_empty(1)) filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;
err=gen_2d_bar_code_descr(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_discrete_1d_bar_code);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=discrete_1d_bar_code(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_decode_1d_bar_code);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
__tuple t3;
__tuple t4;
err=decode_1d_bar_code(t0,t1,&t2,&t3,&t4);
fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);
func_end_seterr;

func_begin(x_get_1d_bar_code_scanline);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="false";else filltuple(a+5, t5);
__tuple t6;
__tuple t7;
__tuple t8;
__tuple t9;
__tuple t10;
err=get_1d_bar_code_scanline(a_obj(0),t1,t2,t3,t4,t5,&t6,&t7,&t8,&t9,&t10);
fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);fillvar(t9, a+9);fillvar(t10, a+10);
func_end_seterr;

func_begin(x_get_1d_bar_code);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;filltuple(a+4, t4);
__tuple t5;
err=get_1d_bar_code(a_obj(0),t1,t2,t3,t4,&t5);
fillvar(t5, a+5);
func_end_seterr;

func_begin(x_find_1d_bar_code_region);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;if(!v_empty(4)) filltuple(a+4, t4);
__tuple t5;
err=find_1d_bar_code_region(a_obj(0),varp_obj(1),t2,t3,t4,&t5);
fillvar(t5, a+5);
func_end_seterr;

func_begin(x_find_1d_bar_code_scanline);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;if(!v_empty(4)) filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5="false";else filltuple(a+5, t5);
__tuple t6;
__tuple t7;
__tuple t8;
__tuple t9;
__tuple t10;
__tuple t11;
__tuple t12;
err=find_1d_bar_code_scanline(a_obj(0),varp_obj(1),t2,t3,t4,t5,&t6,&t7,&t8,&t9,&t10,&t11,&t12);
fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);fillvar(t9, a+9);fillvar(t10, a+10);fillvar(t11, a+11);fillvar(t12, a+12);
func_end_seterr;

func_begin(x_find_1d_bar_code);
__tuple t2;filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;if(!v_empty(4)) filltuple(a+4, t4);
__tuple t5;
__tuple t6;
__tuple t7;
err=find_1d_bar_code(a_obj(0),varp_obj(1),t2,t3,t4,&t5,&t6,&t7);
fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);
func_end_seterr;

func_begin(x_gen_1d_bar_code_descr);
__tuple t0;if(v_empty(0))t0="EAN 13";else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=6;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=10;else filltuple(a+2, t2);
__tuple t3;
err=gen_1d_bar_code_descr(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_gen_1d_bar_code_descr_gen);
__tuple t0;if(v_empty(0))t0=30;else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=30;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=2;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3)){const char* vs3[]={"1","-1"};arr2tupleS(vs3, 2, t3);}else filltuple(a+3, t3);
__tuple t4;if(v_empty(4)){const char* vs4[]={"1","-1"};arr2tupleS(vs4, 2, t4);}else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=2.5;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="false";else filltuple(a+6, t6);
__tuple t7;
err=gen_1d_bar_code_descr_gen(t0,t1,t2,t3,t4,t5,t6,&t7);
fillvar(t7, a+7);
func_end_seterr;

func_begin(x_close_bg_esti);
__tuple t0;filltuple(a+0, t0);
err=close_bg_esti(t0);
func_end_seterr;

func_begin(x_give_bg_esti);
__tuple t1;filltuple(a+1, t1);
err=give_bg_esti(varp_obj(0),t1);
func_end_seterr;

func_begin(x_update_bg_esti);
__tuple t2;filltuple(a+2, t2);
err=update_bg_esti(a_obj(0),a_obj(1),t2);
func_end_seterr;

func_begin(x_run_bg_esti);
__tuple t2;filltuple(a+2, t2);
err=run_bg_esti(a_obj(0),varp_obj(1),t2);
func_end_seterr;

func_begin(x_get_bg_esti_params);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
__tuple t4;
__tuple t5;
__tuple t6;
__tuple t7;
__tuple t8;
__tuple t9;
__tuple t10;
err=get_bg_esti_params(t0,&t1,&t2,&t3,&t4,&t5,&t6,&t7,&t8,&t9,&t10);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);fillvar(t4, a+4);fillvar(t5, a+5);fillvar(t6, a+6);fillvar(t7, a+7);fillvar(t8, a+8);fillvar(t9, a+9);fillvar(t10, a+10);
func_end_seterr;

func_begin(x_set_bg_esti_params);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=0.7;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0.7;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="fixed";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.002;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=0.02;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="on";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=7.0;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=10;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=3.25;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=15.0;else filltuple(a+10, t10);
err=set_bg_esti_params(t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10);
func_end_seterr;

func_begin(x_create_bg_esti);
__tuple t1;if(v_empty(1))t1=0.7;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=0.7;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3="fixed";else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0.002;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=0.02;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6="on";else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7=7.0;else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=10;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9=3.25;else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=15.0;else filltuple(a+10, t10);
__tuple t11;
err=create_bg_esti(a_obj(0),t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,&t11);
fillvar(t11, a+11);
func_end_seterr;

func_begin(x_close_all_bg_esti);
err=close_all_bg_esti();
func_end_seterr;

func_begin(x_control_io_channel);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;
err=control_io_channel(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_write_io_channel);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;
err=write_io_channel(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_read_io_channel);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
err=read_io_channel(t0,&t1,&t2);
fillvar(t1, a+1);fillvar(t2, a+2);
func_end_seterr;

func_begin(x_set_io_channel_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(!v_empty(1)) filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
err=set_io_channel_param(t0,t1,t2);
func_end_seterr;

func_begin(x_get_io_channel_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="";else filltuple(a+1, t1);
__tuple t2;
err=get_io_channel_param(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_close_io_channel);
__tuple t0;filltuple(a+0, t0);
err=close_io_channel(t0);
func_end_seterr;

func_begin(x_open_io_channel);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;
err=open_io_channel(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_query_io_device);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2="param_name";else filltuple(a+2, t2);
__tuple t3;
err=query_io_device(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_control_io_device);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;
err=control_io_device(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_set_io_device_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(!v_empty(1)) filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
err=set_io_device_param(t0,t1,t2);
func_end_seterr;

func_begin(x_get_io_device_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="";else filltuple(a+1, t1);
__tuple t2;
err=get_io_device_param(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_close_io_device);
__tuple t0;filltuple(a+0, t0);
err=close_io_device(t0);
func_end_seterr;

func_begin(x_open_io_device);
__tuple t0;if(!v_empty(0)) filltuple(a+0, t0);
__tuple t1;if(!v_empty(1)) filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;if(!v_empty(3)) filltuple(a+3, t3);
__tuple t4;
err=open_io_device(t0,t1,t2,t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_control_io_interface);
__tuple t0;if(!v_empty(0)) filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(!v_empty(2)) filltuple(a+2, t2);
__tuple t3;
err=control_io_interface(t0,t1,t2,&t3);
fillvar(t3, a+3);
func_end_seterr;

func_begin(x_query_io_interface);
__tuple t0;if(!v_empty(0)) filltuple(a+0, t0);
__tuple t1;if(!v_empty(1)) filltuple(a+1, t1);
__tuple t2;
err=query_io_interface(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_get_framegrabber_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="revision";else filltuple(a+1, t1);
__tuple t2;
err=get_framegrabber_param(t0,t1,&t2);
fillvar(t2, a+2);
func_end_seterr;

func_begin(x_set_framegrabber_param);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
err=set_framegrabber_param(t0,t1,t2);
func_end_seterr;

func_begin(x_get_framegrabber_callback);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="transfer_end";else filltuple(a+1, t1);
__tuple t2;
__tuple t3;
err=get_framegrabber_callback(t0,t1,&t2,&t3);
fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_set_framegrabber_callback);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="transfer_end";else filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
err=set_framegrabber_callback(t0,t1,t2,t3);
func_end_seterr;

func_begin(x_grab_data_async);
__tuple t3;filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=-1.0;else filltuple(a+4, t4);
__tuple t5;
err=grab_data_async(varp_obj(0),varp_obj(1),varp_obj(2),t3,t4,&t5);
fillvar(t5, a+5);
func_end_seterr;

func_begin(x_grab_data);
__tuple t3;filltuple(a+3, t3);
__tuple t4;
err=grab_data(varp_obj(0),varp_obj(1),varp_obj(2),t3,&t4);
fillvar(t4, a+4);
func_end_seterr;

func_begin(x_grab_image_async);
__tuple t1;filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=-1.0;else filltuple(a+2, t2);
err=grab_image_async(varp_obj(0),t1,t2);
func_end_seterr;

func_begin(x_grab_image_start);
__tuple t0;filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=-1.0;else filltuple(a+1, t1);
err=grab_image_start(t0,t1);
func_end_seterr;

func_begin(x_grab_image);
__tuple t1;filltuple(a+1, t1);
err=grab_image(varp_obj(0),t1);
func_end_seterr;

func_begin(x_info_framegrabber);
__tuple t0;if(v_empty(0))t0="File";else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1="info_boards";else filltuple(a+1, t1);
__tuple t2;
__tuple t3;
err=info_framegrabber(t0,t1,&t2,&t3);
fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_close_all_framegrabbers);
err=close_all_framegrabbers();
func_end_seterr;

func_begin(x_close_framegrabber);
__tuple t0;filltuple(a+0, t0);
err=close_framegrabber(t0);
func_end_seterr;

func_begin(x_open_framegrabber);
__tuple t0;if(v_empty(0))t0="File";else filltuple(a+0, t0);
__tuple t1;if(v_empty(1))t1=1;else filltuple(a+1, t1);
__tuple t2;if(v_empty(2))t2=1;else filltuple(a+2, t2);
__tuple t3;if(v_empty(3))t3=0;else filltuple(a+3, t3);
__tuple t4;if(v_empty(4))t4=0;else filltuple(a+4, t4);
__tuple t5;if(v_empty(5))t5=0;else filltuple(a+5, t5);
__tuple t6;if(v_empty(6))t6=0;else filltuple(a+6, t6);
__tuple t7;if(v_empty(7))t7="default";else filltuple(a+7, t7);
__tuple t8;if(v_empty(8))t8=-1;else filltuple(a+8, t8);
__tuple t9;if(v_empty(9))t9="default";else filltuple(a+9, t9);
__tuple t10;if(v_empty(10))t10=-1;else filltuple(a+10, t10);
__tuple t11;if(v_empty(11))t11="default";else filltuple(a+11, t11);
__tuple t12;if(v_empty(12))t12="default";else filltuple(a+12, t12);
__tuple t13;if(v_empty(13))t13="default";else filltuple(a+13, t13);
__tuple t14;if(v_empty(14))t14=-1;else filltuple(a+14, t14);
__tuple t15;if(v_empty(15))t15=-1;else filltuple(a+15, t15);
__tuple t16;
err=open_framegrabber(t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,&t16);
fillvar(t16, a+16);
func_end_seterr;

func_begin(x_get_framegrabber_lut);
__tuple t0;filltuple(a+0, t0);
__tuple t1;
__tuple t2;
__tuple t3;
err=get_framegrabber_lut(t0,&t1,&t2,&t3);
fillvar(t1, a+1);fillvar(t2, a+2);fillvar(t3, a+3);
func_end_seterr;

func_begin(x_set_framegrabber_lut);
__tuple t0;filltuple(a+0, t0);
__tuple t1;filltuple(a+1, t1);
__tuple t2;filltuple(a+2, t2);
__tuple t3;filltuple(a+3, t3);
err=set_framegrabber_lut(t0,t1,t2,t3);
func_end_seterr;

