#pragma once
#include "arg.h"

#define cmdTupleBegin			4										//Tuple函数在cmd的起点
#define cmdTupleCount			92										//Tuple函数的个数
#define cmdHalconBegin			(cmdTupleBegin+cmdTupleCount)			//Halcon函数在cmd的起点

namespace elib{
	namespace Function{
		//这个文件里面放命令
		static CMD_INFO edef_CmdInfo[] =  // 命令/方法结构
		{
			//最开始的6个函数定义为成员函数，构造、复制、析构
			defMemberMethod_Consturct("__obj_construct", "__obj_construct", "obj construct"),
			defMemberMethod_Copy(__argObjCopy, "__obj_copy", "__obj_copy", "obj copy"),
			defMemberMethod_Destructor("__obj_free", "__obj_free", "obj free"),
			defMethod(inClassHalcon, dataTypeObj, "克隆", "tuple_clone_obj", "克隆一个视觉对象"),

			//////////////////////////////////////////////////////////////////////////////
			//以下92个函数属于tuple内部的函数
			defMemberMethod_Consturct("__tuple_construct", "__tuple_construct", "tuple construct"),
			defMemberMethod_Copy(__argTupleCopy, "__tuple_copy", "__tuple_copy", "tuple copy"),
			defMemberMethod_Destructor("__tuple_free", "__tuple_free", "tuple free"),
			defMethod(inClassHalcon, dataTypeTuple, "克隆", "tuple_clone_tuple", "克隆一个视觉元组"),


			defMethod(inClassHalcon, dataTypeTuple, "取文本长度", "strlen", ""),
			defMethod_TakeArgs(inClassHalcon, SDT_INT, __arginsert, "插入", "insert", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "分割", "split", ""),
			defMethod(inClassHalcon, dataTypeTuple, "取单一", "uniq", "丢弃连续元素，取得单一的，比如输入：[1, 1, 2, 2, 2, 3]，返回：[1, 2, 3]"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "删除元素", "remove", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "寻找文本", "strchr", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "正则选择", "regexp_select", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "正向搜索", "strstr", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "左移", "lsh", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "右移", "rsh", ""),

			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "查找元素", "find", ""),
			defMethod_TakeArgs(inClassHalcon, _SDT_NULL, __argx_set, "赋值", "set", ""),
			defMethod(inClassHalcon, dataTypeTuple, "取反", "not", ""),
			defMethod(inClassHalcon, dataTypeTuple, "位取反", "bnot", ""),
			defMethod(inClassHalcon, SDT_INT, "取元素总数", "getcount", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "取元素", "get_value", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argx_get_value_range, "取元素范围", "get_value_range", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "取文本", "get_value_string", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argx_get_value_range, "取文本范围", "get_value_string_range", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "加", "add", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "减", "sub", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "乘", "mul", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "除", "div", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "求模", "mod", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "正则", "regexp", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "位与", "band", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "位异或", "bxor", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "位或", "bor", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "文本格式化", "format", ""),
			defMethod_TakeArgs(inClassHalcon, SDT_BOOL, __argall_single_param, "且", "and", ""),
			defMethod_TakeArgs(inClassHalcon, SDT_BOOL, __argall_single_param, "或", "or", ""),
			defMethod_TakeArgs(inClassHalcon, SDT_BOOL, __argall_single_param, "异或", "xor", ""),
			defMethod_TakeArgs(inClassHalcon, SDT_BOOL, __argall_single_param, "小于", "less", ""),
			defMethod_TakeArgs(inClassHalcon, SDT_BOOL, __argall_single_param, "大于", "greater", ""),
			defMethod_TakeArgs(inClassHalcon, SDT_BOOL, __argall_single_param, "小于等于", "less_equal", ""),
			defMethod_TakeArgs(inClassHalcon, SDT_BOOL, __argall_single_param, "大于等于", "greater_equal", ""),
			defMethod_TakeArgs(inClassHalcon, SDT_BOOL, __argall_single_param, "等于", "equal", ""),
			defMethod_TakeArgs(inClassHalcon, SDT_BOOL, __argall_single_param, "不等于", "not_equal", ""),

			defMethod(inClassHalcon, dataTypeTuple, "求正弦", "sin", "sine"),
			defMethod(inClassHalcon, dataTypeTuple, "求余弦", "cos", "cosine"),
			defMethod(inClassHalcon, dataTypeTuple, "求正切", "tan", "tangent"),
			defMethod(inClassHalcon, dataTypeTuple, "求反正弦", "asin", "arc sine"),
			defMethod(inClassHalcon, dataTypeTuple, "求反余弦", "acos", "arc cosine"),
			defMethod(inClassHalcon, dataTypeTuple, "求反正切", "atan", "arc tangent"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "求反正切2", "atan2", "arc tangent2"),
			defMethod(inClassHalcon, dataTypeTuple, "求双曲正弦", "sinh", "hyperbolic sine"),
			defMethod(inClassHalcon, dataTypeTuple, "求双曲余弦", "cosh", "hyperbolic cosine"),
			defMethod(inClassHalcon, dataTypeTuple, "求双曲正切", "tanh", "hyperbolic tangent"),
			defMethod(inClassHalcon, dataTypeTuple, "求指数", "exp", "exponential function"),
			defMethod(inClassHalcon, dataTypeTuple, "求对数", "log", "natural logarithm"),
			defMethod(inClassHalcon, dataTypeTuple, "求自然对数", "log10", "decadic logarithm"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "求幂", "pow", "power function"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "求指数", "ldexp", "ldexp function"),
			defMethod(inClassHalcon, dataTypeTuple, "求最小值", "min", "minimum"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "求最小值2", "min2", "element-wise minimum"),
			defMethod(inClassHalcon, dataTypeTuple, "求最大值", "max", "maximum"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "求最大值2", "max2", "element-wise maximum"),
			defMethod(inClassHalcon, dataTypeTuple, "求总数", "sum", "sum function"),
			defMethod(inClassHalcon, dataTypeTuple, "求均值", "mean", "mean value"),
			defMethod(inClassHalcon, dataTypeTuple, "求标准偏差", "deviation", "standard deviation"),
			defMethod(inClassHalcon, dataTypeTuple, "求积分", "cumul", "cumulative sum"),
			defMethod(inClassHalcon, dataTypeTuple, "求中位数", "median", "median"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "选择排名", "select_rank", "element rank"),
			defMethod(inClassHalcon, dataTypeTuple, "求开方", "sqrt", "square root"),
			defMethod(inClassHalcon, dataTypeTuple, "弧度到角度", "deg", "radians to degrees"),
			defMethod(inClassHalcon, dataTypeTuple, "角度到弧度", "rad", "degrees to radians"),
			defMethod(inClassHalcon, dataTypeTuple, "整数到小数", "real", "integer to real"),
			defMethod(inClassHalcon, dataTypeTuple, "小数到整数", "int", "real to integer"),
			defMethod(inClassHalcon, dataTypeTuple, "四舍五入到整数", "round", "real to integer"),
			defMethod(inClassHalcon, dataTypeTuple, "求绝对值", "abs", "absolute value"),
			defMethod(inClassHalcon, dataTypeTuple, "求绝对值小数", "fabs", "floating absolute value"),
			defMethod(inClassHalcon, dataTypeTuple, "求最小整数", "ceil", "ceiling function"),
			defMethod(inClassHalcon, dataTypeTuple, "求最大整数", "floor", "floor function"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "求模小数", "fmod", "fractional part"),
			defMethod(inClassHalcon, dataTypeTuple, "求元素符号", "sgn", "element-wise sign"),
			defMethod(inClassHalcon, dataTypeTuple, "元素排序", "sort", "sort elements"),
			defMethod(inClassHalcon, dataTypeTuple, "元素排序索引", "sort_index", "sort elements (returns index)"),
			defMethod(inClassHalcon, dataTypeTuple, "元素倒序", "inverse", "reverse element order"),
			defMethod(inClassHalcon, SDT_BOOL, "是否为数值", "is_number", "test for numeric value"),
			defMethod(inClassHalcon, dataTypeTuple, "取整数", "number", "string to number"),
			defMethod(inClassHalcon, dataTypeTuple, "取环境变量", "environment", "environment variable"),
			defMethod(inClassHalcon, dataTypeTuple, "字符到整数", "ord", "character to ASCII number"),
			defMethod(inClassHalcon, dataTypeTuple, "整数到字符", "chr", "ASCII number to character"),
			defMethod(inClassHalcon, dataTypeTuple, "字符组到整数组", "ords", "tuple of strings to ASCII numbers"),
			defMethod(inClassHalcon, dataTypeTuple, "整数组到字符组chrt", "chrt", "tuple of integers to string"),
			defMethod(inClassHalcon, dataTypeTuple, "取随机数", "rand", "random number"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "取子集", "subset", "subset"),
			defMethod_TakeArgs(inClassHalcon, SDT_INT, __argregexp_test, "正则表达式测试", "regexp_test", "正则测试，返回测试结果"),
		
			//};   92
			//const int abc = sizeof(edef_CmdInfo) / sizeof(edef_CmdInfo[0]);

			//////////////////////////////////////////////////////////////////////////////////////////
			//然后是一系列的基本函数
			defMethod_TakeArgs(inClassHalcon, _SDT_NULL, __argShowObj, "显示对象", "show_obj", "这个显示对象函数会自动将对象显示，以字符串作为参数"),
			defMethod_TakeArgs(inClassHalcon, SDT_INT, __argGetWindowIdFromName, "取窗口ID用名字", "get_window_id_from_name", "获取\"显示对象\"打开的窗口的窗口ID"),
			defMethod_TakeArgs_DisabledInRelease(inClassHalcon, _SDT_NULL, __argConfig, "发生错误后暂停", "debug_config", "定义发生错误后暂停程序，便于调试"),
			defMethod_TakeArgs(inClassHalcon, _SDT_NULL, __argset_err_callback, "置错误回调", "set_err_callback", "如果期间发生了错误，将会执行这个地方设置的函数"),
			defMethod(inClassHalcon, SDT_INT, "制造错误", "make_error", "制造一个Halcon的错误，用于调试嘛"),
			defMethod_DynamicParemeter(inClassHalcon, dataTypeTuple, __arggen_tuple, "创建元组", "gen_tuple", "创建一个tuple类型，填入的所有参数都将一一加入到返回值的这个tuple中，无论是数组非数组都是"),
			defMethod_TakeArgs(inClassHalcon, SDT_TEXT, __argtuple_sdl, "取元组文本_严格", "get_tuple_string", "获取tuple中的字符串值，如果类型不对（即该索引位置不是字符串）则会产生一个异常哦，如果不想异常请选择SS"),
			defMethod_TakeArgs(inClassHalcon, SDT_DOUBLE, __argtuple_sdl, "取元组小数_严格", "get_tuple_double", "获取tuple中的双精度浮点数值，如果类型不对（即该索引位置不是双精度浮点数）则会产生一个异常哦，如果不想异常请选择DD"),
			defMethod_TakeArgs(inClassHalcon, SDT_INT, __argtuple_sdl, "取元组整数_严格", "get_tuple_long", "获取tuple中的整数值，如果类型不对（即该索引位置不是整数型）则会产生一个异常哦，如果不想异常请选择LL"),
			defMethod_TakeArgs(inClassHalcon, SDT_TEXT, __argtuple_sdl, "取元组文本", "get_tuple_string_ex", "获取tuple中的字符串值，如果类型不对（即该索引位置不是字符串）则会将数值转换为字符串并返回，如果想异常请选择S"),
			defMethod_TakeArgs(inClassHalcon, SDT_DOUBLE, __argtuple_sdl, "取元组小数", "get_tuple_double_ex", "获取tuple中的双精度浮点数值，如果类型不对（即该索引位置不是双精度浮点数）则会将数值转换为双精度浮点数并返回，如果想异常请选择D"),
			defMethod_TakeArgs(inClassHalcon, SDT_INT, __argtuple_sdl, "取元组整数", "get_tuple_long_ex", "获取tuple中的整数值，如果类型不对（即该索引位置不是整数值）则会将数值转换为整数值并返回，如果想异常请选择L"),
			defMethod_TakeArgs(inClassHalcon, SDT_INT, __argtuple_single_param, "取元组元素数", "n", "获取tuple中元素个数"),
			defMethod_TakeArgs(inClassHalcon, SDT_INT, __argtuple_sdl, "取元素类型", "get_tuple_element_type", "获取tuple中元素类型，对于索引超出会被报错喔"),
			defMethod_TakeArgs(inClassHalcon, SDT_BOOL, __argall_single_param, "是否为真", "xx_is_true", "断定一个tuple类型值是否为true"),
			defMethod_DynamicParemeter(inClassHalcon, _SDT_NULL, __argtuple_single_param, "重置元组", "tuple_reset", "重置tuple，将tuple中的数据清除掉"),
			defMethod_DynamicParemeter(inClassHalcon, _SDT_NULL, __argobj_single_param, "重置对象", "obj_reset", "重置obj，将obj中的数据清除掉"),
			defMethod_TakeArgs(inClassHalcon, _SDT_NULL, __argtuple_setter, "赋值元组元素", "tuple_set", "设置tuple指定位置的元素值"),

#ifdef USE_OPENCV
			defMethod_TakeArgs(inClassHalcon, SDT_INT, __argcvt_bytes2hImage, "字节集到视觉对象", "cvt_bytes2hImage", "将bmp图像字节集转换一个视觉图像对象"),
			defMethod_TakeArgs(inClassHalcon, SDT_BIN, __argcvt_hImage2bytes, "视觉对象到字节集", "cvt_hImage2bytes", "将一个视觉图像对象转换为字节集，返回值直接就是图像字节集了"),
#else
			defMethod_TakeArgs(inClassHalcon, SDT_INT, __argcvt_bytes2hImage, "字节集到视觉对象", "cvt_bytes2hImage", "将bmp图像字节集转换一个视觉图像对象"),
			defMethod_TakeArgs(inClassHalcon, SDT_BIN, __argcvt_hImage2bytes, "视觉对象到字节集", "cvt_hImage2bytes", "将一个视觉图像对象转换为bmp字节集，返回值直接就是bmp图像字节集了"),
#endif

			defMethod_Raw(inClassHalcon, CT_ALLOW_APPEND_NEW_ARG | CT_DISABLED_IN_RELEASE, _SDT_NULL, __argout, "调试输出", "xx_out", "输出一个tuple中的详细信息"),
			defMethod_TakeArgs(inClassHalcon, SDT_INT, __argwait_key, "等待按键", "waitKey", "等待用户按键后继续，返回值是按键的键代码，VK_xx宏"),

			//dev函数
			defMethod_DynamicParemeter(inClassHalcon, dataTypeTuple, __arggen_tuple_const, "创建元组重复值", "gen_tuple_const", "创建一个tuple类型，其元素值是重复指定次"),
			defMethod_TakeArgs(11, SDT_INT, arg_dev_set_part, "设置显示图像部分dev", "dev_set_part", "Modify the displayed image part."),
			defMethod_TakeArgs(11, SDT_INT, __argopen_window, "打开窗口", "xx_open_window", "专门定制的打开窗口函数"),
			defMethod(11, SDT_INT, "关闭所有窗口", "xx_close_all_window", "关闭所有窗口"),
			defMethod_TakeArgs(11, SDT_INT, __argos_window_hand, "取窗口句柄", "xx_os_window_hand", "获取窗口id的窗口句柄"),
			defMethod(11, SDT_INT, "取最后打开窗口ID", "xx_aw", "获取Active Window ID，这里是获取的最后一个打开的窗口句柄"),
			defMethod(11, SDT_INT, "关闭最后打开的窗口dev", "dev_close_window", "关闭最后打开的窗口"),
			defMethod(11, SDT_INT, "清除窗口内容dev", "dev_clear_window", "清除窗口内容"),
			defMethod_TakeArgs(11, SDT_INT, __argdev_open_window, "打开窗口dev", "dev_open_window", "打开窗口"),
			defMethod_TakeArgs(11, SDT_INT, __argdev_set_draw, "设置绘图模式dev", "dev_set_draw", "设置绘图模式"),
			defMethod_TakeArgs(11, SDT_INT, __argdev_set_color, "设置绘图颜色dev", "dev_set_color", "设置绘图颜色"),
			defMethod_TakeArgs(11, SDT_INT, __argdev_set_line_width, "设置绘图线宽dev", "dev_set_line_width", "设置绘图线宽"),
			defMethod_TakeArgs(11, SDT_INT, __argset_display_font, "设置显示字体", "set_display_font", "设置显示的字体"),
			defMethod_TakeArgs(11, SDT_INT, __argobj_single_param, "显示对象dev", "dev_display", "显示对象在当前窗口等同于disp_obj(取最后打开窗口ID(), obj);"),
			defMethod_TakeArgs(11, SDT_INT, __argdisp_message, "显示消息", "disp_message", "显示消息"),
			defMethod_TakeArgs(11, SDT_INT, __argdev_set_window, "设置激活窗口dev", "dev_set_window", "设置激活窗口"),
			defMethod_TakeArgs(11, SDT_INT, __argdisp_continue_message, "显示继续消息", "disp_continue_message", "显示继续消息，这个函数执行会要求用户按下F5键才能继续执行"),
			defMethod_DisabledInRelease(11, _SDT_NULL, "暂停", "stop", "暂停，相当于e的暂停函数，在调试的时候有效，非调试的时候这句代码没有用"),
			defMethod_TakeArgs_DisabledInRelease(inClassHalcon, _SDT_NULL, __argdev_update_window, "更新窗口dev", "dev_update_window", "无效的函数，他只在halcon的窗口环境下生效"),
			defMethod_TakeArgs_DisabledInRelease(inClassHalcon, _SDT_NULL, __argdev_update_window, "更新变量dev", "dev_update_var", "无效的函数，他只在halcon的窗口环境下生效"),
			defMethod_TakeArgs_DisabledInRelease(inClassHalcon, _SDT_NULL, __argdev_update_window, "更新pcdev", "dev_update_pc", "无效的函数，他只在halcon的窗口环境下生效"),
			defMethod_TakeArgs_DisabledInRelease(inClassHalcon, _SDT_NULL, __argdev_update_window, "更新时间dev", "dev_update_time", "无效的函数，他只在halcon的窗口环境下生效"),
			defMethod_DisabledInRelease(11, _SDT_NULL, "映射pardev", "dev_map_par", "无效的函数，他只在halcon的窗口环境下生效"),
			defMethod_DisabledInRelease(11, _SDT_NULL, "映射progdev", "dev_map_prog", "无效的函数，他只在halcon的窗口环境下生效"),
			defMethod_DisabledInRelease(11, _SDT_NULL, "映射vardev", "dev_map_var", "无效的函数，他只在halcon的窗口环境下生效"),
			defMethod_DisabledInRelease(11, _SDT_NULL, "反映射pardev", "dev_unmap_par", "无效的函数，他只在halcon的窗口环境下生效"),
			defMethod_DisabledInRelease(11, _SDT_NULL, "反映射progdev", "dev_unmap_prog", "无效的函数，他只在halcon的窗口环境下生效"),
			defMethod_DisabledInRelease(11, _SDT_NULL, "反映射vardev", "dev_unmap_var", "无效的函数，他只在halcon的窗口环境下生效"),
			defMethod_TakeArgs(11, SDT_INT, __argdev_set_window_extents, "设置窗口位置dev", "dev_set_window_extents", "设置窗口位置"),
			defMethod_TakeArgs(11, SDT_INT, __argobj_single_param, "清除操作对象dev", "dev_clear_obj", "从halcon database中删掉一个对象，释放内存，执行这个函数后的对象依旧可以使用，只是里面的内容清掉了，和obj重置等效"),
			defMethod_TakeArgs(11, _SDT_NULL, __argdev_error_var, "设置错误变量dev", "dev_error_var", "设置错误接受变量，当发生错误时，这个变量会被赋值，记录下错误编号，这个函数的做法并不好，不建议使用这个函数"),
			defMethod_TakeArgs_DisabledInRelease(inClassHalcon, _SDT_NULL, __argdev_get_exception_data, "获取异常信息dev", "dev_get_exception_data", "无效的函数，他只在halcon的窗口环境下生效"),
			defMethod_TakeArgs(11, SDT_INT, __argdev_set_check, "设置异常捕获模式dev", "dev_set_check", "设置异常捕获模式，如果定义为捕获异常，则发生异常会抛出来，如果设置了错误接收函数则会执行到，如果定义为无视异常，则发生异常将继续执行"),
			defMethod_TakeArgs_DisabledInRelease(inClassHalcon, _SDT_NULL, __argdev_close_inspect_ctrl, "设置关闭检查控制dev", "dev_close_inspect_ctrl", "无效的函数，他只在halcon的窗口环境下生效"),
			defMethod_TakeArgs_DisabledInRelease(inClassHalcon, _SDT_NULL, __argdev_get_preferences, "获取信息dev", "dev_get_preferences", "无效的函数，他只在halcon的窗口环境下生效"),
			defMethod_TakeArgs_DisabledInRelease(inClassHalcon, _SDT_NULL, __argdev_inspect_ctrl, "检查控制dev", "dev_inspect_ctrl", "无效的函数，他只在halcon的窗口环境下生效"),
			defMethod_TakeArgs(11, SDT_INT, __argdev_set_colored, "设置显示颜色数dev", "dev_set_colored", "设置显示颜色数"),
			defMethod_TakeArgs(11, SDT_INT, __argdev_set_lut, "设置查找表dev", "dev_set_lut", "设置显示表，Look up table"),
			defMethod_TakeArgs(11, SDT_INT, __argdev_set_paint, "设置灰度显示模式dev", "dev_set_paint", "设置灰度值显示模式"),
			defMethod_TakeArgs_DisabledInRelease(inClassHalcon, _SDT_NULL, __argdev_get_preferences, "设置信息dev", "dev_set_preferences", "无效的函数，他只在halcon的窗口环境下生效"),
			defMethod_TakeArgs(11, SDT_INT, __argdev_set_shape, "设置显示形状dev", "dev_set_shape", "设置显示形状"),

			defMethod_DisabledInRelease(11, _SDT_NULL, "关闭更新dev", "dev_update_off", "无效的函数，他只在halcon的窗口环境下生效"),
			defMethod_DisabledInRelease(11, _SDT_NULL, "打开更新dev", "dev_update_on", "无效的函数，他只在halcon的窗口环境下生效"),
			defMethod_TakeArgs(11, SDT_INT, __argdev_display_shape_matching_results, "显示形状匹配结果dev", "dev_display_shape_matching_results", "显示模型匹配结果"),
			defMethod_TakeArgs(11, SDT_INT, __argdev_open_window_fit_image, "打开窗口依据图像尺寸dev", "dev_open_window_fit_image", "打开窗口，和图像一样大"),
			defMethod_TakeArgs(11, SDT_INT, __argdev_open_window_fit_size, "打开窗口依据指定尺寸dev", "dev_open_window_fit_size", "打开窗口指定尺寸"),
			defMethod_TakeArgs(11, SDT_INT, __argdev_resize_window_fit_image, "重置窗口大小依据图像尺寸dev", "dev_resize_window_fit_image", "调整窗口大小"),
			defMethod_TakeArgs(11, SDT_INT, __argdev_resize_window_fit_size, "重置窗口大小依据指定尺寸dev", "dev_resize_window_fit_size", "调整窗口大小"),
			defMethod_TakeArgs(11, SDT_INT, __argdisp_3d_coord_system, "显示3d坐标系", "disp_3d_coord_system", "显示3d坐标系"),
			defMethod_TakeArgs(11, SDT_INT, __arggen_arrow_contour_xld, "产生箭头轮廓", "gen_arrow_contour_xld", "创建箭头轮廓xld"),
			defMethod_TakeArgs(11, SDT_INT, __arglist_image_files, "获取图像文件列表", "list_image_files", "图像文件列表"),
			defMethod_TakeArgs(11, SDT_INT, __argparse_filename, "解析文件名", "parse_filename", "解析文件名"),
			defMethod_TakeArgs(11, SDT_INT, __argscale_image_range, "缩放图像比例指定范围", "scale_image_range", "缩放图像比例指定范围"),
			defMethod_TakeArgs(11, SDT_INT, __argsort_pairs, "排序组对", "sort_pairs", "排序"),
			defMethod_TakeArgs(11, dataTypeTuple, __argtuple_gen_sequence, "创建序列", "tuple_gen_sequence", "创建序列"),

			//////////////////////////////////////////////////////////////////////////
			//这里开始将是增加函数的地方
			defMethod_TakeArgs(inClassHalcon, SDT_INT, __argobj_single_param, "图像宽度", "img_width", "获取图像宽度"),
			defMethod_TakeArgs(inClassHalcon, SDT_INT, __argobj_single_param, "图像高度", "img_height", "获取图像高度"),
			defMethod_Halcon(__arg_xx_read_image, "读图像", "x_read_image", "读取一个图像，支持各种不同的格式"),

			#include "function.halcon.cmd.h"
			///////////////////////////////////////////////////////////////////////////////
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argtuple_single_param, "克隆元组", "x_tuple_clone_tuple", "克隆一个视觉元组"),
			defMethod_TakeArgs(inClassHalcon, dataTypeObj, __argobj_single_param, "克隆对象", "x_tuple_clone_obj", "克隆一个视觉对象"),


#if 1
			//扩展的tuple函数
#if 0
			defMethod_Halcon(__arg_tuple_abs, "元组求绝对值", "tuple_abs", "计算元组的绝对值。"),
			defMethod_Halcon(__arg_tuple_acos, "元组求反余弦", "tuple_acos", "计算一个元组的反余弦。"),
			defMethod_Halcon(__arg_tuple_add, "元组求和", "tuple_add", "加二元组。"),
			defMethod_Halcon(__arg_tuple_and, "元组与", "tuple_and", "计算逻辑和二元组。"),
			defMethod_Halcon(__arg_tuple_asin, "元组求反正弦", "tuple_asin", "计算一个元组的反正弦。"),
			defMethod_Halcon(__arg_tuple_atan, "元组求反正切", "tuple_atan", "计算一个元组的反正切。"),
			defMethod_Halcon(__arg_tuple_atan2, "元组求反正切2", "tuple_atan2", "计算出所有四个象限的元组的反正切。"),
			defMethod_Halcon(__arg_tuple_band, "元组位与", "tuple_band", "运算符和二元计算。"),
			defMethod_Halcon(__arg_tuple_bnot, "元组位取反", "tuple_bnot", "不计算位元组。"),
			defMethod_Halcon(__arg_tuple_bor, "元组位或", "tuple_bor", "计算位或二元组。"),
			defMethod_Halcon(__arg_tuple_bxor, "元组位异或", "tuple_bxor", "计算的按位异或两个元组。"),
			defMethod_Halcon(__arg_tuple_ceil, "元组上取整", "tuple_ceil", "计算元组的上限函数。"),
			defMethod_Halcon(__arg_tuple_chr, "元组ascii字符到字符串", "tuple_chr", "转换一个元组整数到字符串对应的ASCII码。"),
			defMethod_Halcon(__arg_tuple_chrt, "元组ascii到字符串", "tuple_chrt", "转换一个元组整数到字符串对应的ASCII码。"),
			defMethod_Halcon(__arg_tuple_concat, "元组连接", "tuple_concat", "连接两个元组的一个。"),
			defMethod_Halcon(__arg_tuple_cos, "元组求余弦", "tuple_cos", "计算元组的余弦。"),
			defMethod_Halcon(__arg_tuple_cosh, "元组求双曲余弦", "tuple_cosh", "计算元组的双曲余弦。"),
			defMethod_Halcon(__arg_tuple_cumul, "元组求累加和", "tuple_cumul", "计算一个元组的累加和。"),
			defMethod_Halcon(__arg_tuple_deg, "元组求角度", "tuple_deg", "转换弧度到角度"),
			defMethod_Halcon(__arg_tuple_deviation, "元组求标准差", "tuple_deviation", "返回元组元素的标准偏差。"),
			defMethod_Halcon(__arg_tuple_difference, "元组求差集", "tuple_difference", "计算的两输入元组的差集。"),
			defMethod_Halcon(__arg_tuple_div, "元组除法", "tuple_div", "分二元组。"),
			defMethod_Halcon(__arg_tuple_environment, "元组取环境变量", "tuple_environment", "读取一个或多个环境变量。"),
			defMethod_Halcon(__arg_tuple_equal, "元组相等", "tuple_equal", "判断两个元组相等。"),
			defMethod_Halcon(__arg_tuple_equal_elem, "元组相等元素", "tuple_equal_elem", "测试，是否两个元组对应元素相等。"),
			defMethod_Halcon(__arg_tuple_exp, "元组求自然对数", "tuple_exp", "计算元组的幂函数，自然对数"),
			defMethod_Halcon(__arg_tuple_fabs, "元组求小数绝对值", "tuple_fabs", "计算元组的绝对值（如浮点数）。"),
			defMethod_Halcon(__arg_tuple_find, "元组查找所有元素", "tuple_find", "返回在另一个元组中所有出现的元组的索引。"),
			defMethod_Halcon(__arg_tuple_find_first, "元组寻找元素", "tuple_find_first", "返回在另一个元组中的第一个元组的第一个发生的索引。"),
			defMethod_Halcon(__arg_tuple_find_last, "元素倒找值", "tuple_find_last", "在另一个元组返回一个元组的最后发生的指标。"),
			defMethod_Halcon(__arg_tuple_first_n, "元组取左边元素", "tuple_first_n", "取元组左边0到n的所有元素"),
			defMethod_Halcon(__arg_tuple_floor, "元组下取整", "tuple_floor", "计算元组的地板函数。"),
			defMethod_Halcon(__arg_tuple_fmod, "元组求模小数", "tuple_fmod", "计算两个元组的浮点除法的余数。"),
			defMethod_Halcon(__arg_tuple_gen_const, "元组生成常数", "tuple_gen_const", "生成一个特定长度的元组，并初始化它的元素。"),
			defMethod_Halcon(__arg_tuple_gen_sequence, "元组生成序列", "tuple_gen_sequence", "产生一个序列的等距值的元组。"),
			defMethod_Halcon(__arg_tuple_greater, "元组大于", "tuple_greater", "测试一个元组是否大于另一个元组。"),
			defMethod_Halcon(__arg_tuple_greater_elem, "元组大于元素", "tuple_greater_elem", "测试，是否大于另一个元组元组的elementwise。"),
			defMethod_Halcon(__arg_tuple_greater_equal, "元组大于等于", "tuple_greater_equal", "测试一个元组是否大于或等于另一个元组。"),
			defMethod_Halcon(__arg_tuple_greater_equal_elem, "元组大于等于元素", "tuple_greater_equal_elem", "测试，是否一个元组的elementwise大于或等于另一个元组。"),
			defMethod_Halcon(__arg_tuple_histo_range, "元组创建直方图指定范围", "tuple_histo_range", "元组创建直方图指定范围"),
			defMethod_Halcon(__arg_tuple_insert, "元组插入元素", "tuple_insert", "将一个或多个元素插入到索引中的元组中。"),
			defMethod_Halcon(__arg_tuple_int, "元组到整数", "tuple_int", "将一个元组转换成一个整数元组。"),
			defMethod_Halcon(__arg_tuple_intersection, "元组求交集", "tuple_intersection", "计算的两输入元组的交集。"),
			defMethod_Halcon(__arg_tuple_inverse, "元组反转", "tuple_inverse", "反转元组。"),
			defMethod_Halcon(__arg_tuple_is_int, "元组是否整数型", "tuple_is_int", "测试一个元组的内部表示是否为整型的。"),
			defMethod_Halcon(__arg_tuple_is_int_elem, "元组是否为整数", "tuple_is_int_elem", "检验一个元组的元素类型的类型是整数。"),
			defMethod_Halcon(__arg_tuple_is_mixed, "元组是否为混合元组", "tuple_is_mixed", "测试一个元组是否是混合型的。"),
			defMethod_Halcon(__arg_tuple_is_number, "元组是否为数值", "tuple_is_number", "检查一个元组（字符串）是否表示数字。"),
			defMethod_Halcon(__arg_tuple_is_real, "元组是否为实数", "tuple_is_real", "测试一个元组的内部表示是否是实数。"),
			defMethod_Halcon(__arg_tuple_is_real_elem, "元组是否为实数", "tuple_is_real_elem", "测试元组的元素的类型是否为实数。"),
			defMethod_Halcon(__arg_tuple_is_string, "元组是否为字符串", "tuple_is_string", "测试一个元组的内部表示是否为类型的字符串。"),
			defMethod_Halcon(__arg_tuple_is_string_elem, "元组是否字符串元素", "tuple_is_string_elem", "检验一个元组元素的类型是字符串类型。"),
			defMethod_Halcon(__arg_tuple_last_n, "元组取右边元素", "tuple_last_n", "取以索引开始到结尾的所有元组"),
			defMethod_Halcon(__arg_tuple_ldexp, "元组ldexp", "tuple_ldexp", "计算两个元组ldexp功能。"),
			defMethod_Halcon(__arg_tuple_length, "元组取长度", "tuple_length", "返回元组的元素的数量。"),
			defMethod_Halcon(__arg_tuple_less, "元组小于", "tuple_less", "测试一个元组是否小于另一个元组。"),
			defMethod_Halcon(__arg_tuple_less_elem, "元组小于比较元素", "tuple_less_elem", "测试，是否小于另一个元组元组的elementwise。"),
			defMethod_Halcon(__arg_tuple_less_equal, "元组小于等于比较", "tuple_less_equal", "测试一个元组是否小于或等于另一个元组。"),
			defMethod_Halcon(__arg_tuple_less_equal_elem, "元组小于等于比较元素", "tuple_less_equal_elem", "测试比较两个元组，元组1是否小于元组2"),
			defMethod_Halcon(__arg_tuple_log, "元组求自然对数", "tuple_log", "计算元组的自然对数。"),
			defMethod_Halcon(__arg_tuple_log10, "元组求对数10", "tuple_log10", "计算元组的基础10对数。"),
			defMethod_Halcon(__arg_tuple_lsh, "元组左移", "tuple_lsh", "一个元组位向左移位。"),
			defMethod_Halcon(__arg_tuple_max, "元组求最大值", "tuple_max", "返回元组的最大元素。"),
			defMethod_Halcon(__arg_tuple_max2, "元组求最大值2", "tuple_max2", "计算两个元组对应元素的最大值。"),
			defMethod_Halcon(__arg_tuple_mean, "元组求平均值", "tuple_mean", "返回一个数的元组的平均值。"),
			defMethod_Halcon(__arg_tuple_median, "元组求中值", "tuple_median", "返回元组元素的中位数。"),
			defMethod_Halcon(__arg_tuple_min, "元组求最小值", "tuple_min", "返回元组的最小元素。"),
			defMethod_Halcon(__arg_tuple_min2, "元组求最小值2", "tuple_min2", "计算两个元组对应元素的最小。"),
			defMethod_Halcon(__arg_tuple_mod, "元组求模", "tuple_mod", "计算两个元组整数除法的余数。"),
			defMethod_Halcon(__arg_tuple_mult, "元组乘法", "tuple_mult", "乘2元组。"),
			defMethod_Halcon(__arg_tuple_neg, "元组负", "tuple_neg", "T=-T"),
			defMethod_Halcon(__arg_tuple_not, "元组逻辑否", "tuple_not", "计算元组的逻辑不是。"),
			defMethod_Halcon(__arg_tuple_not_equal, "元组不等于", "tuple_not_equal", "判断两个元组是不平等的。"),
			defMethod_Halcon(__arg_tuple_not_equal_elem, "元组不等于元素", "tuple_not_equal_elem", "测试，是否两个元组对应元素的不平等。"),
			defMethod_Halcon(__arg_tuple_number, "元组到数值", "tuple_number", "将一个元组（字符串）转换成一个数字元组。"),
			defMethod_Halcon(__arg_tuple_or, "元组或", "tuple_or", "计算逻辑或二元组。"),
			defMethod_Halcon(__arg_tuple_ord, "元组取字符ascii代码", "tuple_ord", "将一组长度为1的串成一个元组的ASCII码。"),
			defMethod_Halcon(__arg_tuple_ords, "元组取ascii代码", "tuple_ords", "将一个字符串转换为一个元组元组的ASCII码。"),
			defMethod_Halcon(__arg_tuple_pow, "元组求幂", "tuple_pow", "计算两个元组的幂函数。"),
			defMethod_Halcon(__arg_tuple_rad, "元组求弧度", "tuple_rad", "转换一个角度元组到弧度"),
			defMethod_Halcon(__arg_tuple_rand, "元组取随机数", "tuple_rand", "返回一个1和0之间的随机数元组。"),
			defMethod_Halcon(__arg_tuple_real, "元组到实数", "tuple_real", "将元组转换成一个浮点数的元组。"),
			defMethod_Halcon(__arg_tuple_regexp_match, "元组正则表达式匹配", "tuple_regexp_match", "提取子字符串使用正则表达式。"),
			defMethod_Halcon(__arg_tuple_regexp_replace, "元组正则表达式替换", "tuple_regexp_replace", "使用正则表达式替换子字符串。"),
			defMethod_Halcon(__arg_tuple_regexp_select, "元组正则表达式选择", "tuple_regexp_select", "选择匹配正则表达式的元组元素。"),
			defMethod_Halcon(__arg_tuple_regexp_test, "元组正则表达式测试", "tuple_regexp_test", "测试如果字符串匹配正则表达式。"),
			defMethod_Halcon(__arg_tuple_remove, "元组删除元素", "tuple_remove", "从元组中删除元素。"),
			defMethod_Halcon(__arg_tuple_replace, "元组替换元素", "tuple_replace", "替换一个元组的一个或多个元素。"),
			defMethod_Halcon(__arg_tuple_round, "元组四舍五入", "tuple_round", "将一个元组转换成一个整数元组。"),
			defMethod_Halcon(__arg_tuple_rsh, "元组右移", "tuple_rsh", "一个元组位向右移位。"),
			defMethod_Halcon(__arg_tuple_select, "元组选择", "tuple_select", "选择元组的单个元素。"),
			defMethod_Halcon(__arg_tuple_select_mask, "元组掩码选择", "tuple_select_mask", "在指定元组的指定元素中选择。"),
			defMethod_Halcon(__arg_tuple_select_range, "元组取中间", "tuple_select_range", "选择一个元组的区间内的几个元素。"),
			defMethod_Halcon(__arg_tuple_select_rank, "元组选择等级", "tuple_select_rank", "选择元组的秩n的元素。"),
			defMethod_Halcon(__arg_tuple_sgn, "元组取符号", "tuple_sgn", "计算元组的符号。"),
			defMethod_Halcon(__arg_tuple_sin, "元组求正弦", "tuple_sin", "计算元组的正弦。"),
			defMethod_Halcon(__arg_tuple_sinh, "元组求双曲正弦", "tuple_sinh", "计算元组的双曲正弦。"),
			defMethod_Halcon(__arg_tuple_sort, "元组排序", "tuple_sort", "排序元组的元素在上升的顺序。"),
			defMethod_Halcon(__arg_tuple_sort_index, "元组排序索引", "tuple_sort_index", "对元组的元素进行排序，并返回已排序的元组的索引。"),
			defMethod_Halcon(__arg_tuple_split, "元组分割字符串", "tuple_split", "分割字符串到预定义的分隔符号之间的子串（S）。"),
			defMethod_Halcon(__arg_tuple_sqrt, "元组求平方根", "tuple_sqrt", "计算元组的平方根。"),
			defMethod_Halcon(__arg_tuple_strchr, "元组查找字符", "tuple_strchr", "在字符串元组中的字符的前向搜索。"),
			defMethod_Halcon(__arg_tuple_string, "元组到字符串元组", "tuple_string", "将元组转换为字符串的元组。"),
			defMethod_Halcon(__arg_tuple_strlen, "元组取字符串长度", "tuple_strlen", "确定字符串元组中的每一个字符串的长度。"),
			defMethod_Halcon(__arg_tuple_strrchr, "元组倒找字符", "tuple_strrchr", "在字符串元组中的字符的向后搜索。"),
			defMethod_Halcon(__arg_tuple_strrstr, "元组倒找字符串", "tuple_strrstr", "在字符串元组中的字符串的向后搜索。"),
			defMethod_Halcon(__arg_tuple_strstr, "元组查找字符串", "tuple_strstr", "在字符串元组中的字符串的前向搜索。"),
			defMethod_Halcon(__arg_tuple_str_bit_select, "元组单字符选择", "tuple_str_bit_select", "从一个元组中选择单个字符或位。"),
			defMethod_Halcon(__arg_tuple_str_first_n, "元组取字符串左边", "tuple_str_first_n", "将第一个字符剪到一个字符串元组中的位置“n”。"),
			defMethod_Halcon(__arg_tuple_str_last_n, "元组取字符串右边", "tuple_str_last_n", "将从位置“n”的字符串元组中的所有字符开始。"),
			defMethod_Halcon(__arg_tuple_sub, "元组减", "tuple_sub", "减去二元组。"),
			defMethod_Halcon(__arg_tuple_substr, "元组取文本中间", "tuple_substr", "将字符位置“N1”通过“N2”出一个字符串数组。"),
			defMethod_Halcon(__arg_tuple_sum, "元组求总和", "tuple_sum", "返回元组的所有元素的和。"),
			defMethod_Halcon(__arg_tuple_symmdiff, "元组求对称差", "tuple_symmdiff", "计算的两输入元组的对称差。"),
			defMethod_Halcon(__arg_tuple_tan, "元组求正切", "tuple_tan", "计算元组的切线。"),
			defMethod_Halcon(__arg_tuple_tanh, "元组求双曲正切", "tuple_tanh", "计算元组的双曲切线。"),
			defMethod_Halcon(__arg_tuple_type, "元组取类型", "tuple_type", "返回元组的类型。"),
			defMethod_Halcon(__arg_tuple_type_elem, "元组取类型元素", "tuple_type_elem", "返回元组的元素的类型。"),
			defMethod_Halcon(__arg_tuple_union, "元组组合", "tuple_union", "组合两个输入的元组。"),
			defMethod_Halcon(__arg_tuple_uniq, "元组删重复元素", "tuple_uniq", "丢弃所有，但一个元组的连续相同的元素之一。"),
			defMethod_Halcon(__arg_tuple_xor, "元组异或", "tuple_xor", "计算逻辑异或两元组。"),
#endif

#if 1
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "取文本长度", "strlen", ""),
			defMethod_TakeArgs(inClassHalcon, SDT_INT, __arg_ex_insert, "插入", "insert", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argx_2tuple, "分割", "split", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "取单一", "uniq", "丢弃连续元素，取得单一的，比如输入：[1, 1, 2, 2, 2, 3]，返回：[1, 2, 3]"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argx_2tuple, "删除元素", "remove", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argx_2tuple, "寻找文本", "strchr", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argx_2tuple, "正向搜索", "strstr", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argx_2tuple, "左移", "lsh", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argx_2tuple, "右移", "rsh", ""),

			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argx_2tuple, "查找元素", "find", ""),
			defMethod_TakeArgs(inClassHalcon, _SDT_NULL, __arg_ex_set, "赋值", "set", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "取反", "not", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "位取反", "bnot", ""),
			defMethod_TakeArgs(inClassHalcon, SDT_INT, __argall_single_param, "取元素总数", "getcount", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argx_2tuple, "取元素", "get_value", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __arg_ex_get_value_range, "取元素范围", "get_value_range", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argx_2tuple, "取文本", "get_value_string", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __arg_ex_get_value_range, "取文本范围", "get_value_string_range", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argx_2tuple, "加", "add", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argx_2tuple, "减", "sub", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argx_2tuple, "乘", "mul", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argx_2tuple, "除", "div", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argx_2tuple, "求模", "mod", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argx_2tuple, "正则", "regexp", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argx_2tuple, "位与", "band", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argx_2tuple, "位异或", "bxor", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argx_2tuple, "位或", "bor", ""),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argx_2tuple, "文本格式化", "format", ""),
			defMethod_TakeArgs(inClassHalcon, SDT_BOOL, __argx_2tuple, "且", "and", ""),
			defMethod_TakeArgs(inClassHalcon, SDT_BOOL, __argx_2tuple, "或", "or", ""),
			defMethod_TakeArgs(inClassHalcon, SDT_BOOL, __argx_2tuple, "异或", "xor", ""),
			defMethod_TakeArgs(inClassHalcon, SDT_BOOL, __argx_2tuple, "小于", "less", ""),
			defMethod_TakeArgs(inClassHalcon, SDT_BOOL, __argx_2tuple, "大于", "greater", ""),
			defMethod_TakeArgs(inClassHalcon, SDT_BOOL, __argx_2tuple, "小于等于", "less_equal", ""),
			defMethod_TakeArgs(inClassHalcon, SDT_BOOL, __argx_2tuple, "大于等于", "greater_equal", ""),
			defMethod_TakeArgs(inClassHalcon, SDT_BOOL, __argx_2tuple, "等于", "equal", ""),
			defMethod_TakeArgs(inClassHalcon, SDT_BOOL, __argx_2tuple, "不等于", "not_equal", ""),

			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "求正弦", "sin", "sine"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "求余弦", "cos", "cosine"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "求正切", "tan", "tangent"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "求反正弦", "asin", "arc sine"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "求反余弦", "acos", "arc cosine"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "求反正切", "atan", "arc tangent"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argx_2tuple, "求反正切2", "atan2", "arc tangent2"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "求双曲正弦", "sinh", "hyperbolic sine"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "求双曲余弦", "cosh", "hyperbolic cosine"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "求双曲正切", "tanh", "hyperbolic tangent"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "求指数", "exp", "exponential function"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "求对数", "log", "natural logarithm"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "求自然对数", "log10", "decadic logarithm"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argx_2tuple, "求幂", "pow", "power function"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argx_2tuple, "求指数", "ldexp", "ldexp function"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "求最小值", "min", "minimum"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argx_2tuple, "求最小值2", "min2", "element-wise minimum"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "求最大值", "max", "maximum"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argx_2tuple, "求最大值2", "max2", "element-wise maximum"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "求总数", "sum", "sum function"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "求均值", "mean", "mean value"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "求标准偏差", "deviation", "standard deviation"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "求积分", "cumul", "cumulative sum"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "求中位数", "median", "median"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argx_2tuple, "选择排名", "select_rank", "element rank"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "求开方", "sqrt", "square root"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "弧度到角度", "deg", "radians to degrees"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "角度到弧度", "rad", "degrees to radians"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "整数到小数", "real", "integer to real"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "小数到整数", "int", "real to integer"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "四舍五入到整数", "round", "real to integer"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "求绝对值", "abs", "absolute value"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "求绝对值小数", "fabs", "floating absolute value"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "求最小整数", "ceil", "ceiling function"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "求最大整数", "floor", "floor function"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argx_2tuple, "求模小数", "fmod", "fractional part"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "求元素符号", "sgn", "element-wise sign"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "元素排序", "sort", "sort elements"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "元素排序索引", "sort_index", "sort elements (returns index)"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "元素倒序", "inverse", "reverse element order"),
			defMethod_TakeArgs(inClassHalcon, SDT_BOOL, __argall_single_param, "是否为数值", "is_number", "test for numeric value"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "取整数", "number", "string to number"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "取环境变量", "environment", "environment variable"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "字符到整数", "ord", "character to ASCII number"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "整数到字符", "chr", "ASCII number to character"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "字符组到整数组", "ords", "tuple of strings to ASCII numbers"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "整数组到字符组chrt", "chrt", "tuple of integers to string"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argall_single_param, "取随机数", "rand", "random number"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __argx_2tuple, "取子集", "subset", "subset"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __arg_ex_regexp_test, "正则测试", "regexp_test", "正则测试，返回测试结果"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __arg_ex_regexp_match, "正则匹配", "regexp_match", "提取子字符串使用正则表达式。"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __arg_ex_regexp_replace, "正则替换", "regexp_replace", "使用正则表达式替换子字符串。"),
			defMethod_TakeArgs(inClassHalcon, dataTypeTuple, __arg_ex_regexp_select, "正则选择", "regexp_select", "选择匹配正则表达式的元组元素。"),
#endif
#endif

			//这是扩展多余的函数，由于halcon12犯贱写的库函数
			defMethod_Halcon(__arg_disp_object_model_3d, "显示三维对象模型", "disp_object_model_3d_safe", "显示3维对象模型。"),
			defMethod_Halcon(__arg_ex_display_found_data_codes, "显示找到的数据码", "display_found_data_codes", "显示找到的数据码。"),
		};
	}
}